<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/projects/234567365/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo + hexo-next主题博客基本操作</title>
    <url>/projects/571402428/</url>
    <content><![CDATA[<h5 id="hexo-hexo-next主题博客基本操作"><a href="#hexo-hexo-next主题博客基本操作" class="headerlink" title="hexo + hexo-next主题博客基本操作"></a>hexo + hexo-next主题博客基本操作</h5><p>参考网址: <code><a href="https://bestzuo.cn/posts/blog-establish.html">https://bestzuo.cn/posts/blog-establish.html</a></code></p>
<p>基本环境: aliyun lamp(linux 7.3 apache 2.4 php 7.0 mysql 5.5) nodejs 10.16 npm 6.9</p>
<p><code>注: 个人搭着玩儿, 2019-09 </code></p>
<ol>
<li><p>安装nodejs 和 git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 下载nodejs: yum -y install nodejs </span><br><span class="line">2. 更新nodejs: npm install n -g</span><br><span class="line">               n stable</span><br><span class="line">               node -v (更新后可能npm还是老版本,没关系! 重连一下远程就正常了...)</span><br><span class="line">3. 查看git: git --version</span><br></pre></td></tr></table></figure></li>
<li><p>安装hexo 和 next 主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 安装hexo全局: npm install -g hexo</span><br><span class="line">2. 切换至工作目录: cd /home/wwwroot/blog.xxx.com/</span><br><span class="line">       </span><br><span class="line">       以下所有操作都是基于此目录↑↑↑</span><br><span class="line">       以下所有操作都是基于此目录↑↑↑</span><br><span class="line">       以下所有操作都是基于此目录↑↑↑</span><br><span class="line">       </span><br><span class="line">    注: 此目录为此博客操作目录, 访问目录是 /home/wwwroot/blog.xxx.com/public/ </span><br><span class="line">       (apache虚拟主机自己配至public目录即可)</span><br><span class="line">3. hexo init (初始化, 下载一些文件)</span><br><span class="line">4. hexo g -d (生成public静态文件, 外部访问web目录)</span><br><span class="line">5. 安装next主题: git clone https://github.com/theme-next/hexo-theme-next themes/next (此处安装最新next7)</span><br><span class="line">注: next5文档: https://theme-next.iissnan.com/getting-started.html</span><br><span class="line">    next最新文档: https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/README.md</span><br><span class="line">6. vim _config.yml</span><br><span class="line">   theme: next (theme改为next即可)</span><br><span class="line">   wq</span><br><span class="line">   hexo clean &amp;&amp; hexo g -d</span><br><span class="line">   OK!!!!!</span><br></pre></td></tr></table></figure></li>
<li><p>主配置文件修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line"># Site 站点主配置</span><br><span class="line">title: sanarous教你搭建Hexo博客  //网站标题修改</span><br><span class="line">subtitle: so easy~  //副标题修改</span><br><span class="line">description:  //网站描述</span><br><span class="line">keywords: hexo,next,Java,博客    //网站关键字,用英文逗号分开</span><br><span class="line">author: Sanarous   //此处填写你自己的昵称  </span><br><span class="line">language: zh-CN    //这里改成上面在主题配置文件中看到的语言名字，注意英文冒号:后面有一个空格</span><br><span class="line">timezone:   //网站时区，保持默认就可以了</span><br><span class="line"></span><br><span class="line">中间一般不需要动</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>记录一个<code>bug</code><br><code>typora</code> 写<code>markdown code</code>一行如果为空, 会出现空白行问题<br>解决方法: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\node_modules\hexo-util\lib\highlight.js</span><br><span class="line">54行</span><br><span class="line">result += `&lt;td class=&quot;code&quot;&gt;$&#123;before&#125;$&#123;content&#125; $&#123;after&#125;&lt;/td&gt;&lt;/tr&gt;`;</span><br><span class="line">加一个空格</span><br><span class="line">$&#123;content&#125; $&#123;after&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>面试题目</title>
    <url>/projects/312099341/</url>
    <content><![CDATA[<h5 id="1-什么是引用变量？在PHP中，用什么符号定义引用变量？"><a href="#1-什么是引用变量？在PHP中，用什么符号定义引用变量？" class="headerlink" title="1.什么是引用变量？在PHP中，用什么符号定义引用变量？"></a>1.什么是引用变量？在PHP中，用什么符号定义引用变量？</h5><p>在PHP中引用意味着用不同的名字访问同一个变量内容。使用&amp;符号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// 定义一个变量</span><br><span class="line">$a = range(0, 1000);</span><br><span class="line">var_dump(memory_get_usage());</span><br><span class="line"></span><br><span class="line">// 定义变量b，将a变量的值赋值给b</span><br><span class="line">// COW Copy On Write</span><br><span class="line">$b = $a;</span><br><span class="line">var_dump(memory_get_usage());</span><br><span class="line"></span><br><span class="line">// 对a进行修改</span><br><span class="line">$a = range(0, 1000);</span><br><span class="line">var_dump(memory_get_usage());</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// zval变量容器(需要安装xdebug扩展)</span><br><span class="line">$a = range(0, 3);</span><br><span class="line">xdebug_debug_zval(&#x27;a&#x27;);</span><br><span class="line"></span><br><span class="line">// 定义变量b，把a的值赋值给b</span><br><span class="line">$b = $a;</span><br><span class="line">xdebug_debug_zval(&#x27;a&#x27;);</span><br><span class="line"></span><br><span class="line">// 修改a</span><br><span class="line">$a = range(0, 3);</span><br><span class="line">xdebug_debug_zval(&#x27;a&#x27;);</span><br></pre></td></tr></table></figure>
<h5 id="2-PHP中字符串可以使用那三种定义方法以及各自的区别是什么？"><a href="#2-PHP中字符串可以使用那三种定义方法以及各自的区别是什么？" class="headerlink" title="2.PHP中字符串可以使用那三种定义方法以及各自的区别是什么？"></a>2.PHP中字符串可以使用那三种定义方法以及各自的区别是什么？</h5><p>定义方式：单引号，双引号，heredoc和newdoc.</p>
<p>单引号：不能解析变量，不能解析转义字符，只能解义单引号和反斜线本身，变量和变量，变量和字符串，字符串和字符串之间可以用.连接</p>
<p>双引号：可以解析变量，变量可以使用特殊字符和{}包含，可以解义所有的转义字符，可以使用.连接</p>
<p>单引号效率高</p>
<p>heredoc类似于双引号，newdoc类似于单引号，两者都是用来处理大文本</p>
<p>八大数据类型：标量（浮点，整型，字符串，布尔），复合（数组，对象），特殊（null，资源）</p>
<p>布尔中与false七种：0,0.0,’’,’0’,false,array(),NULL</p>
<p>超全局数组：$GLOBALS,$_GET,$_POST,$_REQUEST,$_SESSION,$_COOKIE,$_SERVER,$_FILES,$_ENV</p>
<p>$_SERVER[‘…’]在下面⬇</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      // HTTP_HOST 			主机名</span><br><span class="line">// HTTP_USER_AGENT 		获取终端设备, 浏览器版本</span><br><span class="line">// </span><br><span class="line">// SERVER_SOFTWARE 		获取服务器环境</span><br><span class="line">// SERVER_NAME 			服务器名 </span><br><span class="line">// SERVER_ADDR 			服务器地址 (IP)</span><br><span class="line">// REMOTE_ADDR 			客户端IP地址 	 </span><br><span class="line">// </span><br><span class="line">// SCRIPT_FILENAME		脚本地址(盘符)</span><br><span class="line">// SCRIPT_NAME 			脚本地址(网址)</span><br><span class="line">// </span><br><span class="line">// REQUEST_URI 			传输地址(带参数)</span><br><span class="line">// REQUEST_METHOD 		传输方式</span><br><span class="line">// QUERY_STRING 		传输参数</span><br><span class="line">// </span><br><span class="line">// HTTP_REFERER 		获取上一级的来源地址</span><br></pre></td></tr></table></figure>
<p>null：直接赋值为NULL，未定义变量，unset销毁的变量</p>
<p>常量：const，define（不能定义类常量），不能修改，删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">预定义常量</span><br><span class="line">_FILE_文件路径，文件名,</span><br><span class="line">_LINE_行号,</span><br><span class="line">_DIR_,</span><br><span class="line">_FUNCTION_函数体名称,</span><br><span class="line">_CLASS_类名，</span><br><span class="line">_TRAIT_,</span><br><span class="line">_METHOD_类名和方法名,</span><br><span class="line">_NAMESPACE_</span><br></pre></td></tr></table></figure>
<h5 id="3-foo-和-foo-之间的区别？"><a href="#3-foo-和-foo-之间的区别？" class="headerlink" title="3.foo()和@foo()之间的区别？"></a>3.foo()和@foo()之间的区别？</h5><p>PHP错误控制符@</p>
<p>运算符优先级：递增递减&gt;!&gt;算术运算符&gt;大小比较&gt;相等比较&gt;引用&gt;位运算符&gt;逻辑与&gt;逻辑或&gt;三目&gt;赋值&gt;and&gt;xor&gt;or</p>
<h5 id="4-请列出三种PHP数组循环操作的语法，并注明各种循环的区别"><a href="#4-请列出三种PHP数组循环操作的语法，并注明各种循环的区别" class="headerlink" title="4.请列出三种PHP数组循环操作的语法，并注明各种循环的区别"></a>4.请列出三种PHP数组循环操作的语法，并注明各种循环的区别</h5><p>for，foreach(可以重置指针reset)，while、list()、each()(不可以重置指针)</p>
<p>if(…){…}elseif(…){…}else(…){…};</p>
<p>(整型/浮点/字符串用switch)switch…case…如果外面有一层for循环,跳出用continue2.(会生成一个跳转表,效率比for循环高)</p>
<h5 id="5-读程序写答案"><a href="#5-读程序写答案" class="headerlink" title="5.读程序写答案"></a>5.读程序写答案</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 写出如下程序的输出结果：</span><br><span class="line"> * &lt;?php</span><br><span class="line"> *</span><br><span class="line"> * $count = 5;</span><br><span class="line"> * function get_count()</span><br><span class="line"> * &#123;</span><br><span class="line"> *     static $count;</span><br><span class="line"> *     return $count++;</span><br><span class="line"> * &#125;</span><br><span class="line"> * echo $count;</span><br><span class="line"> * ++$count;</span><br><span class="line"> *</span><br><span class="line"> * echo get_count();</span><br><span class="line"> * echo get_count();</span><br><span class="line"> * </span><br><span class="line"> * ?&gt;</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">$count = 5;</span><br><span class="line">function get_count()</span><br><span class="line">&#123;</span><br><span class="line">    static $count;  </span><br><span class="line">    return $count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $count;</span><br><span class="line">++$count;</span><br><span class="line"></span><br><span class="line">echo get_count();</span><br><span class="line">echo get_count();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>5、NULL、1 (NULL不输出)结果为51</p>
<p>静态变量:static</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.仅初始化一次</span><br><span class="line">2.初始化时需要赋值</span><br><span class="line">3.每次执行函数该值会保留</span><br><span class="line">4.static 修饰的变量是局部的,仅在函数内部有效</span><br><span class="line">5.可以记录函数的调用次数,从而可以在某些条件下终止递归</span><br></pre></td></tr></table></figure>
<p>函数的返回值:如果省略return,返回NULL</p>
<p>include运行错误会发出警告(E_WARNING),不会终止程序</p>
<p>require会发出严重错误(E_COMPIRE_ERROR),会终止程序</p>
<p>系统内置函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.时间日期函数</span><br><span class="line">date(),strtotime(),mktime(),time(),microtime(),date_default_timezone_set()</span><br><span class="line">2.IP处理处理函数</span><br><span class="line">ip2long(),long2ip()</span><br><span class="line">3.打印处理</span><br><span class="line">print(),printf(),print_r(),echo(),sprintf(),var_dump(),var_export()</span><br><span class="line">4.序列化函数和反序列化函数</span><br><span class="line">serialize(),unserialize()</span><br><span class="line">5.字符串处理函数</span><br><span class="line">implode(),explode(),join(),strrev(),trim(),strstr(),number_format()...</span><br><span class="line">6.数组处理函数</span><br><span class="line">array_merge(),array_rand()...</span><br></pre></td></tr></table></figure>
<p>正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正则表达式的作用:分割、查找、匹配、替换字符串</span><br><span class="line">分隔符:正斜线(/)、hash符号(#)和取反符号(~)</span><br><span class="line">通用原子:\d\D(0-9)\w\W(数字字母下划线)\s\S(空白符)</span><br><span class="line">元字符:. * ? $ + &#123;n&#125; &#123;n,&#125; &#123;n,m&#125; [] () [^] | [-]</span><br><span class="line">模式修正符:i m e s U x A D u </span><br><span class="line">后向引用: (...)  \1</span><br><span class="line">贪婪模式:?,U,取消贪婪模式</span><br><span class="line">&lt;!--正则表达式PCRE函数:preg_match(),preg_match_all(),preg_replace(),preg_split()</span><br></pre></td></tr></table></figure>
<h5 id="6-不断在文件-hello-txt-头部写入一行-“Hello-World”-字符串-要求代码完整"><a href="#6-不断在文件-hello-txt-头部写入一行-“Hello-World”-字符串-要求代码完整" class="headerlink" title="6.不断在文件 hello.txt 头部写入一行 “Hello World” 字符串, 要求代码完整"></a>6.不断在文件 hello.txt 头部写入一行 “Hello World” 字符串, 要求代码完整</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// 打开文件</span><br><span class="line">//</span><br><span class="line">// 将文件的内容读取出来，在开头加入Hello World</span><br><span class="line">//</span><br><span class="line">// 将拼接好的字符串写回到文件当中</span><br><span class="line">//</span><br><span class="line">// Hello 7891234567890</span><br><span class="line">//</span><br><span class="line">$file = &#x27;./hello.txt&#x27;;</span><br><span class="line"></span><br><span class="line">$handle = fopen($file, &#x27;r&#x27;);</span><br><span class="line"></span><br><span class="line">$content = fread($handle, filesize($file));</span><br><span class="line"></span><br><span class="line">$content = &#x27;Hello World&#x27;. $content;</span><br><span class="line"></span><br><span class="line">fclose($handle);</span><br><span class="line"></span><br><span class="line">$handle = fopen($file, &#x27;w&#x27;);</span><br><span class="line"></span><br><span class="line">fwrite($handle, $content);</span><br><span class="line"></span><br><span class="line">fclose($handle);</span><br></pre></td></tr></table></figure>
<p>知识点梳理↓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fopen()打开函数</span><br><span class="line">fwrite(),fputs()写入函数</span><br><span class="line">fread(),fgets(),fgetc()读取函数</span><br><span class="line">fclose()关闭函数</span><br><span class="line"></span><br><span class="line">不需要fopen()打开的函数</span><br><span class="line">file_get_contents()</span><br><span class="line">file_put_contents()</span><br><span class="line"></span><br><span class="line">其他读取函数</span><br><span class="line">file(),readfile()</span><br><span class="line"></span><br><span class="line">访问远程文件</span><br><span class="line">开启allow_url_fopen,HTTP协议链接只能使用只读,ftp协议可以使用只读或者只写</span><br><span class="line"></span><br><span class="line">目录操作函数</span><br><span class="line">名称相关:basename(),dirname(),pathinfo()</span><br><span class="line">目录读取:opendir(),readdir(),close(),rewinddir()</span><br><span class="line">目录删除:rmdir()</span><br><span class="line">目录创建:mkdir()</span><br><span class="line"></span><br><span class="line">其它函数</span><br><span class="line">文件大小:filesize()</span><br><span class="line">目录大小:disk_free_space(),disk_total_space()</span><br><span class="line">文件拷贝:copy()</span><br><span class="line">文件删除:unlink()</span><br><span class="line">文件类型:filetype()</span><br><span class="line">重命名文件:rename()</span><br><span class="line">文件截取:ftruncate()</span><br><span class="line">文件属性:file_exists(),is_readable(),is_writable(),is_executable(),filectime(),fileatime(),filemtime()</span><br><span class="line">文件锁:flock()</span><br><span class="line">文件指针:ftell(),fseek(),rewind()</span><br></pre></td></tr></table></figure>

<p>例题:通过PHP函数的方式对目录进行遍历,写出程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$dir = &#x27;./test&#x27;;</span><br><span class="line"></span><br><span class="line">// 打开目录</span><br><span class="line">// 读取目录当中的文件</span><br><span class="line">// 如果文件类型是目录，继续打开目录</span><br><span class="line">// 读取子目录的文件</span><br><span class="line">// 如果文件类型是文件，输出文件名称</span><br><span class="line">// 关闭目录</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">function loopDir($dir)</span><br><span class="line">&#123;</span><br><span class="line">    $handle = opendir($dir);</span><br><span class="line"></span><br><span class="line">    while(false!==($file = readdir($handle)))</span><br><span class="line">    &#123;</span><br><span class="line">        if ($file != &#x27;.&#x27; &amp;&amp; $file != &#x27;..&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            echo $file. &quot;\n&quot;;</span><br><span class="line">            if (filetype($dir. &#x27;/&#x27;. $file) == &#x27;dir&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                loopDir($dir. &#x27;/&#x27;. $file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loopDir($dir);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="7-尽可能多的写出-Linux-命令"><a href="#7-尽可能多的写出-Linux-命令" class="headerlink" title="7.尽可能多的写出 Linux 命令"></a>7.尽可能多的写出 Linux 命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux常用命令</span><br><span class="line">系统安全:sudo,su,chmod,setfacl</span><br><span class="line">进程管理:w,top,ps,kill,pkill,sptree,killall</span><br><span class="line">用户管理:id,usermod,useradd,groupadd,userdel</span><br><span class="line">文件系统:mount,umount,fsck,df,du</span><br><span class="line">系统关机和重启:shutdown,reboot</span><br><span class="line">网络应用:curl,telnet,mail,elinks</span><br><span class="line">网络测试:ping,netstat,host</span><br><span class="line">网络配置:hostname,ifconfig</span><br><span class="line">常用工具:ssh,screen,clear,who,date</span><br><span class="line">软件包的管理:yum,rpm,apt-get</span><br><span class="line">文件查找和比较:locate,find</span><br><span class="line">文件内容查看:head,tail,less,more</span><br><span class="line">文件处理:touch,unlink,rename,ln,cat</span><br><span class="line">目录操作:cd,mv,rm,pwd,tree,cp,ls</span><br><span class="line">文件权限属性:setfacl,chmod,chowm,chgrp</span><br><span class="line">压缩解压:bzip2 bunzip2,gzip gunzip,zip unzip,tar</span><br><span class="line">文件传输:ftp,scp</span><br><span class="line"></span><br><span class="line">定时任务</span><br><span class="line">1.  crontab -e</span><br><span class="line">*****命令(分时日月周)</span><br><span class="line">2.  at 2:00 tomorrow</span><br><span class="line">at&gt;/home/Jason/do_job</span><br><span class="line">at&gt;Ctrl+D</span><br><span class="line"></span><br><span class="line">vim编辑器操作</span><br><span class="line"> </span><br><span class="line">shell基础</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h5 id="8-请写出mysql数据类型表达的意义-int-0-char-16-varchar-16-datetime-text"><a href="#8-请写出mysql数据类型表达的意义-int-0-char-16-varchar-16-datetime-text" class="headerlink" title="8.请写出mysql数据类型表达的意义(int(0),char(16),varchar(16),datetime(),text)"></a>8.请写出mysql数据类型表达的意义(int(0),char(16),varchar(16),datetime(),text)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">整数类型:TINYINT,SMALLINT,MEDIUMINT,INT,BIGINT</span><br><span class="line">属性:UNSIGNED</span><br><span class="line">实数类型:FLOAT,DOUBLE,DECIMAL</span><br><span class="line">字符串类型:VARCHAR,CHAR,TEXT,BLOB</span><br><span class="line">枚举:ENUM</span><br><span class="line">日期和时间:TIMESTAMP,DATETIME</span><br><span class="line">列属性:auto_increment,default,not null, zerofill</span><br><span class="line"></span><br><span class="line">MySQL基础操作</span><br><span class="line">链接:mysql -u -p -h -P(端口)</span><br><span class="line"></span><br><span class="line">InnoDB表引擎</span><br><span class="line">行级锁,事务,崩溃后安全恢复</span><br></pre></td></tr></table></figure>
<h5 id="9-简单描述MySQL中-索引-主键-唯一索引-联合索引的区别-对数据库的性能有什么影响"><a href="#9-简单描述MySQL中-索引-主键-唯一索引-联合索引的区别-对数据库的性能有什么影响" class="headerlink" title="9.简单描述MySQL中,索引,主键,唯一索引,联合索引的区别,对数据库的性能有什么影响?"></a>9.简单描述MySQL中,索引,主键,唯一索引,联合索引的区别,对数据库的性能有什么影响?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复合索引:key(a,b,c)</span><br><span class="line">注意事项,前缀原则</span><br></pre></td></tr></table></figure>
<p>MySQL的关联查询语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">六种查询语句</span><br><span class="line">CROSS JOIN,INNER JOIN, LEFT JOIN RIGHT JOIN,UNION与UNION ALL,FULL JOIN</span><br></pre></td></tr></table></figure>
<h5 id="10-请简述项目中如何优化SQL语句执行效率的方法-从哪些方面-SQL语句性能如何分析"><a href="#10-请简述项目中如何优化SQL语句执行效率的方法-从哪些方面-SQL语句性能如何分析" class="headerlink" title="10.请简述项目中如何优化SQL语句执行效率的方法,从哪些方面,SQL语句性能如何分析?"></a>10.请简述项目中如何优化SQL语句执行效率的方法,从哪些方面,SQL语句性能如何分析?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分析SQL查询慢的方法</span><br><span class="line">  记录慢查询日志</span><br><span class="line">分析查询日志,不要直接打开慢查询日志进行分析,这样比较浪费时间和精力,可以使用pt-query-digest工具进行分析</span><br><span class="line"></span><br><span class="line">使用show profile</span><br><span class="line">  set profiling = 1;开启,服务器上执行的所有语句会检测消耗的时间,存到临时表中</span><br><span class="line">  show profiles</span><br><span class="line">  show profile for query 临时表ID</span><br><span class="line">  </span><br><span class="line">使用show status(使用次数,查询次数)</span><br><span class="line"></span><br><span class="line">使用show processlist(记录线程)</span><br><span class="line"></span><br><span class="line">使用explain(分析单条SQL语句),,别名:desc</span><br><span class="line"></span><br><span class="line">优化:</span><br><span class="line">1.limit</span><br><span class="line">2.避免返回全部列</span><br><span class="line">3.不用*号</span><br><span class="line">4.常用数据做缓存</span><br><span class="line">4.用explain分析是否扫描额外的数据</span><br><span class="line">5.优化长难的查询语句</span><br><span class="line">6.优化特定类型的查询语句</span><br></pre></td></tr></table></figure>
<h5 id="11-简述MySQL分表操作和分区的工作原理-分别说说分区和分表的使用场景和各自优缺点"><a href="#11-简述MySQL分表操作和分区的工作原理-分别说说分区和分表的使用场景和各自优缺点" class="headerlink" title="11.简述MySQL分表操作和分区的工作原理,分别说说分区和分表的使用场景和各自优缺点"></a>11.简述MySQL分表操作和分区的工作原理,分别说说分区和分表的使用场景和各自优缺点</h5><p>MySQL的高可扩展和高可用考察点↓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分区表的原理</span><br><span class="line">  对用户而言,分区表是一个独立的逻辑表,但是底层MySQL将其分成了多个物理子表,这对用户来说是透明的,每一个分区表都会使用一个独立的表文件.</span><br><span class="line">  </span><br><span class="line">分库分表的原理</span><br><span class="line">  通过一些HASH算法或者工具实现将一张数据表垂直或者水平的进行物理切分</span><br><span class="line">  </span><br><span class="line">MySQL的复制原理及负载均衡</span><br><span class="line">主从复制解决的问题:</span><br><span class="line">1.数据分布</span><br><span class="line">2.负载均衡</span><br><span class="line">3.高可用和故障切换</span><br><span class="line">4.升级测试</span><br></pre></td></tr></table></figure>
<h5 id="12-SQL语句应该考虑哪些安全问题"><a href="#12-SQL语句应该考虑哪些安全问题" class="headerlink" title="12.SQL语句应该考虑哪些安全问题?"></a>12.SQL语句应该考虑哪些安全问题?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL查询的安全方案</span><br><span class="line">  1.使用预处理语句防止SQL注入</span><br><span class="line">  2.写入数据库的数据要进行特殊字符的转义</span><br><span class="line">  3.查询错误信息不要反回给用户,将错误记录到日志</span><br><span class="line">  </span><br><span class="line">MySQL的其他安全设置</span><br><span class="line">  1.定期做数据备份</span><br><span class="line">  2.不给查询用户root权限,合理分配权限</span><br><span class="line">  3.关闭远程访问数据库权限</span><br><span class="line">  4.修改root口令</span><br><span class="line">  5.删除多余的用户</span><br><span class="line">  6.改变root用户的名称</span><br><span class="line">  7.限制一般用户浏览其他库</span><br><span class="line">  8.限制用户对数据文件的访问权限</span><br></pre></td></tr></table></figure>
<p>为什么PDO比MySQLi更安全?↓</p>
<p>PDO支持预处理,MySQLi比PDO稍快</p>
<h5 id="13-编写一个在线留言本-实现用户的在线留言功能-留言信息存储到数据库-要求设计数据表内容以及使用PHP编码完成"><a href="#13-编写一个在线留言本-实现用户的在线留言功能-留言信息存储到数据库-要求设计数据表内容以及使用PHP编码完成" class="headerlink" title="13.编写一个在线留言本,实现用户的在线留言功能,留言信息存储到数据库,要求设计数据表内容以及使用PHP编码完成"></a>13.编写一个在线留言本,实现用户的在线留言功能,留言信息存储到数据库,要求设计数据表内容以及使用PHP编码完成</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6-1 程序功能设计考察点(+无限分类)</span><br></pre></td></tr></table></figure>

<h5 id="PHP框架的差异和优缺点"><a href="#PHP框架的差异和优缺点" class="headerlink" title="PHP框架的差异和优缺点"></a>PHP框架的差异和优缺点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yaf框架:yaf使用PHP扩展的形式写的一个PHP框架,也就是以C语言为底层编写的,性能上要比PHP代码写的框架要快一个数量级.</span><br><span class="line">优点:执行效率高,轻量级框架,可扩展性强</span><br><span class="line">缺点:高版本兼容性差,底层代码可读性差,需要安装扩展,功能单一,开发需要编写大量的插件</span><br><span class="line"></span><br><span class="line">yii2框架:是一款非常优秀的通用web后端框架,结构简单优雅,实用功能丰富,扩展性强,性能高是它最突出的优点</span><br><span class="line">缺点:学习成本高,相比yaf,量级较重</span><br></pre></td></tr></table></figure>

<h5 id="时间复杂度T-n-O-f-n"><a href="#时间复杂度T-n-O-f-n" class="headerlink" title="时间复杂度T(n) = O(f(n))"></a>时间复杂度T(n) = O(f(n))</h5><p>常数阶O(1),线性阶O(n),平方阶O(n^2)</p>
<p>对数阶O(log2n)</p>
<h5 id="空间复杂度S-n-O-f-n"><a href="#空间复杂度S-n-O-f-n" class="headerlink" title="空间复杂度S(n) = O(f(n))"></a>空间复杂度S(n) = O(f(n))</h5><p>冒泡排序的元素交换,空间复杂度O(1)</p>
<h5 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h5><p>冒泡排序,直接插入排序,希尔排序,选择排序,快速排序,堆排序,归并排序</p>
<h5 id="二分查找-顺序查找"><a href="#二分查找-顺序查找" class="headerlink" title="二分查找/顺序查找"></a>二分查找/顺序查找</h5><h5 id="请简单描述下数据结构的特征-stack-heap-list-doubly-linked-list-queue-array-vector"><a href="#请简单描述下数据结构的特征-stack-heap-list-doubly-linked-list-queue-array-vector" class="headerlink" title="请简单描述下数据结构的特征(stack,heap,list,doubly-linked-list,queue,array(vector))"></a>请简单描述下数据结构的特征(stack,heap,list,doubly-linked-list,queue,array(vector))</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array数组,</span><br><span class="line">LinkedList链表,</span><br><span class="line">Stack栈,</span><br><span class="line">Heap堆,</span><br><span class="line">list线性表,</span><br><span class="line">doubly-linked-list双向链表,</span><br><span class="line">queue队列,</span><br><span class="line">set集合,</span><br><span class="line">map字典,</span><br><span class="line">graph图</span><br></pre></td></tr></table></figure>

<h5 id="PHP如何解决网站大流量与高并发的问题"><a href="#PHP如何解决网站大流量与高并发的问题" class="headerlink" title="PHP如何解决网站大流量与高并发的问题"></a>PHP如何解决网站大流量与高并发的问题</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPS:每秒钟请求或查询的数量,在互联网领域,指每秒响应请求数(指HTTP请求);</span><br><span class="line">吞吐量:单位时间内处理的请求数量(通常由QPS与并发数决定)</span><br><span class="line">PV:综合浏览量</span><br><span class="line">UV:独立访客</span><br><span class="line">日网站带宽 = PV/统计时间(换算秒)*平均页面大小(单位KB)*8</span><br><span class="line"></span><br><span class="line">(总PV数*80%)/(6小时秒数*20%) = 峰值每秒请求数(QPS)</span><br><span class="line">80%的请求集中在20%时间内</span><br></pre></td></tr></table></figure>
<h5 id="防盗链的概念"><a href="#防盗链的概念" class="headerlink" title="防盗链的概念"></a>防盗链的概念</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">防止别人通过一些技术手段绕过本站</span><br><span class="line">的资源,让绕开本站资源显示的页面链接失效.</span><br><span class="line">通过HTTP_REFERER或者签名来做</span><br></pre></td></tr></table></figure>
<h5 id="减少HTTP请求的方式"><a href="#减少HTTP请求的方式" class="headerlink" title="减少HTTP请求的方式"></a>减少HTTP请求的方式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.使用图片地图</span><br><span class="line">2.css精灵</span><br><span class="line">3.合并多个脚本</span><br><span class="line">4.图片base64编码的方式</span><br></pre></td></tr></table></figure>

<h5 id="浏览器缓存和数据压缩"><a href="#浏览器缓存和数据压缩" class="headerlink" title="浏览器缓存和数据压缩"></a>浏览器缓存和数据压缩</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP缓存机制</span><br><span class="line">缓存分类:</span><br><span class="line">200 from cache:直接从本地获取缓存</span><br><span class="line">304 not modified:协商缓存</span><br><span class="line">200 ok:没有用到缓存,最慢</span><br><span class="line">相关Header:</span><br><span class="line">1.Pragma:该字段设为no-cache时,告知浏览器禁用本地缓存</span><br><span class="line">2.Expires:启用本地缓存的字段,thu,31 Dec 2037 22:55:55 GMT的格林威治时间</span><br><span class="line">3.Cache-Control:no-store,no-cache,max-age=delta-seconds</span><br><span class="line">优先级:1&gt;3&gt;2</span><br><span class="line"></span><br><span class="line">Nginx配置缓存策略</span><br><span class="line">expries , etag , add_header</span><br><span class="line"></span><br><span class="line">前端代码和资源的压缩</span><br><span class="line">js,css,图片,HTTP都可以压缩</span><br><span class="line">Nginx下的gzip</span><br></pre></td></tr></table></figure>
<h5 id="cdn加速"><a href="#cdn加速" class="headerlink" title="cdn加速"></a>cdn加速</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内容分发网络,更快,更稳定</span><br><span class="line">实现:</span><br><span class="line">bat等都有提供cdn加速</span><br><span class="line">可用lvs做4层负载均衡</span><br><span class="line">squid做反向代理,Nginx也可以</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>云之梦面试题</title>
    <url>/projects/3650482178/</url>
    <content><![CDATA[<h5 id="第一课总结-最新PHP面试教程http-www-php-cn-course-876-html"><a href="#第一课总结-最新PHP面试教程http-www-php-cn-course-876-html" class="headerlink" title="第一课总结(最新PHP面试教程http://www.php.cn/course/876.html)"></a>第一课总结(最新PHP面试教程<a href="http://www.php.cn/course/876.html">http://www.php.cn/course/876.html</a>)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.自己充满正能量,心态好,多吃苦,提升技能.</span><br><span class="line">2.团队要正能量,融入团队,积极乐观.</span><br><span class="line">3.人品第一,技能其次.</span><br></pre></td></tr></table></figure>
<h5 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Use du.  当前目录的空间(Linux)</span><br><span class="line"></span><br><span class="line">crontab -e</span><br><span class="line">分时日月周(Linux)</span><br><span class="line">cp f1.txt f2.txt 复制</span><br><span class="line"></span><br><span class="line">看Linux启动信息:dmesg</span><br></pre></td></tr></table></figure>
<h5 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加号(+)可以进行数组合并</span><br><span class="line">月:m和n</span><br><span class="line">日:d和j(带不带前导零)</span><br><span class="line">preg_split(/-|_/,$arr)  正则分割</span><br><span class="line">str_split($arr,3)  按长度分割</span><br><span class="line">str_replace(&#x27;1&#x27;,&#x27;2&#x27;,$str) 字符串替换(把1换成2)</span><br><span class="line">preg_replace(/linux|php/,&#x27;js&#x27;,$arr) 字符串正则替换</span><br><span class="line"></span><br><span class="line">类:protect,public,private</span><br><span class="line">interface 接口</span><br><span class="line">abstract 抽象类或抽象方法</span><br><span class="line">final 最终版本的类或方法</span><br><span class="line">static 静态属性或方法</span><br></pre></td></tr></table></figure>
<h5 id="5-从表login中选出name字段包含admin的前10条结果所有信息的sql语句"><a href="#5-从表login中选出name字段包含admin的前10条结果所有信息的sql语句" class="headerlink" title="5.从表login中选出name字段包含admin的前10条结果所有信息的sql语句"></a>5.从表login中选出name字段包含admin的前10条结果所有信息的sql语句</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from login where name like &quot;%admin%&quot; limit 10;</span><br></pre></td></tr></table></figure>
<h5 id="6-解释-左连接-右链接-内连接-索引"><a href="#6-解释-左连接-右链接-内连接-索引" class="headerlink" title="6.解释:左连接,右链接,内连接,索引"></a>6.解释:左连接,右链接,内连接,索引</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左连接:left ... join ... on</span><br><span class="line">以左表为主导,先输出左边表的所有数据,右边匹配的输出,不匹配的值为null.</span><br><span class="line">内连接:inner ... join ... on</span><br><span class="line">相当于普通多表查询</span><br><span class="line">索引:主键,唯一,普通</span><br></pre></td></tr></table></figure>
<h5 id="7-简述论坛中无限分类等等实现原理"><a href="#7-简述论坛中无限分类等等实现原理" class="headerlink" title="7.简述论坛中无限分类等等实现原理"></a>7.简述论坛中无限分类等等实现原理</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表字段至少4列:</span><br><span class="line">id,name,pid(父类id),path(分类地图)</span><br></pre></td></tr></table></figure>
<h5 id="10-描述一下大流量高并发量网站的解决方案"><a href="#10-描述一下大流量高并发量网站的解决方案" class="headerlink" title="10.描述一下大流量高并发量网站的解决方案"></a>10.描述一下大流量高并发量网站的解决方案</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.服务器负载均衡</span><br><span class="line">2.web服务器用nginx(3万)替换apache(3千)  (最大并发数)</span><br><span class="line">6.调高apache的默认并发数调大</span><br><span class="line">7.减少客户在服务器上的连接断开时间</span><br><span class="line">4.数据缓存(memcache,redis,tp文件缓存)</span><br><span class="line">5.表索引</span><br></pre></td></tr></table></figure>
<h5 id="11-如何设计或配置MySQL-才能达到高效的使用目的"><a href="#11-如何设计或配置MySQL-才能达到高效的使用目的" class="headerlink" title="11.如何设计或配置MySQL,才能达到高效的使用目的?"></a>11.如何设计或配置MySQL,才能达到高效的使用目的?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.mysql服务器主从复制</span><br><span class="line">2.表分区</span><br><span class="line">3.表引擎 数据小量尽量选择myisam</span><br><span class="line">4.索引优化 用desc解析sql语句看字段</span><br><span class="line">  是否需要优化</span><br><span class="line">5.服务器优化</span><br><span class="line">  max_connections=1500 并发连接数</span><br><span class="line">  wait_timeout=120 链接关闭时间</span><br></pre></td></tr></table></figure>
<h5 id="12-如何防sql注入"><a href="#12-如何防sql注入" class="headerlink" title="12.如何防sql注入?"></a>12.如何防sql注入?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.表单尽量使用post提交</span><br><span class="line">2.使用HTTP_REFERER检查源文件</span><br><span class="line">3.开启addslashes 在特殊符号前加\</span><br><span class="line">4.使用htmlspecialchars对字符串实体</span><br><span class="line">5.提高并发连接数</span><br><span class="line">6.减小链接关闭时间</span><br><span class="line">7.用户授权登录</span><br><span class="line">8.定期给mysql打补丁</span><br></pre></td></tr></table></figure>
<h5 id="23-isset-和empty-的区别"><a href="#23-isset-和empty-的区别" class="headerlink" title="23.isset()和empty()的区别?"></a>23.isset()和empty()的区别?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isset()为假(false),只有未定义变量</span><br><span class="line">empty()为空(true):未定义,0,false,&#x27;&#x27;,&#x27;0&#x27;,array(),null</span><br></pre></td></tr></table></figure>
<h5 id="24-如何在页面之间传递变量"><a href="#24-如何在页面之间传递变量" class="headerlink" title="24.如何在页面之间传递变量?"></a>24.如何在页面之间传递变量?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get,post,ajax,curl,cookie,session</span><br></pre></td></tr></table></figure>
<h5 id="25-冒泡排序"><a href="#25-冒泡排序" class="headerlink" title="25.冒泡排序?"></a>25.冒泡排序?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function mysort($arr)&#123;</span><br><span class="line">    for($i=0;$i&lt;count($arr)-1;$i++)&#123;</span><br><span class="line">        for($j=0;$j&lt;count($arr)-$i-1;$j++)&#123;</span><br><span class="line">            if($arr[$j]&gt;$arr[$j+1])&#123;</span><br><span class="line">                $x = $arr[$j];</span><br><span class="line">                $arr[$j] = $arr[$j+1];</span><br><span class="line">                $arr[$j+1] = $x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="mysql中二次排序"><a href="#mysql中二次排序" class="headerlink" title="mysql中二次排序"></a>mysql中二次排序</h5><p>第一次排完,第二次排序在第一次排序之后,<br>不影响第一次排序的基础上进行排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查出每个班的及格人数和不及格人数</span><br><span class="line">select class_id,sum(if(score&gt;=60,1,0)) yes,sum(if(score&lt;60,1,0)) no from user group by class_id;</span><br></pre></td></tr></table></figure>
<h5 id="33-web开发中遇到的困难"><a href="#33-web开发中遇到的困难" class="headerlink" title="33.web开发中遇到的困难?"></a>33.web开发中遇到的困难?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.功能需求分析</span><br><span class="line">2.数据库设计</span><br><span class="line">3.sql语句优化</span><br><span class="line">4.前端js特效</span><br><span class="line">5.ajax技术</span><br></pre></td></tr></table></figure>
<h5 id="34-GET和POST"><a href="#34-GET和POST" class="headerlink" title="34.GET和POST"></a>34.GET和POST</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET不安全,post安全</span><br><span class="line">get最大为2k,post无限</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">位或运算  |  (只针对二进制运算)</span><br><span class="line"></span><br><span class="line">函数中返回(return)与输出(echo)的区别</span><br><span class="line"></span><br><span class="line">apache是进程管理(并发3千)(稳定)(简单)</span><br><span class="line">nginx是线程管理(并发3万)</span><br><span class="line"></span><br><span class="line">PHP端伪造服务器端状态码:</span><br><span class="line">header(&quot;HTTP/1.0 404 NOT FOUND&quot;)</span><br><span class="line"></span><br><span class="line">服务器常用端口:</span><br><span class="line">80 http</span><br><span class="line">21 ftp</span><br><span class="line">22 ssh</span><br><span class="line">53 dns</span><br><span class="line">443 https</span><br><span class="line">23 telnet</span><br></pre></td></tr></table></figure>
<p>分组聚合</p>
]]></content>
  </entry>
  <entry>
    <title>搭梯子一系列操作</title>
    <url>/projects/4025408325/</url>
    <content><![CDATA[<p>搭梯子一系列操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 香港服务器, 开通1120端口</span><br><span class="line">2. 安装lnmp(无所谓, 可跳过)</span><br><span class="line">3. xshell登录远程服务器, cd ~</span><br><span class="line">4. wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh  (网上寻找shadowsocks文件, 只要有就可以安装)</span><br><span class="line">5. chmod +x shadowsocks.sh</span><br><span class="line">6. ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br><span class="line">7. 输入密码</span><br><span class="line">8. 输入aes-256-cfb (数字7)</span><br><span class="line">9. 等待...完成后会提示</span><br><span class="line">10. 一些客户端: </span><br><span class="line">   windows: https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.7.1/Shadowsocks-4.1.7.1.zip</span><br><span class="line">   Android: https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.8.4/shadowsocks--universal-4.8.4.apk</span><br><span class="line">11. 输入账号,密码,端口,加密方式就可以啦</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>鸟哥的linux私房菜3</title>
    <url>/projects/3932032340/</url>
    <content><![CDATA[<h3 id="第十七章、认识系统服务-daemons"><a href="#第十七章、认识系统服务-daemons" class="headerlink" title="第十七章、认识系统服务 (daemons)"></a>第十七章、认识系统服务 (daemons)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. 早期的服务管理使用 systemV 的机制，透过 /etc/init.d/*, service, chkconfig, setup 等指令来管理服务的启动</span><br><span class="line">/关闭/预设启动；</span><br><span class="line"> 从 CentOS 7.x 开始，采用 systemd 的机制，此机制最大功能为平行处理，并采单一指令管理 (systemctl)，</span><br><span class="line">开机速度加快！</span><br><span class="line"> systemd 将各服务定义为 unit，而 unit 又分类为 service, socket, target, path, timer 等不同的类别，方便管理</span><br><span class="line">与维护</span><br><span class="line"> 启动/关闭/重新启动的方式为： systemctl [start|stop|restart] unit.service</span><br><span class="line"> 设定预设启动/预设不启动的方式为： systemctl [enable|disable] unit.service</span><br><span class="line"> 查询系统所有启动的服务用 systemctl list-units --type=service 而查询所有的服务 (含不启动) 使用</span><br><span class="line">systemctl list-unit-files --type=service</span><br><span class="line"> systemd 取消了以前的 runlevel 概念 (虽然还是有兼容的 target)，转而使用不同的 target 操作环境。常见</span><br><span class="line">操作环境为 multi-user.targer 与 graphical.target。 不重新启动而转不同的操作环境使用 systemctl isolate </span><br><span class="line">unit.target，而设定预设环境则使用 systemctl set-default unit.target</span><br><span class="line"> systemctl 系统默认的配置文件主要放在 /usr/lib/systemd/system，管理员若要修改或自行设计时，则建议放</span><br><span class="line">在 /etc/systemd/system/ 目录下。</span><br><span class="line"> 管理员应使用 man systemd.unit, man systemd.service, man systemd.timer 查询 /etc/systemd/system/ 底下配置</span><br><span class="line">文件的语法， 并使用 systemctl daemon-reload 加载后，才能自行撰写服务与管理服务喔！</span><br><span class="line"> 除了 atd 与 crond 之外，可以 透过 systemd.timer 亦即 timers.target 的功能，来使用 systemd 的时间管</span><br><span class="line">理功能。</span><br><span class="line"> 一些不需要的服务可以关闭喔！</span><br></pre></td></tr></table></figure>

<h3 id="第十八章、认识与分析登录档"><a href="#第十八章、认识与分析登录档" class="headerlink" title="第十八章、认识与分析登录档"></a>第十八章、认识与分析登录档</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. 登录文件可以记录一个事件的何时、何地、何人、何事等四大信息，故系统有问题时务必查询登录档；</span><br><span class="line"> 系统的登录文件默认都集中放置到 /var/log/ 目录内，其中又以 messages 记录的信息最多！</span><br><span class="line"> 登录文件记录的主要服务与程序为： systemd-journald.service, rsyslog.service, rsyslogd</span><br><span class="line"> rsyslogd 的配置文件在 /etc/rsyslog.conf ，内容语法为：『 服务名称.等级 记载装置或文件』</span><br><span class="line"> 透过 linux 的 syslog 函数查询，了解上述服务名称有 kernel, user, mail...从 0 到 23 的服务序号</span><br><span class="line"> 承上，等级从不严重到严重依序有 info, notice, warning, error, critical, alert, emergency 等</span><br><span class="line"> rsyslogd 本身有提供登录文件服务器的功能，透过修改 /etc/rsyslog.conf 内容即可达成；</span><br><span class="line"> logrotate 程序利用 crontab 来进行登录文件的轮替功能；</span><br><span class="line"> logrotate 的配置文件为 /etc/logrotate.conf ，而额外的设定则可写入 /etc/logrotate.d/* 内；</span><br><span class="line"> 新的 CentOS 7 由于内建 systemd-journald.service 的功能，可以使用 journalctl 直接从内存读出登录文件，</span><br><span class="line">查询效能较佳</span><br><span class="line"> logwatch 为 CentOS 7 预设提供的一个登录文件分析软件。</span><br></pre></td></tr></table></figure>

<h3 id="第十九章、开机流程、模块管理与-Loader"><a href="#第十九章、开机流程、模块管理与-Loader" class="headerlink" title="第十九章、开机流程、模块管理与 Loader"></a>第十九章、开机流程、模块管理与 Loader</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux 不可随意关机，否则容易造成文件系统错乱或者是其他无法开机的问题；</span><br><span class="line"> 开机流程主要是：BIOS、MBR、Loader、kernel+initramfs、systemd 等流程</span><br><span class="line"> Loader 具有提供选单、加载核心文件、转交控制权给其他 loader 等功能。</span><br><span class="line"> boot loader 可以安装在 MBR 或者是每个分区槽的 boot sector 区域中</span><br><span class="line"> initramfs 可以提供核心在开机过程中所需要的最重要的模块，通常与磁盘及文件系统有关的模块；</span><br><span class="line"> systemd 的配置文件为主要来自 /etc/systemd/system/default.target 项目；</span><br><span class="line"> 额外的装置与模块对应，可写入 /etc/modprobe.d/*.conf 中；</span><br><span class="line"> 核心模块的管理可使用 lsmod, modinfo, rmmod, insmod, modprobe 等指令；</span><br><span class="line"> modprobe 主要参考 /lib/modules/$(uanem -r)/modules.dep 的设定来加载与卸除核心模块；</span><br><span class="line"> grub2 的配置文件与相关文件系统定义档大多放置于 /boot/grub2 目录中，配置文件名为 grub.cfg</span><br><span class="line"> grub2 对磁盘的代号设定与 Linux 不同，主要透过侦测的顺序来给予设定。如 (hd0) 及 (hd0,1) 等。</span><br><span class="line"> grub.cfg 内每个选单与 menuentry 有关，而直接指定核心开机时，至少需要 linux16 及 initrd16 两个项目</span><br><span class="line"> grub.cfg 内设定 loader 控制权移交时，最重要者为 chainloader +1 这个项目。</span><br><span class="line"> 若想要重建 initramfs ，可使用 dracut 或 mkinitrd 处理</span><br><span class="line"> 重新安装 grub2 到 MBR 或 boot sector 时，可以利用 grub2-install 来处理。</span><br><span class="line"> 若想要进入救援模式，可于开机选单过程中，在 linux16 的项目后面加入『 rd.break 』或『 init=/bin/bash 』</span><br><span class="line">等方式来进入救援模式。</span><br><span class="line"> 我们可以对 grub2 的个别选单给予不同的密码。</span><br></pre></td></tr></table></figure>

<h3 id="第二十章、基础系统设定与备份策略"><a href="#第二十章、基础系统设定与备份策略" class="headerlink" title="第二十章、基础系统设定与备份策略"></a>第二十章、基础系统设定与备份策略</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因特网 (Internet) 就是 TCP/IP ，而 IP 的取得需与 ISP 要求。一般常见的取得 IP 的方法有：(1)手动直</span><br><span class="line">接设定 (2)自动取得 (dhcp) (3)拨接取得 (4)cable 宽带 等方式。</span><br><span class="line"> 主机的网络设定要成功，必须要有底下的数据：(1)IP (2)Netmask (3)gateway (4)DNS 服务器 等项目；</span><br><span class="line"> 本章新增硬件信息的收集指令有： lspci, lsusb, iostat 等；</span><br><span class="line"> 备份是系统损毁时等待救援的救星，但造成系统损毁的因素可能有硬件与软件等原因。</span><br><span class="line"> 由于主机的任务不同，备份的数据与频率等考虑参数也不相同。</span><br><span class="line"> 常见的备份考虑因素有：关键文件、储存媒体、备份方式(完整/关键)、备份频率、使用的备份工具等。</span><br><span class="line"> 常见的关键数据有：/etc, /home, /var/spool/mail, /boot, /root 等等</span><br><span class="line"> 储存媒体的选择方式，需要考虑的地方有：备份速度、媒体的容量、经费与媒体的可靠性等。</span><br><span class="line"> 与完整备份有关的备份策略主要有：累积备份与差异备份。</span><br><span class="line"> 累积备份可具有较小的储存数据量、备份速度快速等。但是在还原方面则比差异备份的还原慢。</span><br><span class="line"> 完整备份的策略中，常用的工具有 dd, cpio, tar, xfsdump 等等。</span><br></pre></td></tr></table></figure>

<h3 id="第二十一章、软件安装：原始码与-Tarball"><a href="#第二十一章、软件安装：原始码与-Tarball" class="headerlink" title="第二十一章、软件安装：原始码与 Tarball"></a>第二十一章、软件安装：原始码与 Tarball</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始码其实大多是纯文本档，需要透过编译程序的编译动作后，才能够制作出 Linux 系统能够认识的可执</span><br><span class="line">行的 binary file ；</span><br><span class="line"> 开放原始码可以加速软件的更新速度，让软件效能更快、漏洞修补更实时；</span><br><span class="line"> 在 Linux 系统当中，最标准的 C 语言编译程序为 gcc ；</span><br><span class="line"> 在编译的过程当中，可以藉由其他软件提供的函式库来使用该软件的相关机制与功能；</span><br><span class="line"> 为了简化编译过程当中的复杂的指令输入，可以藉由 make 与 makefile 规则定义，来简化程序的更新、编</span><br><span class="line">译与连结等动作；</span><br><span class="line"> Tarball 为使用 tar 与 gzip/bzip2/xz 压缩功能所打包与压缩的，具有原始码的文件；</span><br><span class="line"> 一般而言，要使用 Tarball 管理 Linux 系统上的软件，最好需要 gcc, make, autoconfig, kernel source, kernel </span><br><span class="line">header 等前驱软件才行，所以在安装 Linux 之初，最好就能够选择 Software development 以及 kernel </span><br><span class="line">development 之类的群组；</span><br><span class="line"> 函式库有动态函式库与静态函式库，动态函式库在升级上具有较佳的优势。动态函式库的扩展名为 *.so 而</span><br><span class="line">静态则是 *.a ；</span><br><span class="line"> patch 的主要功能在更新原始码，所以更新原始码之后，还需要进行重新编译的动作才行；</span><br><span class="line"> 可以利用 ldconfig 与 /etc/ld.so.conf /etc/ld.so.conf.d/*.conf 来制作动态函式库的链接与快取！</span><br><span class="line"> 透过 MD5/SHA1/SHA256 的编码可以判断下载的文件是否为原本厂商所释出的文件。</span><br></pre></td></tr></table></figure>

<h3 id="第二十二章、软件安装-RPM-SRPM-与-YUM"><a href="#第二十二章、软件安装-RPM-SRPM-与-YUM" class="headerlink" title="第二十二章、软件安装 RPM, SRPM 与 YUM"></a>第二十二章、软件安装 RPM, SRPM 与 YUM</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了避免使用者自行编译的困扰，开发商自行在特定的硬件与操作系统平台上面预先编译好软件， 并将软</span><br><span class="line">件以特殊格式封包成文件，提供终端用户直接安装到固定的操作系统上，并提供简单的查询/安装/移除等流</span><br><span class="line">程。 此称为软件管理员。常见的软件管理员有 RPM 与 DPKG 两大主流。</span><br><span class="line"> RPM 的全名是 RedHat Package Manager，原本是由 Red Hat 公司所发展的，流传甚广；</span><br><span class="line"> RPM 类型的软件中，所含有的软件是经过编译后的 binary program ，所以可以直接安装在用户端的系统上，</span><br><span class="line">不过，也由于如此，所以 RPM 对于安装者的环境要求相当严格；</span><br><span class="line"> RPM 除了将软件安装至用户的系统上之外，还会将该软件的版本、名称、文件与目录配置、系统需求等等</span><br><span class="line">均记录于数据库 (/var/lib/rpm) 当中，方便未来的查询与升级、移除；</span><br><span class="line"> RPM 可针对不同的硬件等级来加以编译，制作出来的文件可于扩展名 (i386, i586, i686, x86_64, noarch) 来</span><br><span class="line">分辨；</span><br><span class="line"> RPM 最大的问题为软件之间的相依性问题；</span><br><span class="line"> SRPM 为 Source RPM ，内含的文件为 Source code 而非为 binary file ，所以安装 SRPM 时还需要经过</span><br><span class="line">compile ，不过，SRPM 最大的优点就是可以让使用者自行修改设定参数 (makefile/configure 的参数) ，以</span><br><span class="line">符合使用者自己的 Linux 环境；</span><br><span class="line"> RPM 软件的属性相依问题，已经可以藉由 yum 或者是 APT 等方式加以克服。 CentOS 使用的就是 yum </span><br><span class="line">机制。</span><br><span class="line"> yum 服务器提供多个不同的软件库放置个别的软件，以提供客户端分别管理软件类别。</span><br></pre></td></tr></table></figure>

<h3 id="第二十三章、X-Window-设定介绍"><a href="#第二十三章、X-Window-设定介绍" class="headerlink" title="第二十三章、X Window 设定介绍"></a>第二十三章、X Window 设定介绍</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unix Like 操作系统上面的 GUI 使用的是最初由 MIT 所开发的 X window system，在 1987 释出 X11 版，</span><br><span class="line">并于 1994 更改为 X11R6 ，故此 GUI 界面也被称为 X 或 X11</span><br><span class="line"> X window system 的 X server 最初由 XFree86 计划所开发，后来则由 Xorg 基金会所持续开发；</span><br><span class="line"> X window system 主要分为 X server 与 X client ，其中 X Server 在管理硬件，而 X Client 则是应用程序。</span><br><span class="line"> 在运作上，X Client 应用程序会将所想要呈现的画面告知 X Server ，最终由 X server 来将结果透过他所</span><br><span class="line">管理的硬件绘制出来！</span><br><span class="line"> 每一支 X client 都不知道对方的存在，必须要透过特殊的 X client ，称为 Window Manager 的， 来管理</span><br><span class="line">各窗口的重迭、移动、最小化等工作。</span><br><span class="line"> 若有需要登入图形接口，有时会有 Display Manager 来管理这方面的动作</span><br><span class="line"> startx 可以侦测 X server / X client 的启动脚本，并呼叫 xinit 来分别执行；</span><br><span class="line"> X 可以启动多个，各个 X 显示的位置使用 -display 来处理，显示位置为 :0, :1...</span><br><span class="line"> Xorg 是一个 X server ，配置文件位于 /etc/X11/xorg.conf ，里面含有 Module, Files, Monitor, Device 等设</span><br><span class="line">定阶段。目前较新的设定中， 会将额外的设定放置于 /etc/X11/xorg.conf.d/*.conf</span><br></pre></td></tr></table></figure>

<h3 id="第二十四章、Linux-核心编译与管理"><a href="#第二十四章、Linux-核心编译与管理" class="headerlink" title="第二十四章、Linux 核心编译与管理"></a>第二十四章、Linux 核心编译与管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实核心就是系统上面的一个文件而已，这个文件包含了驱动主机各项硬件的侦测程序与驱动模块；</span><br><span class="line"> 上述的核心模块放置于：/lib/modules/$(uname -r)/kernel/</span><br><span class="line"> 『驱动程序开发』的工作上面来说，应该是属于硬件发展厂商的问题</span><br><span class="line"> 一般的用户，由于系统已经将核心编译的相当的适合一般使用者使用了，因此一般入门的使用者，基本上，</span><br><span class="line">不太需要编译核心</span><br><span class="line"> 编译核心的一般目的：新功能的需求、原本的核心太过臃肿、与硬件搭配的稳定性、其他需求(如嵌入式系</span><br><span class="line">统)</span><br><span class="line"> 编译核心前，最好先了解到您主机的硬件，以及主机的用途，才能选择好核心功能；</span><br><span class="line"> 编译前若想要保持核心原始码的干净，可使用 make mrproper 来清除暂存盘与配置文件；</span><br><span class="line"> 挑选核心功能与模块可用 make 配合：menuconfig, oldconfig, xconfig, gconfig 等等</span><br><span class="line"> 核心功能挑选完毕后，一般常见的编译过程为：make bzImage, make modules</span><br><span class="line"> 模块编译成功后的安装方式为： make modules_install</span><br><span class="line"> 核心的安装过程中，需要移动 bzImage 文件、建立 initramfs 文件、重建 grub.cfg 等动作；</span><br><span class="line"> 我们可以自行由硬件开发商之官网下载驱动程序来自行编译核心模块！</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>鸟哥的linux私房菜2</title>
    <url>/projects/3177898254/</url>
    <content><![CDATA[<h3 id="第九章-vim-程序编辑器"><a href="#第九章-vim-程序编辑器" class="headerlink" title="第九章 vim 程序编辑器"></a>第九章 vim 程序编辑器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. Linux 底下的配置文件多为文本文件，故使用 vim 即可进行设定编辑；</span><br><span class="line"> vim 可视为程序编辑器，可用以编辑 shell script, 配置文件等，避免打错字；</span><br><span class="line"> vi 为所有 unix like 的操作系统都会存在的编辑器，且执行速度快速；</span><br><span class="line"> vi 有三种模式，一般指令模式可变换到编辑与指令列模式，但编辑模式与指令列模式不能互换；</span><br><span class="line"> 常用的按键有 i, [Esc], :wq 等；</span><br><span class="line"> vi 的画面大略可分为两部份，(1)上半部的本文与(2)最后一行的状态+指令列模式；</span><br><span class="line"> 数字是有意义的，用来说明重复进行几次动作的意思，如 5yy 为复制 5 列之意；</span><br><span class="line"> 光标的移动中，大写的 G 经常使用，尤其是 1G, G 移动到文章的头/尾功能！</span><br><span class="line"> vi 的取代功能也很棒！ :n1,n2s/old/new/g 要特别注意学习起来；</span><br><span class="line"> 小数点『 . 』为重复进行前一次动作，也是经常使用的按键功能！</span><br><span class="line"> 进入编辑模式几乎只要记住： i, o, R 三个按钮即可！尤其是新增一列的 o 与取代的 R</span><br><span class="line"> vim 会主动的建立 swap 暂存档，所以不要随意断线！</span><br><span class="line"> 如果在文章内有对齐的区块，可以使用 [ctrl]-v 进行复制/贴上/删除的行为</span><br><span class="line"> 使用 :sp 功能可以分区窗口</span><br><span class="line"> 若使用 vim 来撰写网页，若需要 CSS 元素数据，可透过 [crtl]+x, [crtl]+o 这两个连续组合按键来取得关</span><br><span class="line">键词</span><br><span class="line"> vim 的环境设定可以写入在 ~/.vimrc 文件中；</span><br><span class="line"> 可以使用 iconv 进行文件语系编码的转换</span><br><span class="line"> 使用 dos2unix 及 unix2dos 可以变更文件每一列的行尾断行字符。</span><br></pre></td></tr></table></figure>

<h3 id="第十章-认识与学习-BASH"><a href="#第十章-认识与学习-BASH" class="headerlink" title="第十章 认识与学习 BASH"></a>第十章 认识与学习 BASH</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. 由于核心在内存中是受保护的区块，因此我们必须要透过『 Shell 』将我们输入的指令与 Kernel 沟通，好</span><br><span class="line">让 Kernel 可以控制硬件来正确无误的工作</span><br><span class="line"> 学习 shell 的原因主要有：文字接口的 shell 在各大 distribution 都一样；远程管理时文字接口速度较快；</span><br><span class="line">shell 是管理 Linux 系统非常重要的一环，因为 Linux 内很多控制都是以 shell 撰写的。</span><br><span class="line"> 系统合法的 shell 均写在 /etc/shells 文件中；</span><br><span class="line"> 用户默认登入取得的 shell 记录于 /etc/passwd 的最后一个字段；</span><br><span class="line"> bash 的功能主要有：命令编修能力；命令与文件补全功能；命令别名设定功能；工作控制、前景背景控制；</span><br><span class="line">程序化脚本；通配符</span><br><span class="line"> type 可以用来找到执行指令为何种类型，亦可用于与 which 相同的功能；</span><br><span class="line"> 变量就是以一组文字或符号等，来取代一些设定或者是一串保留的数据</span><br><span class="line"> 变量主要有环境变量与自定义变量，或称为全局变量与局部变量</span><br><span class="line"> 使用 env 与 export 可观察环境变量，其中 export 可以将自定义变量转成环境变量；</span><br><span class="line"> set 可以观察目前 bash 环境下的所有变量；</span><br><span class="line"> $? 亦为变量，是前一个指令执行完毕后的回传值。在 Linux 回传值为 0 代表执行成功；</span><br><span class="line"> locale 可用于观察语系资料；</span><br><span class="line"> 可用 read 让用户由键盘输入变量的值</span><br><span class="line"> ulimit 可用以限制用户使用系统的资源情况</span><br><span class="line"> bash 的配置文件主要分为 login shell 与 non-login shell。login shell 主要读取 /etc/profile 与 ~/.bash_profile，</span><br><span class="line">non-login shell 则仅读取 ~/.bashrc</span><br><span class="line"> 在使用 vim 时，若不小心按了 [crtl]+s 则画面会被冻结。你可以使用 [ctrl]+q 来解除冻结</span><br><span class="line"> 通配符主要有： *, ?, [] 等等</span><br><span class="line"> 数据流重导向透过 &gt;, 2&gt;, &lt; 之类的符号将输出的信息转到其他文件或装置去；</span><br><span class="line"> 连续命令的下达可透过 ; &amp;&amp; || 等符号来处理</span><br><span class="line"> 管线命令的重点是：『管线命令仅会处理 standard output，对于 standard error output 会予以忽略』 『管线</span><br><span class="line">命令必须要能够接受来自前一个指令的数据成为 standard input 继续处理才行。』</span><br><span class="line"> 本章介绍的管线命令主要有：cut, grep, sort, wc, uniq, tee, tr, col, join, paste, expand, split, xargs 等。</span><br></pre></td></tr></table></figure>

<h3 id="第十一章-正规表示法与文件格式化处理"><a href="#第十一章-正规表示法与文件格式化处理" class="headerlink" title="第十一章 正规表示法与文件格式化处理"></a>第十一章 正规表示法与文件格式化处理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 正规表示法就是处理字符串的方法，他是以行为单位来进行字符串的处理行为；</span><br><span class="line"> 正规表示法透过一些特殊符号的辅助，可以让使用者轻易的达到『搜寻/删除/取代』某特定字符串的处理程</span><br><span class="line">序；</span><br><span class="line"> 只要工具程序支持正规表示法，那么该工具程序就可以用来作为正规表示法的字符串处理之用；</span><br><span class="line"> 正规表示法与通配符是完全不一样的东西！通配符 (wildcard) 代表的是 bash 操作接口的一个功能， 但正</span><br><span class="line">规表示法则是一种字符串处理的表示方式！</span><br><span class="line"> 使用 grep 或其他工具进行正规表示法的字符串比对时，因为编码的问题会有不同的状态，因此， 你最好</span><br><span class="line">将 LANG 等变量设定为 C 或者是 en 等英文语系！</span><br><span class="line"> grep 与 egrep 在正规表示法里面是很常见的两支程序，其中， egrep 支持更严谨的正规表示法的语法；</span><br><span class="line"> 由于编码系统的不同，不同的语系 (LANG) 会造成正规表示法撷取资料的差异。因此可利用特殊符号如</span><br><span class="line">[:upper:] 来替代编码范围较佳；</span><br><span class="line"> 由于严谨度的不同，正规表示法之上还有更严谨的延伸正规表示法；</span><br><span class="line"> 基础正规表示法的特殊字符有： *, ., [], [-], [^], ^, $ 等！</span><br><span class="line"> 常见的支持正规表示法的工具软件有： grep , sed, vim 等等</span><br><span class="line"> printf 可以透过一些特殊符号来将数据进行格式化输出；</span><br><span class="line"> awk 可以使用『字段』为依据，进行数据的重新整理与输出；</span><br><span class="line"> 文件的比对中，可利用 diff 及 cmp 进行比对，其中 diff 主要用在纯文本文件方面的新旧版本比对</span><br><span class="line"> patch 指令可以将旧版数据更新到新版 (主要亦由 diff 建立 patch 的补丁来源文件)</span><br></pre></td></tr></table></figure>

<h3 id="第十二章、学习-Shell-Scripts"><a href="#第十二章、学习-Shell-Scripts" class="headerlink" title="第十二章、学习 Shell Scripts"></a>第十二章、学习 Shell Scripts</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. shell script 是利用 shell 的功能所写的一个『程序 (program)』，这个程序是使用纯文本文件，将一些 shell 的</span><br><span class="line">语法与指令(含外部指令)写在里面， 搭配正规表示法、管线命令与数据流重导向等功能，以达到我们所想</span><br><span class="line">要的处理目的</span><br><span class="line"> shell script 用在系统管理上面是很好的一项工具，但是用在处理大量数值运算上， 就不够好了，因为 Shell </span><br><span class="line">scripts 的速度较慢，且使用的 CPU 资源较多，造成主机资源的分配不良。</span><br><span class="line"> 在 Shell script 的文件中，指令的执行是从上而下、从左而右的分析与执行；</span><br><span class="line"> shell script 的执行，至少需要有 r 的权限，若需要直接指令下达，则需要拥有 r 与 x 的权限；</span><br><span class="line"> 良好的程序撰写习惯中，第一行要宣告 shell (#!/bin/bash) ，第二行以后则宣告程序用途、版本、作者等</span><br><span class="line"> 对谈式脚本可用 read 指令达成；</span><br><span class="line"> 要建立每次执行脚本都有不同结果的数据，可使用 date 指令利用日期达成；</span><br><span class="line"> script 的执行若以 source 来执行时，代表在父程序的 bash 内执行之意！</span><br><span class="line"> 若需要进行判断式，可使用 test 或中括号 ( [] ) 来处理；</span><br><span class="line"> 在 script 内，$0, $1, $2..., $@ 是有特殊意义的！</span><br><span class="line"> 条件判断式可使用 if...then 来判断，若是固定变量内容的情况下，可使用 case $var in ... esac 来处理</span><br><span class="line"> 循环主要分为不定循环 (while, until) 以及固定循环 (for) ，配合 do, done 来达成所需任务！</span><br><span class="line"> 我们可使用 sh -x script.sh 来进行程序的 debug</span><br></pre></td></tr></table></figure>

<h3 id="第十三章、Linux-账号管理与-ACL-权限设定"><a href="#第十三章、Linux-账号管理与-ACL-权限设定" class="headerlink" title="第十三章、Linux 账号管理与 ACL 权限设定"></a>第十三章、Linux 账号管理与 ACL 权限设定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. Linux 操作系统上面，关于账号与群组，其实记录的是 UID/GID 的数字而已；</span><br><span class="line"> 使用者的账号/群组与 UID/GID 的对应，参考 /etc/passwd 及 /etc/group 两个文件</span><br><span class="line"> /etc/passwd 文件结构以冒号隔开，共分为七个字段，分别是『账号名称、密码、UID、GID、全名、家目录、</span><br><span class="line">shell』</span><br><span class="line"> UID 只有 0 与非为 0 两种，非为 0 则为一般账号。一般账号又分为系统账号 (1~999) 及可登入者账号</span><br><span class="line">(大于 1000)</span><br><span class="line"> 账号的密码已经移动到 /etc/shadow 文件中，该文件权限为仅有 root 可以更动。该文件分为九个字段，内</span><br><span class="line">容为『 账号名称、加密密码、密码更动日期、密码最小可变动日期、密码最大需变动日期、密码过期前警</span><br><span class="line">告日数、密码失效天数、 账号失效日、保留未使用』</span><br><span class="line"> 使用者可以支持多个群组，其中在新建文件时会影响新文件群组者，为有效群组。而写入 /etc/passwd 的第</span><br><span class="line">四个字段者， 称为初始群组。</span><br><span class="line"> 与使用者建立、更改参数、删除有关的指令为：useradd, usermod, userdel 等，密码建立则为 passwd；</span><br><span class="line"> 与群组建立、修改、删除有关的指令为：groupadd, groupmod, groupdel 等；</span><br><span class="line"> 群组的观察与有效群组的切换分别为：groups 及 newgrp 指令；</span><br><span class="line"> useradd 指令作用参考的文件有： /etc/default/useradd, /etc/login.defs, /etc/skel/ 等等</span><br><span class="line"> 观察用户详细的密码参数，可以使用『 chage -l 账号 』来处理；</span><br><span class="line"> 用户自行修改参数的指令有： chsh, chfn 等，观察指令则有： id, finger 等</span><br><span class="line"> ACL 的功能需要文件系统有支持，CentOS 7 预设的 XFS 确实有支持 ACL 功能！</span><br><span class="line"> ACL 可进行单一个人或群组的权限管理，但 ACL 的启动需要有文件系统的支持；</span><br><span class="line"> ACL 的设定可使用 setfacl ，查阅则使用 getfacl ；</span><br><span class="line"> 身份切换可使用 su ，亦可使用 sudo ，但使用 sudo 者，必须先以 visudo 设定可使用的指令；</span><br><span class="line"> PAM 模块可进行某些程序的验证程序！与 PAM 模块有关的配置文件位于 /etc/pam.d/* 及 /etc/security/*</span><br><span class="line"> 系统上面账号登入情况的查询，可使用 w, who, last, lastlog 等；</span><br><span class="line"> 在线与使用者交谈可使用 write, wall，脱机状态下可使用 mail 传送邮件！</span><br></pre></td></tr></table></figure>

<h3 id="第十四章、磁盘配额-Quota-与进阶文件系统管理"><a href="#第十四章、磁盘配额-Quota-与进阶文件系统管理" class="headerlink" title="第十四章、磁盘配额(Quota)与进阶文件系统管理"></a>第十四章、磁盘配额(Quota)与进阶文件系统管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quota 可公平的分配系统上面的磁盘容量给用户；分配的资源可以是磁盘容量(block)或可建立文件数量</span><br><span class="line">(inode)；</span><br><span class="line"> Quota 的限制可以有 soft/hard/grace time 等重要项目；</span><br><span class="line"> Quota 是针对整个 filesystem 进行限制，XFS 文件系统可以限制目录！</span><br><span class="line"> Quota 的使用必须要核心与文件系统均支持。文件系统的参数必须含有 usrquota, grpquota, prjquota</span><br><span class="line"> Quota 的 xfs_quota 实作的指令有 report, print, limit, timer... 等指令；</span><br><span class="line"> 磁盘阵列 (RAID) 有硬件与软件之分，Linux 操作系统可支持软件磁盘阵列，透过 mdadm 套件来达成；</span><br><span class="line"> 磁盘阵列建置的考虑依据为『容量』、『效能』、『资料可靠性』等；</span><br><span class="line"> 磁盘阵列所建置的等级常见有的 raid0, raid1, raid1+0, raid5 及 raid6</span><br><span class="line"> 硬件磁盘阵列的装置文件名与 SCSI 相同，至于 software RAID 则为 /dev/md[0-9]</span><br><span class="line"> 软件磁盘阵列的状态可藉由 /proc/mdstat 文件来了解；</span><br><span class="line"> LVM 强调的是『弹性的变化文件系统的容量』；</span><br><span class="line"> 与 LVM 有关的组件有： PV/VG/PE/LV 等组件，可以被格式化者为 LV</span><br><span class="line"> 新的 LVM 拥有 LVM thin volume 的功能，能够动态调整磁盘的使用率！</span><br><span class="line"> LVM 拥有快照功能，快照可以记录 LV 的数据内容，并与原有的 LV 共享未更动的数据，备份与还原就</span><br><span class="line">变的很简单；</span><br><span class="line"> XFS 透过 xfs_growfs 指令，可以弹性的调整文件系统的大小</span><br></pre></td></tr></table></figure>

<h3 id="第十五章、例行性工作排程-crontab"><a href="#第十五章、例行性工作排程-crontab" class="headerlink" title="第十五章、例行性工作排程(crontab)"></a>第十五章、例行性工作排程(crontab)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 系统可以透过 at 这个指令来排程单一工作的任务！『at TIME』为指令下达的方法，当 at 进入排程后， 系</span><br><span class="line">统执行该排程工作时，会到下达时的目录进行任务；</span><br><span class="line"> at 的执行必须要有 atd 服务的支持，且 /etc/at.deny 为控制是否能够执行的使用者账号；</span><br><span class="line"> 透过 atq, atrm 可以查询与删除 at 的工作排程；</span><br><span class="line"> batch 与 at 相同，不过 batch 可在 CPU 工作负载小于 0.8 时才进行后续的工作排程；</span><br><span class="line"> 系统的循环例行性工作排程使用 crond 这个服务，同时利用 crontab -e 及 /etc/crontab 进行排程的安排；</span><br><span class="line"> crontab -e 设定项目分为六栏，『分、时、日、月、周、指令』为其设定依据；</span><br><span class="line"> /etc/crontab 设定分为七栏，『分、时、日、月、周、执行者、指令』为其设定依据；</span><br><span class="line"> anacron 配合 /etc/anacrontab 的设定，可以唤醒停机期间系统未进行的 crontab 任务！</span><br></pre></td></tr></table></figure>

<h3 id="第十六章、进程管理与-SELinux-初探"><a href="#第十六章、进程管理与-SELinux-初探" class="headerlink" title="第十六章、进程管理与 SELinux 初探"></a>第十六章、进程管理与 SELinux 初探</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结: </span><br><span class="line">1. 程序 (program)：通常为 binary program ，放置在储存媒体中 (如硬盘、光盘、软盘、磁带等)，为实体文</span><br><span class="line">件的型态存在；</span><br><span class="line"> 进程 (process)：程序被触发后，执行者的权限与属性、程序的程序代码与所需数据等都会被加载内存中， 操</span><br><span class="line">作系统并给予这个内存内的单元一个标识符 (PID)，可以说，进程就是一个正在运作中的程序。</span><br><span class="line"> 程序彼此之间是有相关性的，故有父进程与子进程之分。而 Linux 系统所有进程的父进程就是 init 这个</span><br><span class="line">PID 为 1 号的进程。</span><br><span class="line"> 在 Linux 的进程呼叫通常称为 fork-and-exec 的流程！进程都会藉由父进程以复制 (fork) 的方式产生一个</span><br><span class="line">一模一样的子进程， 然后被复制出来的子进程再以 exec 的方式来执行实际要进行的程序，最终就成为一</span><br><span class="line">个子进程的存在。</span><br><span class="line"> 常驻在内存当中的进程通常都是负责一些系统所提供的功能以服务用户各项任务，因此这些常驻程序就会</span><br><span class="line">被我们称为：服务 (daemon)。</span><br><span class="line"> 在工作管理 (job control) 中，可以出现提示字符让你操作的环境就称为前景 (foreground)，至于其他工作就</span><br><span class="line">可以让你放入背景 (background) 去暂停或运作。</span><br><span class="line"> 与 job control 有关的按键与关键词有： &amp;, [ctrl]-z, jobs, fg, bg, kill %n 等；</span><br><span class="line"> 进程管理的观察指令有： ps, top, pstree 等等；</span><br><span class="line"> 进程之间是可以互相控制的，传递的讯息 (signal) 主要透过 kill 这个指令在处理；</span><br><span class="line"> 进程是有优先级的，该项目为 Priority，但 PRI 是核心动态调整的，用户只能使用 nice 值去微调 PRI</span><br><span class="line"> nice 的给予可以有： nice, renice, top 等指令；</span><br><span class="line"> vmstat 为相当好用的系统资源使用情况观察指令；</span><br><span class="line"> SELinux 当初的设计是为了避免使用者资源的误用，而 SELinux 使用的是 MAC 委任式存取设定；</span><br><span class="line"> SELinux 的运作中，重点在于主体进程 (Subject) 能否存取目标文件资源 (Object) ，这中间牵涉到政策</span><br><span class="line">(Policy) 内的规则， 以及实际的安全性本文类别 (type)；</span><br><span class="line"> 安全性本文的一般设定为：『Identify:role:type』其中又以 type 最重要；</span><br><span class="line"> SELinux 的模式有： enforcing, permissive, disabled 三种，而启动的政策 (Policy) 主要是 targeted</span><br><span class="line"> SELinux 启动与关闭的配置文件在： /etc/selinux/config</span><br><span class="line"> SELinux 的启动与观察： getenforce, sestatus 等指令</span><br><span class="line"> 重设 SELinux 的安全性本文可使用 restorecon 与 chcon</span><br><span class="line"> 在 SELinux 有启动时，必备的服务至少要启动 auditd 这个！</span><br><span class="line"> 若要管理预设的 SELinux 布尔值，可使用 getsebool, setsebool 来管理！</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>x96max+ armbian frp内网穿透 linux</title>
    <url>/projects/251151276/</url>
    <content><![CDATA[<h1 id="一-x96max-armbian-frp内网穿透-linux"><a href="#一-x96max-armbian-frp内网穿透-linux" class="headerlink" title="一. x96max+ armbian frp内网穿透 linux"></a>一. x96max+ armbian frp内网穿透 linux</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">写在牵头: </span><br><span class="line">遇到问题一定要百度!~  </span><br><span class="line">遇到问题一定要百度!~  </span><br><span class="line">遇到问题一定要百度!~</span><br><span class="line">参考文档: https://www.bilibili.com/read/cv5710744</span><br></pre></td></tr></table></figure>
<h5 id="1-淘宝买的x96max-4-64-235"><a href="#1-淘宝买的x96max-4-64-235" class="headerlink" title="1. 淘宝买的x96max+ 4+64 235$"></a>1. 淘宝买的x96max+ 4+64 235$</h5><p>地址: <a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.36422e8ddo8wWr&id=607308485402&_u=t1mvsvbf4537" target="_blank">点击此处</a></p>
<h5 id="2-淘宝买的风扇-9mm-小风量版-觉得买小了"><a href="#2-淘宝买的风扇-9mm-小风量版-觉得买小了" class="headerlink" title="2. 淘宝买的风扇 9mm 小风量版 ( 觉得买小了~~~ )"></a>2. 淘宝买的风扇 9mm 小风量版 ( 觉得买小了~~~ )</h5><p>地址: <a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.36422e8ddo8wWr&id=561487163846&_u=t1mvsvbf19c5" target="_blank">点击此处</a></p>
<h5 id="一-物理工具"><a href="#一-物理工具" class="headerlink" title="一. 物理工具"></a>一. 物理工具</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U盘/TF 卡一个（最好16G以上） </span><br><span class="line">如果使用TF卡, 需读卡器   </span><br><span class="line">粗牙签一个（折掉尖的那一段）  </span><br><span class="line">笔记本或台式PC  </span><br><span class="line">HDMI线一条  </span><br><span class="line">显示器  </span><br><span class="line">usb键盘  </span><br></pre></td></tr></table></figure>
<h5 id="二-软件及固件"><a href="#二-软件及固件" class="headerlink" title="二. 软件及固件"></a>二. 软件及固件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0. SDCardFormatter TF卡清空操作, 会清空所有文件</span><br></pre></td></tr></table></figure>
<p>地址: <a href="http://xiazai.sddphp.cn/x96max+/SDCardFormatterv5_WinEN.zip" target="_blank">点击此处</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Win32DiskImager（将img固件写入USB/TF卡工具,注意保存U盘/TF卡上的文件, 会全部格式化）</span><br><span class="line">注：也可以用 USBImageTool</span><br></pre></td></tr></table></figure>
<p>地址: <a href="http://xiazai.sddphp.cn/x96max+/Win32DiskImager-0.9.5-binary.zip" target="_blank">点击此处</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. armbian 固件</span><br></pre></td></tr></table></figure>
<p>地址：<a href="https://yadi.sk/d/_rQgn_FosYuW0g" target="_blank">点击此处</a><br>备用(直达): <a href="http://xiazai.sddphp.cn/x96max+/Armbian_20.02.0-rc1.037_Aml-s9xxx_buster_current_5.5.0-rc6_20200205.img.xz" target="_blank">点击此处</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 修改后的dtb文件</span><br><span class="line">文件名：meson-sm1-sei610-ethfix.dtb  （由官方论坛 ciprian28 提供）</span><br></pre></td></tr></table></figure>
<p>地址：<a href="https://forum.armbian.com/topic/12988-armbian-for-amlogic-s905x3/page/4/?tab=comments#comment-97143" target="_blank">点击此处</a><br>备用: <a href="http://xiazai.sddphp.cn/x96max+/meson-sm1-sei610-ethfix.dtb" target="_blank">点击此处</a>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. G12 芯片专用U-boot</span><br><span class="line">文件名：u-boot.sd丨u-boot.usb</span><br></pre></td></tr></table></figure>
<p>地址：<a href="https://yadi.sk/d/_rQgn_FosYuW0g/U-BOOT/u-boot-fix-g12" target="_blank">点击此处</a><br>备用sd: <a href="http://xiazai.sddphp.cn/x96max+/u-boot.sd" target="_blank">点击此处</a><br>备用usb: <a href="http://xiazai.sddphp.cn/x96max+/u-boot.usb" target="_blank">点击此处</a></p>
<h5 id="三-步骤"><a href="#三-步骤" class="headerlink" title="三. 步骤"></a>三. 步骤</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 从官网下载适合的固件, 我下载的为（Armbian_20.02.0-rc1.037_Aml-s9xxx_buster_current_5.5.0-rc6_20200205）</span><br><span class="line">此固件为debian内核buster版本无桌面版</span><br><span class="line">2. 将TF卡或U盘插入电脑</span><br><span class="line">3. 打开 SDCardFormatter -&gt; 选择TF卡或U盘 -&gt; Overwrite format ( 第二项 ) -&gt; write </span><br><span class="line">过程半小时左右吧, 耐心等待</span><br><span class="line">3. 打开 Win32DiskImager , 选中u盘, 选择固件, 点写入</span><br><span class="line">4. U盘启动盘做好后, 会在电脑上出现一个boot的硬盘, 需要修改里面的文件.</span><br><span class="line">    i:  把之前下载的 meson-sm1-sei610-ethfix.dtb 文件复制到 dtb\amlogic\文件夹中</span><br><span class="line">    ii: 回到boot根目录, 找到uEnv.txt文件, 用记事本打开, 修改FDT=/dtb/amlogic/meson-sm1-sei610-ethfix.dtb  </span><br><span class="line">        删掉其他的芯片的配置.</span><br><span class="line">    iii:复制之前下载的u-boot.usb 文件, 覆盖到boot里的原文件, 然后将u-boot.usb </span><br><span class="line">        重命名为：u-boot.ext</span><br><span class="line">    以上两步做完后, 弹出U盘, 从电脑上拨下U盘.</span><br><span class="line">5. 拿起 X96MAX+ , 拔掉电源, 把U盘插入X96MAX+的USB口（测试下来, usb 3.0 或 usb 2.0的口都可以）.</span><br><span class="line">6. 拿出粗牙签, 把牙签捅入AV插口里面, 里面有一个Rest按键.</span><br><span class="line">   用牙签捅进入去, 听到按扭按下去的声音, 不要松手, 保持Rest按键是按下的状态, </span><br><span class="line">   然后给X96 MAX +盒子通电.看到电视屏幕出现X96的logo,就松开牙签.</span><br><span class="line">7. 然后等待运行, 出现Arm-64 login 就表示安装成功</span><br><span class="line">8. 接上USB键盘, 就可以使用了, 用户名：root 密码：1234</span><br><span class="line"></span><br><span class="line">注: 以下为已知的问题及一些坑</span><br><span class="line">    i: Armbian官方还没有正式发布支持 X96MAX+ 的DTB文件.</span><br><span class="line">    ii: meson-sm1-sei610-ethfix.dtb  </span><br><span class="line">        这个dtb文件也只是修复了X96MAX+ 的网卡, 且只能让网卡工作在100M的模式下, wifi、蓝牙、声音未正常工作.</span><br><span class="line">    iii: 如果用TF卡直接插到X96MAX+ 的TF卡槽里, Armbian不能正常启动.</span><br><span class="line">    iiii: 一定要使用armbian 官方的G12 专用U-boot, 不然启动后不能正常显示.</span><br></pre></td></tr></table></figure>
<h5 id="四-ssh连接"><a href="#四-ssh连接" class="headerlink" title="四. ssh连接"></a>四. ssh连接</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. root登录后, 输入ip addr 或 ifconfig 查看ip地址</span><br><span class="line">2. 使用xshell登录, </span><br><span class="line">    地址为: 192.168.1.133 </span><br><span class="line">    用户名: root</span><br><span class="line">    密码:   1234</span><br><span class="line">3. 更新清华大学 apt 源</span><br><span class="line">    mv /etc/apt/source.list /etc/apt/source.list_bak //备份</span><br><span class="line">    vi /etc/apt/source.list //新建</span><br><span class="line">    i //编辑</span><br><span class="line">    粘贴↓</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">    # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">    # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">    # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br><span class="line">    # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br><span class="line">    </span><br><span class="line">    esc //退出编辑</span><br><span class="line">    wq //保存退出</span><br></pre></td></tr></table></figure>
<p>apt源地址：<a href="https://blog.csdn.net/louppppp/article/details/103606690" target="_blank">点击此处</a>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. apt-get update</span><br><span class="line">    执行完后出现W: 错误是警告, 是正常的</span><br><span class="line">            出现N: 错误需要换源了~~</span><br></pre></td></tr></table></figure>
<h5 id="五-frp内网穿透"><a href="#五-frp内网穿透" class="headerlink" title="五. frp内网穿透"></a>五. frp内网穿透</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重要: 需要有一台公网ip, 搭建frp服务端, x96max上安装frp客户端  </span><br><span class="line">重要: 需要有一台公网ip, 搭建frp服务端, x96max上安装frp客户端  </span><br><span class="line">重要: 需要有一台公网ip, 搭建frp服务端, x96max上安装frp客户端 </span><br><span class="line">参考文档1: https://www.jianshu.com/p/00c79df1aaf0</span><br><span class="line">参考文档2: https://github.com/fatedier/frp/</span><br><span class="line"></span><br><span class="line">版本介绍: </span><br><span class="line">    x96max+安装的是: linux arm64</span><br><span class="line">    阿里云linux安装: linux amd64</span><br></pre></td></tr></table></figure>
<p>x96max frp 地址：<a href="https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_arm64.tar.gz" target="_blank">点击此处</a><br>x96max frp 地址备份：<a href="http://xiazai.sddphp.cn/x96max+/frp_0.33.0_linux_arm64.tar.gz" target="_blank">点击此处</a><br>阿里云 frp 地址：<a href="https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz" target="_blank">点击此处</a><br>阿里云 frp 地址备份：<a href="http://xiazai.sddphp.cn/x96max+/frp_0.33.0_linux_amd64.tar.gz" target="_blank">点击此处</a><br>官方地址: <a href="https://github.com/fatedier/frp/releases" target="_blank">点击此处</a>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 服务端: </span><br><span class="line">登录阿里云</span><br><span class="line">wget &#x27;阿里云 frp 地址&#x27;</span><br><span class="line">tar -zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.33.0_linux_amd64.tar.gz frp</span><br><span class="line">vim ./frp/frps.ini</span><br><span class="line">    [common]</span><br><span class="line">    bind_port = 7000</span><br><span class="line">    vhost_http_port = 8080</span><br><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line">2. 客户端:</span><br><span class="line">登录x96max+</span><br><span class="line">wget &#x27;x96max frp 地址&#x27;</span><br><span class="line">tar -zxvf frp_0.33.0_linux_arm64.tar.gz</span><br><span class="line">mv frp_0.33.0_linux_arm64.tar.gz frp</span><br><span class="line">vim ./frp/frpc.ini</span><br><span class="line">    [common]</span><br><span class="line">    server_addr = 127.0.0.1 # 公网ip地址</span><br><span class="line">    server_port = 7000 # 公网端口, 阿里云记得设置防火墙</span><br><span class="line">    </span><br><span class="line">    [ssh]</span><br><span class="line">    type = tcp</span><br><span class="line">    local_ip = 127.0.0.1</span><br><span class="line">    local_port = 22</span><br><span class="line">    remote_port = 6000 # 公网端口, 阿里云记得设置防火墙</span><br><span class="line">    </span><br><span class="line">    [web]</span><br><span class="line">    type = http</span><br><span class="line">    local_port = 80</span><br><span class="line">    custom_domains = xxx.*****.cn # 随便设置二级域名</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line">注!!!</span><br><span class="line">先开启服务端: ./frps -c ./frps.ini</span><br><span class="line">再开启客户端: ./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line">3. ssh通过公网ip登录x96max+</span><br><span class="line">打开xshell</span><br><span class="line">新建 主机: 公网ip 端口: 6000 用户名: root 密码: 1234</span><br><span class="line">当看到</span><br><span class="line">Welcome to Armbian buster with Linux 5.5.0-rc6-aml-s9xxx</span><br><span class="line">说明frp搭建成功</span><br><span class="line"></span><br><span class="line">4. 配置二级域名访问x96max+内网站( 4步骤主要用于去除端口, 至此已经可以访问 http://xxx.*****.cn:8080 )</span><br><span class="line">我使用的是nginx反向代理, 端口看着好烦啊</span><br><span class="line">vim /usr/local/nginx/conf/vhost/x96max.conf</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  x96max.*****.cn;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://xxx.*****.cn:8080; # 上面随便设置的域名:端口</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">esc</span><br><span class="line">wq</span><br><span class="line">service nginx reload</span><br><span class="line"></span><br><span class="line">5. 互联网访问 http://x96max.*****.cn 或 http://xxx.*****.cn:8080</span><br></pre></td></tr></table></figure>
<h5 id="六-小技巧"><a href="#六-小技巧" class="headerlink" title="六. 小技巧"></a>六. 小技巧</h5><p>查看温度: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">armbian-config </span><br><span class="line">Software</span><br><span class="line">Monitor</span><br></pre></td></tr></table></figure>

<p>客户端配置开机自启: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local  </span><br><span class="line">    lnmp restart  </span><br><span class="line">    nohup /root/frp/frp/frpc -c /root/frp/frp/frpc.ini &gt; /var/log/frp.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>服务端配置开机自启:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line">    nohup /root/frp/frp/frps -c /root/frp/frp/frps.ini &gt; /var/log/frps.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Redis安装</title>
    <url>/projects/3388403801/</url>
    <content><![CDATA[<h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://redis.io/download">https://redis.io/download</a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载-安装"><a href="#下载-安装" class="headerlink" title="下载 安装"></a>下载 安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建议安装在/usr/local/目录下</span><br><span class="line">$ wget https://download.redis.io/releases/redis-6.0.9.tar.gz</span><br><span class="line">$ tar xzf redis-6.0.9.tar.gz</span><br><span class="line">$ mv redis-6.0.9 /usr/local/redis</span><br><span class="line">$ cd redis-6.0.9</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>

<h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/redis/redis.conf</span><br><span class="line">	daemonize yes</span><br><span class="line">mkdir /etc/redis</span><br><span class="line">cp /usr/local/redis/redis.conf /etc/redis/6379.conf</span><br><span class="line">find / -name redis_init_script</span><br><span class="line">cp /usr/local/redis/utils/redis_init_script /etc/init.d/redis</span><br><span class="line">vi /etc/init.d/redis</span><br><span class="line"> 	REDISPORT=6379</span><br><span class="line">    EXEC=/usr/local/redis/bin/redis-server</span><br><span class="line">    CLIEXEC=/usr/local/redis/bin/redis-cli</span><br><span class="line"></span><br><span class="line">    PIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pid</span><br><span class="line">    CONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot;</span><br><span class="line">service redis start/stop</span><br><span class="line">chkconfig redis on (开机启动)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Redis常用命令</title>
    <url>/projects/3980074042/</url>
    <content><![CDATA[<h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><h2 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h2><p>ping</p>
<p>flushdb</p>
<p>flushall</p>
<p>keys *</p>
<p>set name zhangsan</p>
<p>get name</p>
<p>exists name</p>
<p>expire name 10</p>
<p>ttl name</p>
<p>move name 1 # 不常用</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>set key1 v1</p>
<p>append key1 “hello”</p>
<p>strlen key1</p>
<p>incr views</p>
<p>decr views</p>
<p>incrby views 10</p>
<p>decrby views 10</p>
<p>getrange key1 0 -1</p>
<p>setrange key1 1 xx</p>
<p>setex key seconds value</p>
<p>setnx key value</p>
<p>mset k1 v1 k2 v2 k3 v3</p>
<p>mget k1 k2 k3</p>
<p>msetnx k1 v1 k4 v4</p>
<p>getset k v</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>所有list命令都是<code>l</code>开头的</p>
<p>Lpush list v1 v2 v3</p>
<p>Lrange list 0 1</p>
<p>Rpush list v6 v5 v4</p>
<p>Lpop list</p>
<p>Rpop list</p>
<p>Lindex list 0</p>
<p>Llen list</p>
<p>Lrem list 1 v1</p>
<p>Ltrim list 1 3</p>
<p>Rpoplpush list otherlist</p>
<p>Lset list 0 item # 列表/下标 不存在, 会报错</p>
<p>Linsert list before/after “v2” vvvv</p>
<p>消息队列(Lpush Rpop), 栈(Lpush Lpop)</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Sadd myset “hello”</p>
<p>Sadd myset “world”</p>
<p>Smembers myset</p>
<p>Sismember myset hello</p>
<p>Scard myset</p>
<p>Srem myset hello</p>
<p>无序不随机</p>
<p>Srandmember myset 1 随机返回一个值</p>
<p>Spop myset # 随机删除key</p>
<p>Smove myset myset2 world</p>
<p>Sdiff key1 key2 # 差集</p>
<p>Sinter key1 key2 # 交集</p>
<p>Sunion key1 key2 # 并集</p>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>Map集合 key-map</p>
<p>hset myhash k1 v1</p>
<p>hget myhash k1</p>
<p>hmset myhash k1 v1 k2 v2</p>
<p>hmget myhash k1 k2</p>
<p>hgetall myhash</p>
<p>hdel myhash k1</p>
<p>hlen myhash # 获取字段数量</p>
<p>hexists myhash k1</p>
<p>hkeys myhash</p>
<p>hvals myhash</p>
<p>hincrby myhash k1 1</p>
<h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><p>zadd myset 1 one</p>
<p>zrange myset 0 -1</p>
<p>zrangebyscore salary -inf +inf # 小到大</p>
<p>zrevrange salary 0 -1 # 大到小</p>
<p>zrange</p>
<p>zrem salary one</p>
<p>zcard salary</p>
]]></content>
  </entry>
  <entry>
    <title>redis的三种集群方式</title>
    <url>/projects/356168630/</url>
    <content><![CDATA[<h1 id="redis的三种集群方式"><a href="#redis的三种集群方式" class="headerlink" title="redis的三种集群方式"></a>redis的三种集群方式</h1><p>redis有三种集群方式：主从复制，哨兵模式和集群。</p>
<p>from: </p>
<h2 id="主从复制master-slave"><a href="#主从复制master-slave" class="headerlink" title="主从复制master-slave"></a>主从复制master-slave</h2><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理:"></a>主从复制原理:</h3><ul>
<li>从服务器连接主服务器，发送SYNC命令； </li>
<li>主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令； </li>
<li>主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </li>
<li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </li>
<li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </li>
<li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；（<strong>从服务器初始化完成</strong>）</li>
<li>主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令（<strong>从服务器初始化完成后的操作</strong>）</li>
</ul>
<h3 id="主从复制优缺点"><a href="#主从复制优缺点" class="headerlink" title="主从复制优缺点:"></a>主从复制优缺点:</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><ul>
<li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离</li>
<li>为了分载Master的读操作压力，Slave服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成</li>
<li>Slave同样可以接受其它Slaves的连接和同步请求，这样可以有效的分载Master的同步压力。</li>
<li>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。</li>
<li>Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li><p>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</p>
</li>
<li><p>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</p>
</li>
<li><p>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</p>
</li>
</ul>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>可以设置多个salve, 注意: slave不能set</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">mkdir m-s-model</span><br><span class="line">cd m-s-model</span><br><span class="line">cp ../etc/redis.conf ./master.conf</span><br><span class="line">cp ../etc/redis.conf ./slave.conf</span><br><span class="line">vim master.conf</span><br><span class="line">	port 6380</span><br><span class="line">vim slave.conf</span><br><span class="line">	port 6381</span><br><span class="line">	slaveof 127.0.0.1 6380</span><br><span class="line">redis-server ./master.conf</span><br><span class="line">redis-server ./slave.conf</span><br><span class="line">redis-cli -p 6380</span><br><span class="line">	info</span><br></pre></td></tr></table></figure>

<h2 id="哨兵模式sentinel"><a href="#哨兵模式sentinel" class="headerlink" title="哨兵模式sentinel"></a>哨兵模式sentinel</h2><p>当主服务器中断服务后，可以将一个从服务器升级为主服务器，以便继续提供服务，但是这个过程需要人工手动来操作。 为此，Redis 2.8中提供了哨兵工具来实现自动化的系统监控和故障恢复功能。</p>
<p>哨兵的作用就是监控Redis系统的运行状况。它的功能包括以下两个。</p>
<p>  （1）监控主服务器和从服务器是否正常运行。<br>  （2）主服务器出现故障时自动将从服务器转换为主服务器。</p>
<h3 id="哨兵的工作方式："><a href="#哨兵的工作方式：" class="headerlink" title="哨兵的工作方式："></a>哨兵的工作方式：</h3><ul>
<li>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的Master主服务器，Slave从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</li>
<li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）</li>
<li>如果一个Master主服务器被标记为主观下线（SDOWN），则正在监视这个Master主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认Master主服务器的确进入了主观下线状态</li>
<li>当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认Master主服务器进入了主观下线状态（SDOWN）， 则Master主服务器会被标记为客观下线（ODOWN）</li>
<li>在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有Master主服务器、Slave从服务器发送 INFO 命令。</li>
<li>当Master主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master主服务器的所有 Slave从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</li>
<li>若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master主服务器的客观下线状态就会被移除。若 Master主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</li>
</ul>
<h3 id="哨兵模式的优缺点"><a href="#哨兵模式的优缺点" class="headerlink" title="哨兵模式的优缺点"></a>哨兵模式的优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li>
<li>主从可以自动切换，系统更健壮，可用性更高。</li>
</ul>
<h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li>
</ul>
<h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">mkdir sentinel-model</span><br><span class="line">cd sentinel-model</span><br><span class="line">cp ../etc/redis.conf ./redis01.conf</span><br><span class="line">cp ../etc/redis.conf ./redis02.conf</span><br><span class="line">cp ../etc/redis.conf ./redis03.conf</span><br><span class="line">cp ../etc/redis.conf ./redis04.conf</span><br><span class="line">cp ../etc/redis.conf ./sen01.conf</span><br><span class="line">cp ../etc/redis.conf ./sen02.conf</span><br><span class="line"></span><br><span class="line">vim redis01.conf</span><br><span class="line">	port 6382 </span><br><span class="line">vim redis02.conf</span><br><span class="line">	port 6383</span><br><span class="line">	slaveof 127.0.0.1 6382</span><br><span class="line">vim redis03.conf</span><br><span class="line">	port 6384</span><br><span class="line">	slaveof 127.0.0.1 6382</span><br><span class="line">vim redis04.conf</span><br><span class="line">	port 6385</span><br><span class="line">	slaveof 127.0.0.1 6382</span><br><span class="line">vim sent01.conf</span><br><span class="line">	daemonize yes</span><br><span class="line">	port 26379</span><br><span class="line">	sentinel  monitor mymaster 127.0.0.1 6382 1 #后面的数字 1 表示选举主节点的时候，投票数。1表示有一个sentinel同意即可升级为master</span><br><span class="line">vim sent02.conf</span><br><span class="line">	daemonize yes</span><br><span class="line">	port 26380</span><br><span class="line">	sentinel monitor mymaster 127.0.0.1 6382 1</span><br><span class="line">../src/redis-server ./redis01.conf</span><br><span class="line">../src/redis-server ./redis02.conf</span><br><span class="line">../src/redis-server ./redis03.conf</span><br><span class="line">../src/redis-server ./redis04.conf</span><br><span class="line">../src/redis-sentinel ./sen01.conf</span><br><span class="line">../src/redis-sentinel ./sen02.conf</span><br><span class="line">info</span><br><span class="line">kill 掉主进程</span><br><span class="line">info (查看master是否切换)</span><br></pre></td></tr></table></figure>



<h2 id="Redis-Cluster集群"><a href="#Redis-Cluster集群" class="headerlink" title="Redis-Cluster集群"></a>Redis-Cluster集群</h2><p>redis的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台redis服务器都存储相同的数据，很浪费内存，所以在redis3.0上加入了cluster模式，实现的redis的分布式存储，也就是说每台redis节点上存储不同的内容。</p>
<p> Redis-Cluster采用无中心结构,它的特点如下：</p>
<ul>
<li>所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽。</li>
<li>节点的fail是通过集群中超过半数的节点检测失效时才生效。</li>
<li>客户端与redis节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。</li>
</ul>
<h3 id="工作方式："><a href="#工作方式：" class="headerlink" title="工作方式："></a>工作方式：</h3><p>在redis的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是cluster，可以理解为是一个集群管理的插件。当我们的存取的key到达的时候，redis会根据crc16的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p>
<p>为了保证高可用，redis-cluster集群引入了主从模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点A1都宕机了，那么该集群就无法再提供服务了。</p>
<h3 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h3><p>参考: <a href="https://redis.io/topics/cluster-tutorial">https://redis.io/topics/cluster-tutorial</a></p>
<h4 id="小呆毛"><a href="#小呆毛" class="headerlink" title="小呆毛"></a>小呆毛</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">mkdir redis-cluster</span><br><span class="line">cd redis-cluster/</span><br><span class="line">mkdir redis01</span><br><span class="line">mkdir redis02</span><br><span class="line">mkdir redis03</span><br><span class="line">mkdir redis04</span><br><span class="line">mkdir redis05</span><br><span class="line">mkdir redis06</span><br><span class="line">cp /etc/redis/6379.conf redis01/master.conf</span><br><span class="line">cp /etc/redis/6379.conf redis03/master.conf</span><br><span class="line">cp /etc/redis/6379.conf redis05/master.conf</span><br><span class="line">cp /etc/redis/6379.conf redis02/slave.conf</span><br><span class="line">cp /etc/redis/6379.conf redis04/slave.conf</span><br><span class="line">cp /etc/redis/6379.conf redis06/slave.conf</span><br><span class="line">vim redis01/master.conf</span><br><span class="line">	port 6386</span><br><span class="line">	cluster-enabled yes</span><br><span class="line">	cluster-config-file nodes.conf</span><br><span class="line">	cluster-node-timeout 15000</span><br><span class="line">(其他5个目录参照上面修改, port要不同哦)</span><br><span class="line">vim start.sh</span><br><span class="line">	#!/bin/sh</span><br><span class="line">    cd redis01</span><br><span class="line">    ../../bin/redis-server ./master.conf</span><br><span class="line">    cd ../redis03</span><br><span class="line">    ../../bin/redis-server ./master.conf</span><br><span class="line">    cd ../redis05</span><br><span class="line">    ../../bin/redis-server ./master.conf</span><br><span class="line">    cd ../redis02</span><br><span class="line">    ../../bin/redis-server ./slave.conf</span><br><span class="line">    cd ../redis04</span><br><span class="line">    ../../bin/redis-server ./slave.conf</span><br><span class="line">    cd ../redis06</span><br><span class="line">    ../../bin/redis-server ./slave.conf</span><br><span class="line">    cd ../</span><br><span class="line">ps -ef|grep redis (查看是否正常启动)</span><br><span class="line">../bin/redis-cli --cluster create 127.0.0.1:6386 127.0.0.1:6388 127.0.0.1:6390 127.0.0.1:6387 127.0.0.1:6389 127.0.0.1:6391 --cluster-replicas 1</span><br><span class="line">../bin/redis-cli -p  6386 -c</span><br><span class="line">	-&gt;CLUSTER nodes</span><br><span class="line">    (set get 不同会自动切换不同master节点)</span><br></pre></td></tr></table></figure>

<h4 id="一些骚操作"><a href="#一些骚操作" class="headerlink" title="一些骚操作"></a>一些骚操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加/删除节点</span><br><span class="line">cp -r redis06/ redis07/</span><br><span class="line">vim redis07/slave.conf</span><br><span class="line">	(改port 6392)</span><br><span class="line">三种方式添加节点</span><br><span class="line">../bin/redis-cli --cluster add-node 127.0.0.1:6392 127.0.0.1 6386 // 添加的为主节点, 但是没有分配插槽(slots),需要手动分配</span><br><span class="line">../bin/redis-cli --cluster add-node 127.0.0.1:6392 127.0.0.1 6388 --cluster-slave</span><br><span class="line">../bin/redis-cli --cluster add-node 127.0.0.1:6392 127.0.0.1 6388 --cluster-slave --cluster-master-id 70fd5e1b24aa154e54ef8165ebdc27e879dbafa1</span><br><span class="line">删除节点(删除slave节点或无数据的master节点)</span><br><span class="line">../bin/redis-cli --cluster del-node 127.0.0.1:6386 &#x27;d5290030565a902cc986add97761fe548cbe850d&#x27;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Vmware Workstation 16 + Centos 7.9</title>
    <url>/projects/3123024552/</url>
    <content><![CDATA[<h1 id="Vmware-Workstation-16-Centos-7-9"><a href="#Vmware-Workstation-16-Centos-7-9" class="headerlink" title="Vmware Workstation 16 + Centos 7.9"></a>Vmware Workstation 16 + Centos 7.9</h1><h2 id="一、Vmware-16-安装"><a href="#一、Vmware-16-安装" class="headerlink" title="一、Vmware 16 安装"></a>一、Vmware 16 安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>地址: <a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p>
<h3 id="下一步安装"><a href="#下一步安装" class="headerlink" title="下一步安装"></a>下一步安装</h3><h3 id="百度激活"><a href="#百度激活" class="headerlink" title="百度激活"></a>百度激活</h3><h2 id="二、Centos-7-9-安装"><a href="#二、Centos-7-9-安装" class="headerlink" title="二、Centos 7.9 安装"></a>二、Centos 7.9 安装</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>官网: <a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">http://isoredirect.centos.org/centos/7/isos/x86_64/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="创建新的虚拟机"><a href="#创建新的虚拟机" class="headerlink" title="创建新的虚拟机"></a>创建新的虚拟机</h4><p>自定义<br>稍后安装操作系统<br>Linux Centos7 64 位<br>1处理器 4内核<br>2G虚拟内存<br>桥接<br>磁盘容量 20G 拆分为多个文件<br>自定义硬件 CD/DVD 选择下载的Centos7.9.iso<br>完成 开启虚拟机</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>English<br>时区: shanghai<br>分区: /boot 200M swap 2G / (不填默认全部给根目录)<br>安装<br>Reboot</p>
<h4 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h4><p>挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/iso</span><br><span class="line">连接 CD/DVD 勾选已连接</span><br><span class="line">mount /dev/sr0 /mnt/iso</span><br><span class="line">(安装完, 卸载 umount /mnt/iso)</span><br></pre></td></tr></table></figure>
<p>安装阿里云源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mkdir bak</span><br><span class="line">mv *.repo bak/</span><br><span class="line">cp bak/CentOS-Medis.repo .</span><br><span class="line">vi CentOS-Medis.repo</span><br><span class="line">    baseurl=file:///mnt/iso/</span><br><span class="line">    gpgcheck=0</span><br><span class="line">    enabled=1</span><br><span class="line">    gpgkey=file:///mnt/iso/RPM-GPG-KEY-CentOS-7</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum -y install net-tools.x86_64</span><br><span class="line">yum -y install wget</span><br><span class="line">yum -y install vim</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">umount /mnt/iso</span><br><span class="line">rm -rf CentOS-Medis.repo</span><br><span class="line">连接 CD/DVD 取消勾选已连接</span><br></pre></td></tr></table></figure>
<h4 id="网卡问题"><a href="#网卡问题" class="headerlink" title="网卡问题"></a>网卡问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">	TYPE=Ethernet</span><br><span class="line">    BOOTPROTO=dhcp</span><br><span class="line">    DEFROUTE=yes</span><br><span class="line">    PEERDNS=yes</span><br><span class="line">    PEERROUTES=yes</span><br><span class="line">    IPV4_FAILURE_FATAL=no</span><br><span class="line">    IPV6INIT=yes</span><br><span class="line">    IPV6_AUTOCONF=yes</span><br><span class="line">    IPV6_DEFROUTE=yes</span><br><span class="line">    IPV6_REERDNS=yes</span><br><span class="line">    IPV6_PEERROUTES=yes</span><br><span class="line">    IPV6_FAILURE_FATAL=no</span><br><span class="line">    IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">    UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03</span><br><span class="line">    NAME=ens33</span><br><span class="line">    ONBOOT=yes</span><br><span class="line">    DEVICE=ens33</span><br></pre></td></tr></table></figure>
<p>还没解决? 参考: <a href="https://blog.csdn.net/lilesb/article/details/103981334">https://blog.csdn.net/lilesb/article/details/103981334</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifup ens33</span><br><span class="line">chkconfig NetworkManager off</span><br><span class="line">chkconfig network on</span><br><span class="line">service NetworkManager stop</span><br><span class="line">service network start</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>screen命令</title>
    <url>/projects/2070615891/</url>
    <content><![CDATA[<h1 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>yum install screen</p>
<p>screen -v</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class="line">screen -ls         -&gt; 列出当前所有的session</span><br><span class="line">screen -r yourname -&gt; 回到yourname这个session</span><br><span class="line">screen -d yourname -&gt; 远程detach某个session</span><br><span class="line">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure>

<h2 id="ctrl-a"><a href="#ctrl-a" class="headerlink" title="ctrl a"></a>ctrl a</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C-a ? -&gt; 显示所有键绑定信息</span><br><span class="line">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class="line">C-a n -&gt; Next，切换到下一个 window </span><br><span class="line">C-a p -&gt; Previous，切换到前一个 window </span><br><span class="line">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class="line">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class="line">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class="line">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class="line">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class="line">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class="line">C-a w -&gt; 显示所有窗口列表</span><br><span class="line">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class="line">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class="line">C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样</span><br><span class="line">    C-b Backward，PageUp </span><br><span class="line">    C-f Forward，PageDown </span><br><span class="line">    H(大写) High，将光标移至左上角 </span><br><span class="line">    L Low，将光标移至左下角 </span><br><span class="line">    0 移到行首 </span><br><span class="line">    $ 行末 </span><br><span class="line">    w forward one word，以字为单位往前移 </span><br><span class="line">    b backward one word，以字为单位往后移 </span><br><span class="line">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class="line">    Esc 结束 copy mode </span><br><span class="line">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>下载音乐流文件教程</title>
    <url>/projects/2121618436/</url>
    <content><![CDATA[<h1 id="下载音乐流文件教程"><a href="#下载音乐流文件教程" class="headerlink" title="下载音乐流文件教程"></a>下载音乐流文件教程</h1><p><code>.ts</code>文件流</p>
<h2 id="下载IDM下载器"><a href="#下载IDM下载器" class="headerlink" title="下载IDM下载器"></a>下载<code>IDM</code>下载器</h2><p>把你的浏览器添加到<code>IDM</code>监测内</p>
<h2 id="打开音乐网站"><a href="#打开音乐网站" class="headerlink" title="打开音乐网站"></a>打开音乐网站</h2><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>进度条旁边有下载按钮, 下载下来是<code>.ts</code>文件</p>
<blockquote>
<p>结束, 如果需要转成<code>MP3</code> , 需要转换格式</p>
</blockquote>
<h2 id="免费转换格式网站"><a href="#免费转换格式网站" class="headerlink" title="免费转换格式网站"></a>免费转换格式网站</h2><p><code>https://cdkm.com/cn/</code></p>
]]></content>
  </entry>
  <entry>
    <title>phpstorm常用命令</title>
    <url>/projects/391340896/</url>
    <content><![CDATA[<h1 id="phpstorm常用命令"><a href="#phpstorm常用命令" class="headerlink" title="phpstorm常用命令"></a>phpstorm常用命令</h1><p>Ctrl + K 显示git commit界面</p>
<p>Ctrl + Shift + K 显示推送界面</p>
<p>Ctrl + Alt + L 格式化代码</p>
<p>Ctrl + F 搜索</p>
<p>Ctrl + G 定位行, 跳转行</p>
<p>Ctrl + D 复制一行</p>
<p>Ctrl + Shift + Alt + X 上传至云</p>
]]></content>
  </entry>
  <entry>
    <title>docker mysql-server 8.0 主从</title>
    <url>/projects/33063304546/</url>
    <content><![CDATA[<p>mysql/mysql-server 8.0 主从 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd docker</span><br><span class="line">mkdir -p mysql1/config/ mysql2/config/ mysql3/config/</span><br><span class="line">cp my.cnf mysql1/config/ </span><br><span class="line">cp my.cnf mysql2/config/ </span><br><span class="line">cp my.cnf mysql3/config/</span><br><span class="line">chmod -R 755 mysql*</span><br><span class="line">docker run --name=mysql1 -v /root/docker/mysql1/config/my.cnf:/etc/my.cnf -v /root/docker/mysql1/data:/var/lib/mysql -d -p 19013:3306 mysql/mysql-server</span><br><span class="line">docker run --name=mysql2 -v /root/docker/mysql2/config/my.cnf:/etc/my.cnf -v /root/docker/mysql2/data:/var/lib/mysql -d -p 19014:3306 mysql/mysql-server</span><br><span class="line">docker run --name=mysql3 -v /root/docker/mysql3/config/my.cnf:/etc/my.cnf -v /root/docker/mysql3/data:/var/lib/mysql -d -p 19015:3306 mysql/mysql-server</span><br><span class="line">docker stop mysql1 mysql2 mysql3</span><br><span class="line">docker start mysql1 mysql2 mysql3</span><br><span class="line"><span class="meta">#</span><span class="bash"> status 为 healthy 说明启动成功</span></span><br><span class="line">docker logs mysql1 2&gt;&amp;1 | grep GENERATED</span><br><span class="line">docker logs mysql2 2&gt;&amp;1 | grep GENERATED</span><br><span class="line">docker logs mysql3 2&gt;&amp;1 | grep GENERATED</span><br><span class="line">docker exec -it mysql1 mysql -uroot -p</span><br><span class="line">docker exec -it mysql2 mysql -uroot -p</span><br><span class="line">docker exec -it mysql3 mysql -uroot -p</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">输入密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user =&#x27;root&#x27;;</span><br><span class="line">select host,user,plugin from user;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="meta">#</span><span class="bash"> master修改 --------------------------------------</span></span><br><span class="line">vim mysql1/config/my.cnf</span><br><span class="line">	[mysqld]</span><br><span class="line">	log-bin=/var/lib/mysql/binlog</span><br><span class="line">	server-id=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql1</span></span><br><span class="line">show master status;</span><br><span class="line"> binlog.000003 |      156</span><br><span class="line">CREATE USER &#x27;repl&#x27;@&#x27;172.24.20.1&#x27; IDENTIFIED WITH &#x27;mysql_native_password&#x27; BY &#x27;slavepass&#x27;;#创建用户</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#x27;repl&#x27;@&#x27;172.24.20.1&#x27;;#分配权限</span><br><span class="line">flush privileges;   #刷新权限</span><br><span class="line"><span class="meta">#</span><span class="bash">slave修改 -----------------------------------------</span></span><br><span class="line">vim mysql2/config/my.cnf</span><br><span class="line">	[mysqld]</span><br><span class="line">	server-id=2 #设置server-id，必须唯一</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入slave</span></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;sddphp.cn&#x27;,</span><br><span class="line">　　MASTER_PORT=19013,</span><br><span class="line">　　MASTER_USER=&#x27;repl&#x27;,</span><br><span class="line">　　MASTER_PASSWORD=&#x27;slavepass&#x27;,</span><br><span class="line">　　MASTER_LOG_FILE=&#x27;binlog.000003&#x27;,</span><br><span class="line">　　MASTER_LOG_POS=5402; #后面两个参数的值与主库保持一致</span><br><span class="line">start slave;</span><br><span class="line">stop slave;</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>

<p>laravel连不上mysql8.0?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>1天掌握docker -- B站阿良</title>
    <url>/projects/234786234/</url>
    <content><![CDATA[<h1 id="1天掌握docker-–-B站阿良"><a href="#1天掌握docker-–-B站阿良" class="headerlink" title="1天掌握docker – B站阿良"></a>1天掌握docker – B站阿良</h1><h2 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h2><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>使用最广泛的开源容器引擎</p>
<p>一种操作系统级别的虚拟化技术</p>
<p>依赖于<code>Linux</code>内核特性: <code>Namespace</code>和<code>Cgroups</code>(资源隔离和资源限制)</p>
<p>一个简单的应用程序打包工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg: docker run -it centos:7.9.2009 /bin/bash</span><br><span class="line">ls</span><br><span class="line">ps -ef</span><br><span class="line">[root@37c2eb3b4162 /]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.9.2009 (AltArch)</span><br></pre></td></tr></table></figure>

<h3 id="docker设计目标"><a href="#docker设计目标" class="headerlink" title="docker设计目标"></a>docker设计目标</h3><p>提供简单的应用程序打包工具</p>
<p>开发人员和运维人员职责逻辑分离</p>
<p>多环境保持一致性</p>
<h3 id="docker基本组成"><a href="#docker基本组成" class="headerlink" title="docker基本组成"></a>docker基本组成</h3><p><code>Docker Client</code> 客户端</p>
<p><code>Docker Daemon</code> 守护进程</p>
<p><code>Docker Images</code> 镜像</p>
<p><code>Docker Container</code> 容器</p>
<p><code>Docker Registry</code> 镜像仓库</p>
<p><a href="https://www.bookstack.cn/read/itmuch-docker/docker-%E7%AC%AC1%E7%AB%A0-Docker%E5%85%A5%E9%97%A8-01-Docker%E7%AE%80%E4%BB%8B.md#1.5%20Docker%E6%9E%B6%E6%9E%84">https://www.bookstack.cn/read/itmuch-docker/docker-%E7%AC%AC1%E7%AB%A0-Docker%E5%85%A5%E9%97%A8-01-Docker%E7%AE%80%E4%BB%8B.md#1.5%20Docker架构</a></p>
<h3 id="容器对比虚拟机"><a href="#容器对比虚拟机" class="headerlink" title="容器对比虚拟机"></a>容器对比虚拟机</h3><p><a href="https://www.bookstack.cn/read/itmuch-docker/docker-%E7%AC%AC1%E7%AB%A0-Docker%E5%85%A5%E9%97%A8-01-Docker%E7%AE%80%E4%BB%8B.md#1.6%20Docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA">https://www.bookstack.cn/read/itmuch-docker/docker-%E7%AC%AC1%E7%AB%A0-Docker%E5%85%A5%E9%97%A8-01-Docker%E7%AE%80%E4%BB%8B.md#1.6%20Docker与虚拟机</a></p>
<h3 id="docker应用场景"><a href="#docker应用场景" class="headerlink" title="docker应用场景"></a>docker应用场景</h3><p>应用程序打包和发布</p>
<p>应用程序隔离</p>
<p>持续集成</p>
<p>部署微服务</p>
<p>快速搭建测试环境</p>
<p>提供<code>PaaS</code>产品, 平台即服务</p>
<h2 id="Linux安装Docker"><a href="#Linux安装Docker" class="headerlink" title="Linux安装Docker"></a>Linux安装Docker</h2><h3 id="Docker版本"><a href="#Docker版本" class="headerlink" title="Docker版本"></a>Docker版本</h3><p>社区版 <code>CE</code> 企业版 <code>EE</code></p>
<h3 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h3><p>Linux Mac Windows</p>
<h3 id="CentOS7-x安装Docker"><a href="#CentOS7-x安装Docker" class="headerlink" title="CentOS7.x安装Docker"></a>CentOS7.x安装Docker</h3><p><a href="https://www.bookstack.cn/read/itmuch-docker/docker-%E7%AC%AC1%E7%AB%A0-Docker%E5%85%A5%E9%97%A8-02-Docker%E5%AE%89%E8%A3%85.md">https://www.bookstack.cn/read/itmuch-docker/docker-%E7%AC%AC1%E7%AB%A0-Docker%E5%85%A5%E9%97%A8-02-Docker%E5%AE%89%E8%A3%85.md</a></p>
<h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>一个分层存储的文件</p>
<p>一个软件的环境</p>
<p>一个镜像可以创建<code>N</code>个容器</p>
<p>一种标准化的交付</p>
<p>一个不包含<code>Linux</code>内核而又精简的<code>Linux</code>系统</p>
<p><code>docker history images 查看分层</code></p>
<h3 id="镜像与容器的关系"><a href="#镜像与容器的关系" class="headerlink" title="镜像与容器的关系"></a>镜像与容器的关系</h3><p>容器就是在镜像最上层创建一个读写层, 并不会修改镜像源文件</p>
<h3 id="管理镜像常用命令"><a href="#管理镜像常用命令" class="headerlink" title="管理镜像常用命令"></a>管理镜像常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --help</span><br><span class="line">docker image ls 查看镜像仓库</span><br><span class="line">docker image inspect nginx 查看镜像详细信息</span><br><span class="line">docker pull nginx:latest 下载镜像</span><br><span class="line">docker image rm nginx 删除镜像</span><br><span class="line">docker image save nginx &gt; nginx.tar 导出</span><br><span class="line">docker image load &lt; nginx.tar 导入</span><br></pre></td></tr></table></figure>

<h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="创建容器常用选项"><a href="#创建容器常用选项" class="headerlink" title="创建容器常用选项"></a>创建容器常用选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-i 交互式</span><br><span class="line">-t 分配一个终端</span><br><span class="line">-d 运行容器到后台</span><br><span class="line">-e 创建环境变量</span><br><span class="line">-p 发布容器端口映射</span><br><span class="line">-P 随机export端口</span><br><span class="line">--name 名称</span><br><span class="line">-h 主机名</span><br><span class="line">-ip 指定ip</span><br><span class="line">-network 链接到一个网络</span><br><span class="line">-mount 将文件系统附加到容器</span><br><span class="line">-v 绑定挂载卷</span><br><span class="line">-restart 容器退出重启策略 默认no 可选[always|no-failure]</span><br></pre></td></tr></table></figure>

<h3 id="容器资源限制"><a href="#容器资源限制" class="headerlink" title="容器资源限制"></a>容器资源限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-m，-memory 容器可以使用的最大内存量</span><br><span class="line">-memory-swap 允许交换到磁盘的内存量</span><br><span class="line">-memory-swappiness=&lt;0-100&gt; 容器使用SWAP分区交 换的百分比(0-100,默认为-1)</span><br><span class="line">-oom-kill-disable 禁用OOM Killer</span><br><span class="line">-cpus 可以使用的CPU数量</span><br><span class="line">-cpuset-cpus 限制容器使用特定的CPU核心，如(0-3，0,1)</span><br><span class="line">-cpu-shares CPU共享 (相对权重)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">内存限额:</span><br><span class="line">允许容器最多使用500M内存和100M的Swap,并禁用OOM Killer: </span><br><span class="line">docker run -d --name nginx03 --memory=&quot;500m&quot; --memory-swap=&quot;600m&quot; --oom- kill disable nginx</span><br><span class="line">docker stats nginx03</span><br><span class="line">CPU限额:</span><br><span class="line">允许容器最多使用一一个半的CPU:</span><br><span class="line">docker run -d --name nginx04 --cpus=&quot;1.5&quot; nginx</span><br><span class="line">允许容器最多使用50%的CPU:</span><br><span class="line">docker run -d --name nginx05 --cpus= &quot;.5&quot; nginx</span><br></pre></td></tr></table></figure>

<h3 id="管理容器常用命令"><a href="#管理容器常用命令" class="headerlink" title="管理容器常用命令"></a>管理容器常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps 运行的容器</span><br><span class="line">-l 最新创建的容器</span><br><span class="line">-a 所有容器</span><br><span class="line">docker inspect 查看容器详细信息</span><br><span class="line">docker exec 进入容器</span><br><span class="line">docker commit 提交镜像</span><br><span class="line">docker cp 复制文件到容器</span><br><span class="line">docker port 查看端口映射</span><br><span class="line">docker top 显示容器中的进程</span><br><span class="line">docker stats 显示资源统计</span><br><span class="line">docker stop/start</span><br><span class="line">docker rm</span><br></pre></td></tr></table></figure>

<h2 id="管理应用程序数据"><a href="#管理应用程序数据" class="headerlink" title="管理应用程序数据"></a>管理应用程序数据</h2><h3 id="将数据从宿主机挂载到容器的三种方式"><a href="#将数据从宿主机挂载到容器的三种方式" class="headerlink" title="将数据从宿主机挂载到容器的三种方式"></a>将数据从宿主机挂载到容器的三种方式</h3><p><code>Docker</code>提供三种方式将数据从宿主机挂载到容器中:<br><code>volumes</code>: <code>Docker</code>管理宿主机文件系统的一 部分(<code>/var/lib/docker/volumes</code>) 。保存数据的最佳方式。<br><code>bind mounts</code>:将宿主机上的任意位置的文件或者目录挂载到容器中。<br><code>tmpfs</code>:挂载存储在主机系统的内存中，而不会写入主机的文件系统。如果不希望将数据持久存储在任何位置，可以使用<code>tmpfs</code>,同时避免写入容器可写层提高性能。</p>
<h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">管理卷:</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker volume create nginx-vol</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker volume Is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker volume inspect nginx-vol</span></span><br><span class="line">用卷创建一个容器:</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d --name = nginx <span class="built_in">test</span> --mount src= nginx-vol,dst= /usr/share/nginx/html nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d --name=nginx <span class="built_in">test</span> -V nginx vol:/usr/share/nginx/html nginx</span></span><br><span class="line">清理:</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stop nginx-test</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rm nginx-test</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker volume rm nginx-vol</span></span><br><span class="line">注意:</span><br><span class="line">1.如果没有指定卷，自动创建。</span><br><span class="line">2.建议使用--mount,更通用。</span><br></pre></td></tr></table></figure>

<h3 id="Bind-Mounts"><a href="#Bind-Mounts" class="headerlink" title="Bind Mounts"></a>Bind Mounts</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用卷创建一个容器:</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run-d -it -- name= nginx-test -- mount <span class="built_in">type</span>= <span class="built_in">bind</span>,src= /app/wwwroot,dst=/usr/share/nginx/html nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -it --name= nginx <span class="built_in">test</span> -V /app/wwwoot:/usr/share/nginx/html nginx</span></span><br><span class="line">验证绑定:</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker inspect nginx-test</span></span><br><span class="line">清理:</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stop nginx-test</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rm nginx-test</span></span><br><span class="line">注意:</span><br><span class="line">1.如果源文件/目录没有存在，不会自动创建，会抛出一个错误。</span><br><span class="line">2.如果挂载目标在容器中非空目录，则该目录现有内容将被隐藏。</span><br></pre></td></tr></table></figure>

<p>Volume特点:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">多个运行容器之间共享数据。</span><br><span class="line">当容器停止或被移除时，该卷依然存在。</span><br><span class="line">多个容器可以同时挂载相同的卷。</span><br><span class="line">当明确删除卷时, 卷才会被删除。</span><br><span class="line">将容器的数据存储在远程主机或其他存储上</span><br><span class="line">将数据从一台Docker主机迁移到另一 台时，先停止容器，然后备份卷的目录(/var/ib/docker/volumes/)</span><br></pre></td></tr></table></figure>

<p>Bind Mounts特点:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">从主机共享配置文件到容器。默认情况下，挂载主机/etc/resolv.conf到每 个容器，提供DNS解析。</span><br><span class="line">在Docker主机上的开发环境和容器之间共享源代码。例如，可以将Maven target目录挂载到容器中，每次在Docker主机</span><br><span class="line">上构建Maven项目时，容器都可以访问构建的项目包。</span><br><span class="line">当Docker主机的文件或目录结构保证 与容器所需的绑定挂载一致时</span><br></pre></td></tr></table></figure>

<h2 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h2><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><p>bridge<br>–net= bridge<br>默认网络，Docker启动后创建一个docker0网桥， 默认创建的容器也是添加到这个网桥中。<br>host<br>–net= host<br>容器不会获得一个独立的network namespace,而是与宿主机共用一个。这就意味着容器不会有自己的网卡信息，而是使用宿主<br>机的。容器除了网络，其他都是隔离的。<br>none<br>–net= none<br>获取独立的network namespace,但不为容器进行任何网络配置,需要我们手动配置。<br>container<br>–net= container:Name/ID<br>与指定的容器使用同一个network namespace,具有同样的网络配置信息，两个容器除了网络，其他都还是隔离的。<br>自定义网络<br>与默认的bridge原理一样，但自定义网络具备内部DNS发现，可以通过容器名或者主机名容器之间网络通信。</p>
<h3 id="容器网络访问原理"><a href="#容器网络访问原理" class="headerlink" title="容器网络访问原理"></a>容器网络访问原理</h3><p>..</p>
<h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p><a href="https://www.bilibili.com/video/BV1ob41157fD?p=16">https://www.bilibili.com/video/BV1ob41157fD?p=16</a></p>
<h3 id="DockerFile格式"><a href="#DockerFile格式" class="headerlink" title="DockerFile格式"></a>DockerFile格式</h3><p>..</p>
<h3 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h3><p>..</p>
<h3 id="Build镜像"><a href="#Build镜像" class="headerlink" title="Build镜像"></a>Build镜像</h3><p>..</p>
<h3 id="搭建LNMP网站平台"><a href="#搭建LNMP网站平台" class="headerlink" title="搭建LNMP网站平台"></a>搭建LNMP网站平台</h3><p>..</p>
]]></content>
  </entry>
  <entry>
    <title>史上最强 搭建邮件服务器</title>
    <url>/projects/1243066710/</url>
    <content><![CDATA[<h1 id="史上最强-搭建邮件服务器"><a href="#史上最强-搭建邮件服务器" class="headerlink" title="史上最强 搭建邮件服务器"></a>史上最强 搭建邮件服务器</h1><p><a href="https://github.com/docker-mailserver/docker-mailserver">docker-mailserver/docker-mailserver</a></p>
<p>参考: <a href="https://www.itmanbu.com/docker-mail-server.html">https://www.itmanbu.com/docker-mail-server.html</a></p>
<p><a href="https://blog.csdn.net/hxpjava1/article/details/80669355">https://blog.csdn.net/hxpjava1/article/details/80669355</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">以下示例是在arm64平台上搭建的, 机器是x96max+刷了armbian(基于debian)系统</span><br><span class="line">如果是直接在云服务器上是用不到端口映射的</span><br><span class="line">最后的结论可能就是因为端口映射导致不能收其他域名邮件</span><br></pre></td></tr></table></figure>

<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/docker/mail &amp;&amp; cd ~/docker/mail</span><br><span class="line">vim docker-compose.yml # docker-compose</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mailserver:</span><br><span class="line">    image: docker.io/mailserver/docker-mailserver:9.1.0</span><br><span class="line">    hostname: mail # 名称</span><br><span class="line">    domainname: sddphp.cn # 域名</span><br><span class="line">    container_name: mailserver</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;25:25&quot;</span><br><span class="line">      - &quot;143:143&quot;</span><br><span class="line">      - &quot;587:587&quot;</span><br><span class="line">      - &quot;993:993&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - maildata:/var/mail</span><br><span class="line">      - mailstate:/var/mail-state</span><br><span class="line">      - maillogs:/var/log/mail</span><br><span class="line">      - ./config/:/tmp/docker-mailserver/</span><br><span class="line">      - /etc/ssl:/tmp/ssl:ro</span><br><span class="line">    environment:</span><br><span class="line">      - PERMIT_DOCKER=network # 内网端口转发, 一定要加这个</span><br><span class="line">      - ENABLE_SPAMASSASSIN=0</span><br><span class="line">      - ENABLE_CLAMAV=0</span><br><span class="line">      - ENABLE_FAIL2BAN=1</span><br><span class="line">      - ONE_DIR=1</span><br><span class="line">      - DMS_DEBUG=0</span><br><span class="line">      - SSL_TYPE=manual</span><br><span class="line">      - SSL_CERT_PATH=/tmp/ssl/fullchain.cer</span><br><span class="line">      - SSL_KEY_PATH=/tmp/ssl/sddphp.cn.key</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    cap_add:</span><br><span class="line">      - NET_ADMIN</span><br><span class="line">      - SYS_PTRACE</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  maildata:</span><br><span class="line">  mailstate:</span><br><span class="line">  maillogs:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master/mailserver.env # 环境配置</span><br><span class="line">wget https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/v10.0.0/setup.sh # 脚本, 用于设置用户和DKIM</span><br><span class="line">chmod a+x ./setup.sh</span><br><span class="line">./setup.sh help</span><br><span class="line">docker-compose up -d mailserver</span><br><span class="line">./setup.sh email add admin@sddphp.cn [&lt;password&gt;]</span><br><span class="line">./setup.sh config dkim keysize 1024 domain sddphp.cn</span><br><span class="line">docker-compose pull</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d mailserver</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim update.sh # 更新脚本</span><br><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[993mail]</span><br><span class="line"><span class="meta">#</span><span class="bash"> mail</span></span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 993</span><br><span class="line">remote_port = 993</span><br><span class="line"></span><br><span class="line">[587mail]</span><br><span class="line"><span class="meta">#</span><span class="bash"> mail</span></span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 587</span><br><span class="line">remote_port = 587</span><br></pre></td></tr></table></figure>

<h2 id="复制证书"><a href="#复制证书" class="headerlink" title="复制证书"></a>复制证书</h2><p> 复制到<code>/etc/ssl</code>目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/ssl/</span><br><span class="line">├── fullchain.cer</span><br><span class="line">└── sddphp.cn.key</span><br></pre></td></tr></table></figure>

<h2 id="配置DKIM"><a href="#配置DKIM" class="headerlink" title="配置DKIM"></a>配置DKIM</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat config/opendkim/keys/sddphp.cn/mail.txt </span><br><span class="line">mail._domainkey IN  TXT ( &quot;v=DKIM1; h=sha256; k=rsa; &quot;</span><br><span class="line">      &quot;p=XXXXXXXXXXXX&quot; )  ; ----- DKIM key mail for sddphp.cn</span><br></pre></td></tr></table></figure>

<h2 id="阿里云解析"><a href="#阿里云解析" class="headerlink" title="阿里云解析"></a>阿里云解析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mail._domainkey	TXT	默认	v=DKIM1;h=sha256;k=rsa;p=XXXXXX</span><br><span class="line">@				MX	默认	mail.sddphp.cn | 10</span><br><span class="line">_dmarc			TXT	默认	v=DMARC1; p=none</span><br><span class="line">@				TXT	默认	v=spf1 mx ~all</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec mailserver openssl s_client -connect 0.0.0.0:587 -starttls smtp -CApath /etc/ssl/</span><br><span class="line">docker exec mailserver openssl s_client -connect 0.0.0.0:993 -starttls smtp -CApath /etc/ssl/</span><br><span class="line">通过: </span><br><span class="line">Verify return code: 0 (ok)</span><br></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>配置后可以发邮件正常, 可以收内网邮件, 不能收其他域名发来的邮件, 正在解决中…</p>
<p>20210624 已解决</p>
<p><code>- PERMIT_DOCKER=network # 内网端口转发, 一定要加这个</code></p>
<p><a href="https://github.com/docker-mailserver/docker-mailserver/issues/1405">https://github.com/docker-mailserver/docker-mailserver/issues/1405</a></p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f mailserver</span><br><span class="line">tail -f /var/lib/docker/volumes/mail_maillogs/_data/mail.log</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JS复习</title>
    <url>/projects/1583735170/</url>
    <content><![CDATA[<h1 id="JS复习"><a href="#JS复习" class="headerlink" title="JS复习"></a>JS复习</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h4 id="1-javascript-简介"><a href="#1-javascript-简介" class="headerlink" title="1. javascript 简介"></a>1. javascript 简介</h4><p>1.1 什么是javascript</p>
<pre><code>1.1.1 概念： javascript是 基于对象 和 事件驱动 并具有相对安全性的 客户端 脚本语言
1.1.2 发展简史：
    ① Nombas公司1992年开发 嵌入式脚本语言 C-- 后改名 ScriptEase
    ② Netscape公司 1995年发布LiveScript 后改名javascript1.0
    ③ 三足鼎立  NetScape推出javascript1.1后，Microsoft推出Jscript, 加上 ScriptEase
    ④ 标准化 1997javascript1.1 作为草案 提交给 ECMA（欧洲计算机制造商协会） 。由来自 Netscape、Sun、
        微软、Borland 和其他一些对脚本编程感兴趣的公司的程序员组成的 TC39 锤炼出了 ECMA-262，该标准
        定义了名为 ECMAScript 的全新脚本语言.
1.1.3 组成： 核心（ECMAScript） 文档对象模型（DOM）  浏览器对象模型（BOM）
1.1.4 客户端浏览器上执行的脚本 JavaScript   VBScript    applet（需要安装JDK）
1.1.5 ECMAScript核心: JavaScript   ActionScript  ScriptEase
1.1.6 扩展：node.js  服务端开发（apache+php）手机app：  phonegap框架
1.1.7 课程 内容：
    JS 基本语法
    JS 函数/对象/数组
    JS 内置对象
    JS 事件
    BOM
    DOM
        HTML XML
    Ajax
    Jquery类库
    Bootstrap


1.1.8 浏览器
    IE    IE6  7  8     /  IE9+  EDGE
    非IE  Chrome firefox  opera  Safari ...
</code></pre>
<p>1.2 javascript的特点</p>
<pre><code>①.javascript是一种脚本编程语言，也是一种解释性语言
②.javascript的语法结构与C++、java十分类似
③.javascript是一种基于对象的语言
④.javascript具有跨平台性。
⑤.安全性与简单性
⑥ 基于对象（真正的对象 封装 继承 多态）
</code></pre>
<p>1.3 javascript 和 java的区别</p>
<pre><code>雷锋和雷峰塔
</code></pre>
<p>1.4 javascript 程序运行开发环境</p>
<pre><code>1.NetScape.3.0 以上版本和IE3.0 以上版本
2.用于编辑HTML的字符编辑器
</code></pre>
<p>1.5 javascript 优点与局限</p>
<pre><code>1.5.1 优点
    ①使用javascript在客户端进行验证，节省服务器资源  
    ②方便的操控页面中的各个对象，使网页更加友好
    ③使多种任务仅在客户端就可以完成而不需要网络和服务器的参与，从而支持分布式的运算和处理
1.5.2 局限
    ①兼容性
    ②javascript不能打开，读写和保存计算机上的文件
</code></pre>
<h4 id="2-javascript基本语法"><a href="#2-javascript基本语法" class="headerlink" title="2. javascript基本语法"></a>2. javascript基本语法</h4><p>2.1 在HTML中使用javascript</p>
<pre><code>① 写在header 中的 script标签内
② 外部文件导入 script标签导入 &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt; 标签内不能写代码
③ 通过事件 写在标签内 &lt;tag onclick=&quot;code....&quot;&gt;&lt;/tag&gt;
</code></pre>
<p>2.2 基本语法</p>
<pre><code>2.2.1 区分大小写
    一切都区分大小写

2.2.2 标示符
    不能一数字开头,可以由 数字/字母/下划线/$ 组成
</code></pre>
<p>2.3 注释</p>
<pre><code>单行注释：  //
多行注释：  /*  */
</code></pre>
<p>2.4 语句（指令结束符）<br>    ;   或者  换行</p>
<p>2.5 关键字和保留字</p>
<pre><code>break       else        new     var
case        finally     return  void
catch       for         switch  while
abstract    enum        int     short
······
</code></pre>
<p>2.4 变量</p>
<p>2.5 数据类型 typeof()  返回一个值或变量 的数据类型</p>
<pre><code>2.5.0 分类
    基本类型
        String(字串)  Number(数值)  Boolean(布尔)
    复合类型
        Object(对象)  Array(数组)
    特殊类型
        Null(空)  undefined(未定义)  function(函数)

2.5.1 数据类型 typeof()返回变量的类型
2.5.2 字符串类型
    定义字符串  &quot;&quot;  &#39;&#39;
    不论是单引号还是双引号 都可以解析 转义字符，都不能解析变量
    字符串连接符 +
2.5.2 数值类型
    ① 整数类型   十进制   十六进制   八进制
    ② 浮点型      科学计数法   浮点数的精度问题
    ③ 数值范围 5e324 ~ 1.7976931348623157e+308  超过范围回自动转换成 infinity(正无穷) -infinity(负无穷)
       可以使用 *isFinity() 验证是不是无穷  超出范围不能参与运算
    ④ NaN类型  Not a Number
        ① NaN与任何数字操作，结果都是NaN
        ② NaN与任何数都不相等，包括自己
        ③ 函数 isNaN() 判断是否是NaN
    ⑤ Number类型转换
        特点：  1.如果是布尔值，true和false分别转换为1和0
                2.数字，本色演出
                3. null  -&gt; 0
                4. undifined  -&gt; NaN
                5. 字符串：
                    a.“11”会变成11，“011”会变成11
                    b.“1.1”会变成1.1
                    c.“0xf”会变成相同大小的十进制整数值
                    d.  如果字符串是空的，则将其转换为0
                    e.  如果字符串包含除上述格式之外的字符，则将其转换成NaN
                    f. &#39;12e2&#39; =&gt; 1200
    ⑥ ParseInt类型转换
        特点：  1. 数字开头的字符串，忽略后面的字母
                2. 0x开头回转换成十六进制， 0不可以
                3. 科学计数法无法行,忽略后面的字母
                4.空字符串 NaN
                5. null true false NaN

    ⑦ parseFloat类型转换
        特点：1, 第一个小数点有效，第二个无效
              2. 数字开头的字符串，忽略后面的字母
              3, 科学计数法有效
              4， 16进制转换为0
              5 八进制 ，忽略前面的0， 无法换算八进制
2.5.3 其他数据类型
2.5.3 隐式数据类型转换
    ①数字类型： 在字符串环境下 隐身转换为字符串 在布尔环境下
    ②字符串类型 在数字环境下，可以隐式转换为字符串中的数字或NaN；在布尔环境下，可以隐式转换为true。
    ③空字符串：在数字环境下可以隐式转换为0；在布尔环境下可以隐式转换为false;
    ④字符串”true“：在数字环境下可以隐式转换位1；布尔为true
    ⑤.字符串“false”：数字环境为0，布尔位false
    ⑥null：在字符串环境下，转换为“null”；数字环境下，转换为0，布尔环境下，转为false
    ⑦NaN：在字符串环境下可以隐式转换为“NaN”;布尔环境下，转换为false
    ⑧undefined：字符串环境下，转换为“undefined”，数字环境下，转为NaN，布尔下，转为false
    ⑨true：字符串转为“true”，数字环境下转为1
    10false：字符串转为“false”，数字环境下转为0
</code></pre>
<p>2.6 运算符</p>
<pre><code>2.6.1 算术运算符：
    1.加法运算符     +
    2.减法运算符     -
    3.乘法运算符     *
    4.除法运算符     /
    5.模运算符        %
    6.负号运算符     -
    7.正号运算符     +
    8.递增运算符     ++
    9.递减运算符     --
2.6.2  关系运算符
    1.相等运算符     ==
    2.等同运算符     ===
    3.不等运算符     ！=
    4.不等同运算符    ！==
    5.小于运算符     &lt;
    6.大于运算符     &gt;
    7.小于或等于运算符  &lt;=
    8.大于或等于运算符      &gt;=
    9.in运算符
    判断一个值是否属于某个数组或者一个属性是否属于一个对象
    10.instanceof
    判断一个对象的实例是否属于某个对象
    11.字符串运算符   +连字符
    12.赋值运算符    =
2.6.3 逻辑运算符：
    1.逻辑与   &amp;&amp;
    2.逻辑或   ||
    3.逻辑非   ！
2.6.4 其他运算符：
    1.条件运算符     ?:
    2.new运算符        new 对象类型
    3.void运算符   
    void运算符可以让操作数进行运算，但是却舍弃运算之后的结果。
    4.typeof运算符   说明操作数是什么类型。 typeof(a)
2.6.5.对象属性存取运算符
    我们使用.来调用和设置对象的属性或者方法 d.name  .
2.6.6.delete运算符
    delete运算符可以用来删除变量、对象的属性、或数组中的元素。delete运算符返回的是布尔值类型。
    delete 对象名      delete 变量名
    delete 对象名.属性
    delete 数组[索引]   
2.6.7.逗号运算符
    var a = 1;
    var b = 2;
    c = a+b , d = a-b;
    8.this运算符   
    this代表的是当前对象。与php的$this的道理一样。
</code></pre>
<p>2.7 语句</p>
<pre><code>1. while语句
2. do…while语句
3. for语句
4. for…in语句
5. break语句
6. continue语句
7. with语句
</code></pre>
<h2 id="JS第二天"><a href="#JS第二天" class="headerlink" title="JS第二天"></a>JS第二天</h2><h4 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h4><pre><code>1. 函数的声明
    1.1. function  关键字方式
        function 函数名([形参列表])&#123;
            JS  code...
        &#125;
    1.2. 表达式方式
        var 函数名 = function([形参列表])&#123;
            JS  code...
        &#125;
    1.3. Function构造函数
        var 函数名 = new Function(&#39;参数1&#39;, &#39;JScode&#39;);

2. 调用函数
    加括号 调用
    不加括号 引用

3. JS函数特点
    JS的函数可以重复定义

4. JS函数中的参数
    4.1 形参和实参
        实参个数 &gt; 形参个数 不受影响
        实参个数 &lt; 形参个数 没有赋值的形参 会自动赋值为undefined
    4.2 参数的默认值
        在函数的内部 使用 判断是否为undefined的方式 来赋值默认值.
    4.3 可变参数个数的函数
        arguments  数组,内含所有实参


5. JS中的变量作用域  全局和局部变量
    在函数内 使用var 定义的是 局部变量
    在函数外 使用var 定义的是 全局变量
    在函数内 不使用var 定义的是 全局变量

6. JS的作用域链

    函数的执行 依赖于变量的作用域, 这个作用域是在 函数定义声明时决定的,而不是 函数调用时决定的!

    如果当前作用域里 没有声明变量,则向上一层作用域里面找.
    如果直到找到全局里 还都未找到 则在执行函数时 会报错.


7. 自执行函数 与 闭包

    自执行
    ( function()&#123;console.log(1)&#125; )()
    ( function()&#123;console.log(2)&#125; () )
    这种写法的含义是 将函数声明 转换成 函数表达式，消除了JS引擎识别函数表达式 和 函数声明的歧义.
    告诉JS引擎 这是一个函数表达式，不是函数声明，并且可以在后面 加括号，立即执行 函数的内的代码.


    闭包
    简单说,闭包就是 能够读取 其他函数内部变量的 函数。
    由于在JS中，只有函数内部的 子函数 才能读取 局部变量，
    因此可以把闭包 简单理解成 &quot;定义在一个 函数内部的 函数&quot;。
    所以，在本质上，闭包就是将 函数内部 和 函数外部 连接起来的一座桥梁。
    
    闭包的最大用处有两个:
        一个是可以读取 函数内部的变量，
        另一个就是 让这些变量的值 始终保持在内存中。
        
</code></pre>
<h2 id="JS第三天"><a href="#JS第三天" class="headerlink" title="JS第三天"></a>JS第三天</h2><h4 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h4><pre><code>1. 声明一个数组
    1.1 Array
        var list = new Array();
        var list = new Array(length);
        var list = new Array(v1,v2,v3....);
    1.2 JSON
        var list = [];
        var list = [v1, v2....];

2. 数组特点
    1. JS数组不能使用 [] 追加元素,要使用 push()
    2. JS数组的下标 是连续的,跳跃着赋值数组元素.数组的商都会有累加变化,中间的元素会自动赋值为undefined
    3. JS没有关联数组

3. 遍历
    for
    for in

4. 数组 属性
    length  长度

5. 数组 方法
</code></pre>
<h2 id="JS第四天"><a href="#JS第四天" class="headerlink" title="JS第四天"></a>JS第四天</h2><h4 id="JS内置对象"><a href="#JS内置对象" class="headerlink" title="JS内置对象"></a>JS内置对象</h4><ol>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>RegExp</li>
<li>Date</li>
<li>Math</li>
<li>Array</li>
</ol>
<p>PS: JS随机数的产生.</p>
<pre><code>Math.random()函数返回0和1之间的伪随机数,可能为0,但总是小于1,(0,1)

生成n-m,包含n 但不包含m 的整数:
1. 算出 m-n的值,假设等于w
2. Math.random()*w
3. Math.random()*w+n
4. parseInt(Math.random()*w+n, 10)

生成n-m,不包含n 但包含m 的整数:​
1. 算出 m-n的值,假设等于w
2. Math.random()*w
3. Math.random()*w+n
4. Math.floor(Math.random()*w+n) + 1

生成n-m,不包含n和m的整数:
1. 算出 m-n-2的值,假设等于w
2. Math.random()*w
3. Math.random()*w+n +1
4. Math.round(Math.random()*w+n+1) 或者 Math.ceil(Math.random()*w+n+1)

生成n-m,包含n和m的随机数:
1. 算出 m-n的值,假设等于w
2. Math.random()*w
3. Math.random()*w+n
4. Math.round(Math.random()*w+n) 或者 Math.ceil(Math.random()*w+n)
</code></pre>
<h2 id="JS第五天"><a href="#JS第五天" class="headerlink" title="JS第五天"></a>JS第五天</h2><h4 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h4><h3 id="1-事件的绑定"><a href="#1-事件的绑定" class="headerlink" title="1. 事件的绑定"></a>1. 事件的绑定</h3><ul>
<li>事件作为 元素的属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button event=<span class="string">&quot;JS CODE...&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
<li>事件作为 元素对象的属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.event = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">element.event = funName;</span><br></pre></td></tr></table></figure></li>
<li>事件监听(标准)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">非IE: element.addEventListener(<span class="string">&#x27;事件名字&#x27;</span>, funName, <span class="literal">false</span>);</span><br><span class="line">IE:   element.attachEvent(<span class="string">&#x27;事件名字&#x27;</span>, funName);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-解除绑定"><a href="#2-解除绑定" class="headerlink" title="2. 解除绑定"></a>2. 解除绑定</h3><ul>
<li>第1种和第2种的绑定方式<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">重写覆盖事件属性为<span class="literal">null</span> 或 <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">element.event = <span class="literal">null</span>;</span><br><span class="line">element.event = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>监听方式<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">&#x27;事件名字&#x27;</span>, funName, <span class="literal">false</span>);</span><br><span class="line">element.detachEvent(<span class="string">&#x27;事件名字&#x27;</span>, funName);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-给一组元素绑定事件和this的使用"><a href="#3-给一组元素绑定事件和this的使用" class="headerlink" title="3. 给一组元素绑定事件和this的使用"></a>3. 给一组元素绑定事件和this的使用</h3><ul>
<li>循环绑定事件,获取触发事件的 元素对象时,需要使用this.</li>
<li>元素标签内部 绑定事件时,可以传入this,表示  该元素对象自己.</li>
</ul>
<h3 id="4-闭包-closure"><a href="#4-闭包-closure" class="headerlink" title="4. 闭包 closure"></a>4. 闭包 closure</h3><ul>
<li>在循环绑定事件时,将循环变量保留下来,就必须使用闭包.</li>
<li>用一组元素去控制另一组元素时, 需要使用闭包.</li>
<li>语法:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ... ) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i,x,y</span>)</span>&#123;</span><br><span class="line">        element.event = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 使用 i,x,y</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i,x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-常用事件"><a href="#5-常用事件" class="headerlink" title="5. 常用事件"></a>5. 常用事件</h3><h4 id="5-1-鼠标事件"><a href="#5-1-鼠标事件" class="headerlink" title="5.1 鼠标事件"></a>5.1 鼠标事件</h4><ul>
<li><p>onclick        鼠标单击事件</p>
</li>
<li><p>ondblclick     鼠标双击事件</p>
</li>
<li><p>oncontextmenu  鼠标右击事件</p>
</li>
<li><p>onmouseover    鼠标指向触发</p>
</li>
<li><p>onmouseout     鼠标移开触发</p>
</li>
<li><p>onmousedown    鼠标按下触发</p>
</li>
<li><p>onmouseup      鼠标松开触发</p>
</li>
<li><p>onmousemove    鼠标移动触发</p>
</li>
</ul>
<h2 id="JS第六天"><a href="#JS第六天" class="headerlink" title="JS第六天"></a>JS第六天</h2><h4 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h4><h3 id="5-2-键盘事件"><a href="#5-2-键盘事件" class="headerlink" title="5.2 键盘事件"></a>5.2 键盘事件</h3><ul>
<li>onkeydown   按下按键触发</li>
<li>onkeyup     松开按键触发</li>
<li>onkeypress  按下并松开按键触发(高级事件)<pre><code>        不是所有按键都能触发,非输出型按键都不能触发
        方向键/tab/shift/大小写切换/ctrl/alt
</code></pre>
</li>
</ul>
<h3 id="5-3-表单事件"><a href="#5-3-表单事件" class="headerlink" title="5.3 表单事件"></a>5.3 表单事件</h3><ul>
<li>onsubmit    表单被提交时触发</li>
<li>onreset     表单被重置时触发</li>
<li>onfocus     获取焦点时触发</li>
<li>onblur      失去焦点时触发</li>
<li>onchange    改变表单控件的内容或状态时就触发<pre><code>        `用户input元素时,value值变化且失焦才会触发`
</code></pre>
</li>
<li>oninput     非IE: 输入时触发</li>
<li>onpropertychange  IE8: 输入时触发</li>
<li>onselect    选区文本时触发</li>
</ul>
<h3 id="5-4-框架-对象事件"><a href="#5-4-框架-对象事件" class="headerlink" title="5.4 框架/对象事件"></a>5.4 框架/对象事件</h3><ul>
<li><p>onload    文档加载完触发/图片加载完触发</p>
</li>
<li><p>onunload  文档关闭时触发 IE</p>
</li>
<li><p>onbeforeunload  文档关闭时触发 非IE<br>  <code>浏览器阻止了关闭前的弹框 需要return &quot;string...&quot;</code></p>
</li>
<li><p>onabort   图片加载过程中中断触发<br>  <a href="https://krpano.com/panos/tokyo45gp/">https://krpano.com/panos/tokyo45gp/</a></p>
</li>
<li><p>onerror   图片加载错误触发</p>
</li>
<li><p>onresize  窗口/框架大小变化时触发</p>
</li>
<li><p>onscroll  元素滚动条在滚动时触发</p>
</li>
</ul>
<h3 id="5-5-其他事件"><a href="#5-5-其他事件" class="headerlink" title="5.5 其他事件"></a>5.5 其他事件</h3><ul>
<li><p>oncopy   拷贝内容时触发</p>
</li>
<li><p>oncut    剪切内容时触发</p>
</li>
<li><p>onpaste  粘贴内容时触发</p>
</li>
<li><p>onplay   音/视频开始播放时触发(audio/video)</p>
</li>
<li><p>onpause  音/视频暂停时触发(audio/video)</p>
</li>
<li><p>onended  音/视频播放结束时触发(audio/video)</p>
</li>
</ul>
<h3 id="6-Event事件对象"><a href="#6-Event事件对象" class="headerlink" title="6. Event事件对象"></a>6. Event事件对象</h3><ul>
<li>6.1 获取<br><code>var e = en || window.event;</code></li>
<li>6.2 属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e.clientX  鼠标x坐标</span><br><span class="line">e.clientY  鼠标y坐标</span><br><span class="line">e.keyCode  按键码</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-常用HTML元素属性"><a href="#7-常用HTML元素属性" class="headerlink" title="7. 常用HTML元素属性"></a>7. 常用HTML元素属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">innerHTML   双标签之间的文本</span><br><span class="line"></span><br><span class="line">当前元素 相对与body 或已定位的父元素的 偏移量</span><br><span class="line">offsetTop</span><br><span class="line">offsetLeft</span><br><span class="line"></span><br><span class="line">当前元素 左边缘或顶边缘 滚过的像素值</span><br><span class="line">scrollTop</span><br><span class="line">scrollLeft</span><br><span class="line"></span><br><span class="line">className   当前元素的<span class="class"><span class="keyword">class</span>属性值</span></span><br><span class="line"><span class="class"><span class="title">tagName</span>     当前元素的标签名</span></span><br></pre></td></tr></table></figure>

<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h3 id="1-什么是BOM"><a href="#1-什么是BOM" class="headerlink" title="1. 什么是BOM"></a>1. 什么是BOM</h3><pre><code>Browser Object Model  浏览器对象模型
</code></pre>
<h3 id="2-JavaScript-对象层次"><a href="#2-JavaScript-对象层次" class="headerlink" title="2. JavaScript 对象层次"></a>2. JavaScript 对象层次</h3><h4 id="2-1-对象种类"><a href="#2-1-对象种类" class="headerlink" title="2.1 对象种类"></a>2.1 对象种类</h4><pre><code>自定义对象 Object
内置对象  A B N S R D M G
BOM 浏览器对象模型
DOM 文档对象模型
</code></pre>
<h4 id="2-2-对象树-倒树状结构"><a href="#2-2-对象树-倒树状结构" class="headerlink" title="2.2 对象树 (倒树状结构)"></a>2.2 对象树 (倒树状结构)</h4><pre><code>                window
                   |
history  location  document screen  navigator
                    |
            doc       html
                        |
                    head   body
                            |
                    h1  p  div a  i u b ...
</code></pre>
<h3 id="3-BOM-对象"><a href="#3-BOM-对象" class="headerlink" title="3. BOM 对象"></a>3. BOM 对象</h3><h4 id="3-1-window"><a href="#3-1-window" class="headerlink" title="3.1 window"></a>3.1 window</h4><pre><code>- 描述 整个浏览器窗口
- 它是JS(web)中 所有对象的根对象
- 使用window的属性和方法时, 省略window的调用
- 自定义对象/变量/函数 都属于window

属性:
    见手册
方法:
    clearInterval() 取消由 setInterval() 设置的 timeout。 
    clearTimeout() 取消由 setTimeout() 方法设置的 timeout。 
    setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。 
    setTimeout() 在指定的毫秒数后调用函数或计算表达式。 

    alert()    警告框
    confirm()  确认框
    prompt()   输入框

    open()   打开新窗口
    close()  关闭自己打开过的窗口
    print()  打印

    scrollTo()  滚到哪去
    scrollBy()  滚多少
    
</code></pre>
<h4 id="3-2-HTML-DOM-对象参考"><a href="#3-2-HTML-DOM-对象参考" class="headerlink" title="3.2. HTML DOM 对象参考"></a>3.2. HTML DOM 对象参考</h4><pre><code>2.1 document 对象
2.2 form 对象
2.3 image 对象
2.4 anchor 对象
2.5 base 对象
2.6 canvas 对象
2.7 Event 对象
2.8 input 系列对象
    blur()    失去焦点
    focus()   获取焦点
    select()  选中
2.9 select 对象
2.10 option 对象
2.11 style 对象
2.11 table 对象
2.12 tableRow 对象
2.13 tableCell 对象
</code></pre>
<h2 id="JS第八天"><a href="#JS第八天" class="headerlink" title="JS第八天"></a>JS第八天</h2><h4 id="节点操作XMLDOM"><a href="#节点操作XMLDOM" class="headerlink" title="节点操作XMLDOM"></a>节点操作XMLDOM</h4><p>文档对象模型—节点操作 XML DOM  节点</p>
<p>1.节点介绍</p>
<pre><code>1.1 什么是节点 node
    HTML文档中 所有的组成部分 都称之为节点

    document   文档
    element    元素标签
    attr       属性 Attribute
    text       文本
    comment    注释

1.2 节点树
    子节点
    父节点
    同辈节点
    后代节点
    先辈节点

1.3 节点的访问
    得到节点
        document   直接使用
        element    使用方法 get...
        attr       element.getAttributeNode(attrname)
        text       子节点
        comment    子节点
    获取子节点
        childNodes
    获取子元素节点
        children

    获取第一个子节点
        firstChild
    获取最后一个子节点
        lastChild

    获取父节点
        parentNode
    获取父元素节点
        parentElement

    获取前一个节点
        previousSibling
    获取后一个节点
        nextSibling

1.4 节点属性
    nodeName
        document   #document
        element    标签名
        attr       属性名
        text       #text
        comment    #comment
    nodeValue
        document   null
        element    null
        attr       属性值
        text       文本内容
        comment    注释内容
    nodeType
        document   9
        element    1
        attr       2
        text       3
        comment    8
</code></pre>
<p>2.节点操作</p>
<pre><code>2.1 获取节点
    document    直接使用
    element     使用方法 get.../子节点/父节点/同辈节点
    attr        element.attr
                element.getAttributeNode(attrname) 获取属性节点
                element.getAttribute(attrname) 获取属性值

2.2 改变节点(改变节点的值) nodeValue
    element: 无意义
    attr: 
        element.setAttribute(attrnamem, value);
        element.attr = value;
2.3 删除节点
    属性节点: 把值赋值为null 或 removeAttribute();
    元素节点: removeChild(node) 需要找到父元素节点

2.4 替换节点
    属性节点: setAttribute(attrnamem, value);
    元素节点: replaceChild(new_node, old_node) 需要找到父元素节点

2.5 插入节点
    属性节点: 
        setAttribute(attrnamem, value);
        setAttributeNode(attrnamem).nodeValue;
    元素节点: 
        appendChild(node)  追加
        insertBefore(new_node, old_node)  指定位置之前

2.6 创建节点
    属性节点: document.createAttribute(attrname);
    元素节点: document.createElement(&#39;tagName&#39;);

2.7 克隆节点
    cloneNode()   true / false(默认值)
</code></pre>
<ol start="3">
<li>XML 对象</li>
</ol>
<pre><code>node
nodeList
document
element
attr
text
comment
</code></pre>
<ol start="4">
<li>HTMLElement对象</li>
</ol>
<pre><code>innerHTML  
innerText  
outerHTML  

盒子模型实际宽高: 宽 + 高 + 内边距 +边框
    offsetWidth
    offsetHeight
宽高 + 内边距
    clientWidth
    clientHeight
宽高 + 内边距 + 计算元素内部的大小
    scrollWidth
    scrollHeight


视口高度
    document.documentElement.clientHeight
文档高度
    document.documentElement.scrollHeight
    
</code></pre>
<h2 id="JS第九天"><a href="#JS第九天" class="headerlink" title="JS第九天"></a>JS第九天</h2><h4 id="特效扩展"><a href="#特效扩展" class="headerlink" title="特效扩展"></a>特效扩展</h4><h3 id="银行卡自动截断"><a href="#银行卡自动截断" class="headerlink" title="银行卡自动截断"></a>银行卡自动截断</h3><h3 id="轮播图-Banner"><a href="#轮播图-Banner" class="headerlink" title="轮播图(Banner)"></a>轮播图(Banner)</h3><h3 id="图片无缝轮滚"><a href="#图片无缝轮滚" class="headerlink" title="图片无缝轮滚"></a>图片无缝轮滚</h3><h3 id="下滑加载图片"><a href="#下滑加载图片" class="headerlink" title="下滑加载图片"></a>下滑加载图片</h3><h3 id="模态框-Modal"><a href="#模态框-Modal" class="headerlink" title="模态框(Modal)"></a>模态框(Modal)</h3><h3 id="蛇形文字"><a href="#蛇形文字" class="headerlink" title="蛇形文字"></a>蛇形文字</h3><h3 id="自定义输出表格-节点方式"><a href="#自定义输出表格-节点方式" class="headerlink" title="自定义输出表格(节点方式)"></a>自定义输出表格(节点方式)</h3><h2 id="JS第十一天"><a href="#JS第十一天" class="headerlink" title="JS第十一天"></a>JS第十一天</h2><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><ol>
<li>Ajax</li>
</ol>
<pre><code>async javascript and xml  异步的JS和xml

请求 客户端向服务器请求一个文件
响应 服务器 把文件内容 返回给客户端, 一般服务端有输出才算真真的响应.
传统的请求,通过地址栏刷新请求
AJAX 通过技术 偷偷的请求
</code></pre>
<ol start="2">
<li>XMLHttpRequest对象 XHR</li>
</ol>
<pre><code>2.1 概念
    XMLHttpRequest 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。XMLHttpRequest 可以同步或异步地返回 Web 服务器的响应，并且能够以文本或者一个 DOM 文档的形式返回内容。

2.2 常用属性
    readyState  请求响应的状态
        0 Uninitialized 初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置。 
        1 Open open() 方法已调用，但是 send() 方法未调用。请求还没有被发送。 
        2 Sent Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。 
        3 Receiving 所有响应头部都已经接收到。响应体开始接收但未完成。 
        4 Loaded HTTP 响应已经完全接收。 
    
    status   HTTP的响应状态码
        200 响应成功
        404 文件不存在
        304 文件来自于缓存
        500 服务器未知错误 
        503 服务器宕机 或 服务不可用

    responseText  获取服务器的响应返回文本

2.3 常用方法
    open()   初始化请求
        参1 method POST/GET/HEAD
        参2 url 请求主体
        参3 是否同/异步 默认是true(异步)
        参4,5 认证的用户名和密码,需要时填写
    send()   发送请求
        GET方式 无参
        POST方式 有可选参数

    xhr.setRequestHeader() 设置请求头
    xhr.setRequestHeader(&#39;content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);

2.4 事件句柄    onreadystatechange
    readyState的值一变化就触发
    
</code></pre>
<h2 id="JS12天"><a href="#JS12天" class="headerlink" title="JS12天"></a>JS12天</h2><h4 id="继续AJAX"><a href="#继续AJAX" class="headerlink" title="继续AJAX"></a>继续AJAX</h4><ol start="3">
<li>Ajax+php 请求流程</li>
</ol>
<ul>
<li>创建XHR对象</li>
<li>初始化请求</li>
<li>发送请求</li>
<li>接收 并处理响应</li>
</ul>
<ol start="4">
<li>处理json数据</li>
</ol>
<pre><code>PHP: json_encode()
JS:  eval() 或 JSON.parse()
</code></pre>
<ol start="5">
<li>同步和异步</li>
</ol>
<pre><code>open()方法的参3,用于控制是否同异步
默认参数为true,表示请求是异步的,AJAX不会影响到其他程序的运行.
参数为false,表示请求是同步的.AJAX将阻塞之后的程序的继续运行,直到AJAX响应完全接收完毕为止
</code></pre>
<p>6 post 和 get</p>
<pre><code>true
false
</code></pre>
<p>7.Ajax 无法跨域 与 jsonp</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function makedata(obj) &#123;</span><br><span class="line">    // alert(obj);</span><br><span class="line">    console.log(obj);</span><br><span class="line">    for (var i in obj) &#123;</span><br><span class="line">        box.innerHTML += i + &#x27;:&#x27; + obj[i] + &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// JSONP关键步骤</span><br><span class="line">// JS标签不受同源策略</span><br><span class="line">function loadHtml() &#123;</span><br><span class="line">    // 创建JS标签</span><br><span class="line">    var js = document.createElement(&#x27;script&#x27;);</span><br><span class="line">    // 设置JS标签的SRC值</span><br><span class="line">    js.src = &#x27;http://127.0.0.1/s76/JS12/php/jsonp.php&#x27;;</span><br><span class="line">    // 将JS标签添加到页面中</span><br><span class="line">    document.body.appendChild(js);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="JS第十三天"><a href="#JS第十三天" class="headerlink" title="JS第十三天"></a>JS第十三天</h2><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><ol>
<li>jQuery介绍</li>
</ol>
<pre><code>1.1 什么是jQuery
    jQuery是 JavaScript 的类库

1.2 jQuery特点
    写得少 干得多

1.3 jQuery优势
    ① 开源
    ② 便捷的 选择器
    ③ 方便的dom操作
    ④ 丰富的动画操作
    ⑤ 简单的ajax操作
    ⑥ 兼容性
    ⑦ 方便的插件机制

1.4 jQuery缺点
    额外的 添加 jQuery文件，增加网络传输量

1.5 jQuery版本
    jQuery 1.X    支持IE
    jQuery 2.X    IE9+  其他...
</code></pre>
<ol start="2">
<li>jQuery的基本语法</li>
</ol>
<pre><code>https://www.jquery123.com/ [手册]

2.1 jquery标准的使用方式
    标准入口
    $(document).ready(function()&#123;
        JS ..
    &#125;);
    简写入口
    $(function()&#123;
        JS...
    &#125;);

2.2 ready和onload的区别
    1). 触发点
        ready 文档中的dom加载完就触发
        onload 文档中的一切都加载完 才触发
    2). 绑定逻辑
        ready 可以绑定多个事件(事件监听)
        onload 后面的绑定 会覆盖前面的代码

2.3 链式操作风格
    JQDOM.css().attr().css();

2.4 jQueryDOM 与 JSDOM 的区别 以及相互转化
    区别:
        JQDOM 通过 $() 获取到的是一个数组对象
        JSDOM 通过 GET... 获取到的是一个元素对象
    互相转换:
        JSDOM -&gt; JQDOM    $(JSDOM)
        JQDOM -&gt; JSDOM    JQDOM[index]   JQDOM.get(index)

2.5 jquery命名冲突
    $
</code></pre>
<ol start="4">
<li>jQuery的选择器  </li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.1 基本选择器</span><br><span class="line">    *       通配符选择器</span><br><span class="line">    #id     ID选择器</span><br><span class="line">    .class  class选择器</span><br><span class="line">    tagName 标签选择器</span><br><span class="line">    s1,s2,s3 组合/分组选择器</span><br><span class="line"></span><br><span class="line">4.2 层级选择器</span><br><span class="line">    selecotor selecotor  所有的后代元素</span><br><span class="line">    selecotor&gt;selecotor  所有的子元素</span><br><span class="line">    selecotor+selecotor  紧邻着的下一个同辈元素</span><br><span class="line">    selecotor~selecotor  紧邻着的所有同辈元素</span><br><span class="line"></span><br><span class="line">4.3 过滤选择器</span><br><span class="line">    :first         首个</span><br><span class="line">    :last          最后一个</span><br><span class="line">    :eq(index)     指定第几个</span><br><span class="line">    :lt(index)     索引小于</span><br><span class="line">    :gt(index)     索引大于</span><br><span class="line">    :even          索引为偶数的,0索引算作为偶数</span><br><span class="line">    :odd           索引为奇数的</span><br><span class="line">    :header        所有的h标签</span><br><span class="line">    :not(selector) 排除指定选择器所选的元素</span><br><span class="line"></span><br><span class="line">4.4 内容选择器</span><br><span class="line">    :contains(text)  匹配包含指定文本的元素</span><br><span class="line">    :has(selector)   匹配含有选择器的所匹配的元素的元素</span><br><span class="line">    :parent          匹配含有子元素或文本的元素</span><br><span class="line">    :empty           匹配所有不含子元素 或文本的元素</span><br><span class="line"></span><br><span class="line">4.5 可见性选择器</span><br><span class="line">    :hidden       匹配所有不可见元素</span><br><span class="line">    :visible      匹配所有可见元素</span><br><span class="line"></span><br><span class="line">4.6 属性选择器</span><br><span class="line">    select[attrname]            选择有指定属性的元素</span><br><span class="line">    select[attrname=&#x27;value&#x27;]    选择值 等于value的元素</span><br><span class="line">    select[attrname!=&#x27;value&#x27;]   选择值 不等于value的元素</span><br><span class="line">    select[attrname^=&#x27;value&#x27;]   选择值 以value开头的元素</span><br><span class="line">    select[attrname$=&#x27;value&#x27;]   选择值 以value结尾的元素</span><br><span class="line">    select[attrname*=&#x27;value&#x27;]   选择值 包含value的元素</span><br><span class="line">    [][][][]....                多个属性选择器,进一步做筛选</span><br><span class="line"> </span><br><span class="line">4.7 子元素选择器</span><br><span class="line">    :first-child    是否为首个子元素</span><br><span class="line">    :last-child     是否为最后一个子元素</span><br><span class="line">    :nth-child(n)   是否为父元素的第N个子元素</span><br><span class="line">    :only-child     是否为父元素的唯一子元素(独苗)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.8 表单选择器</span><br><span class="line">    :input </span><br><span class="line">    :text </span><br><span class="line">    :password </span><br><span class="line">    :radio </span><br><span class="line">    :checkbox </span><br><span class="line">    :submit </span><br><span class="line">    :image </span><br><span class="line">    :reset </span><br><span class="line">    :button </span><br><span class="line">    :file </span><br><span class="line">    :hidden </span><br><span class="line"></span><br><span class="line">4.9 表单对象选择器</span><br><span class="line">    :enabled    匹配所有可用元素</span><br><span class="line">    :disabled   匹配所有不可用元素</span><br><span class="line">    :checked    匹配所有被选中的元素</span><br><span class="line">    :selected   匹配所有被选中的select元素</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>鸟哥的linux私房菜1</title>
    <url>/projects/72379512/</url>
    <content><![CDATA[<h3 id="第零章-计算器概论"><a href="#第零章-计算器概论" class="headerlink" title="第零章 计算器概论"></a>第零章 计算器概论</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 计算器的定义为：『接受用户输入指令与数据，经由中央处理器的数学与逻辑单元运算处理后，以产生或储</span><br><span class="line">存成有用的信息』；</span><br><span class="line">2. 计算机的五大单元包括：输入单元、输出单元、控制单元、算数逻辑单元、记忆单元五大部分。其中 CPU</span><br><span class="line">占有控制、算术逻辑单元，记忆单元又包含主存储器与辅助内存；</span><br><span class="line">3. 数据会流进/流出内存是 CPU 所发布的控制命令，而 CPU 实际要处理的数据则完全来自于主存储器；</span><br><span class="line">4. CPU 依设计理念主要分为：精简指令集(RISC)与复杂指令集(CISC)系统；</span><br><span class="line">5. 关于 CPU 的频率部分：外频指的是 CPU 与外部组件进行数据传输时的速度，倍频则是 CPU 内部用来加速</span><br><span class="line">工作效能的一个倍数， 两者相乘才是 CPU 的频率速度；</span><br><span class="line">6. 新的 CPU 设计中，已经将北桥的内存控制芯片整合到 CPU 内，而 CPU 与主存储器、显示适配器沟通的</span><br><span class="line">总线通常称为系统总线。 南桥就是所谓的输入输出(I/O)总线，主要在联系硬盘、USB、网络卡等接口设备；</span><br><span class="line">7. CPU 每次能够处理的数据量称为字组大小(word size)，字组大小依据 CPU 的设计而有 32 位与 64 位。 我们</span><br><span class="line">现在所称的计算机是 32 或 64 位主要是依据这个 CPU 解析的字组大小而来的！</span><br><span class="line">8. 个人计算机的主存储器主要组件为动态随机存取内存(Dynamic Random Access Memory, DRAM)，至于 CPU</span><br><span class="line">内部的第二层快取则使用静态随机存取内存(Static Random Access Memory, SRAM)；</span><br><span class="line">9. BIOS(Basic Input Output System)是一套程序，这套程序是写死到主板上面的一个内存芯片中， 这个内存芯</span><br><span class="line">片在没有通电时也能够将数据记录下来，那就是只读存储器(Read Only Memory, ROM)；</span><br><span class="line">10. 目前主流的外接卡界面大多为 PCIe 界面，且最新为 PCIe 3.0，单信道速度高达 1GBytes/s</span><br><span class="line">11. 常见的显示适配器连接到屏幕的界面有 HDMI/DVI/D-Sub/Display port 等等。HDMI 可同时传送影像与声</span><br><span class="line">音。</span><br><span class="line">12. 传统硬盘的组成为：圆形磁盘盘、机械手臂、 磁盘读取头与主轴马达所组成的，其中磁盘盘的组成为扇区、</span><br><span class="line">磁道与磁柱；</span><br><span class="line">13. 磁盘连接到主板的界面大多为 SATA 或 SAS，目前桌机主流为 SATA 3.0，理论极速可达 600Mbytes/s。</span><br><span class="line">14. 常见的文字编码为 ASCII，繁体中文编码主要有 Big5 及 UTF8 两种，目前主流为 UTF8</span><br><span class="line">15. 操作系统(Operating System, OS)其实也是一组程序， 这组程序的重点在于管理计算机的所有活动以及驱动</span><br><span class="line">系统中的所有硬件。</span><br><span class="line">16. 计算机主要以二进制作为单位，常用的磁盘容量单位为 bytes，其单位换算为 1 Byte = 8bits。</span><br><span class="line">17. 最阳春的操作系统仅在驱动与管理硬件，而要使用硬件时，就得需要透过应用软件或者是壳程序(shell)的功</span><br><span class="line">能， 来呼叫操作系统操纵硬件工作。目前称为操作系统的，除了上述功能外，通常已经包含了日常工作所</span><br><span class="line">需要的应用软件在内了。</span><br></pre></td></tr></table></figure>

<h3 id="第一章-Linux-是什么与如何学习"><a href="#第一章-Linux-是什么与如何学习" class="headerlink" title="第一章 Linux 是什么与如何学习"></a>第一章 Linux 是什么与如何学习</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 操作系统(Operation System)主要在管理与驱动硬件，因此必须要能够管理内存、管理装置、 负责行程管理</span><br><span class="line">以及系统呼叫等等。因此，只要能够让硬件准备妥当(Ready)的情况， 就是一个阳春的操作系统了。</span><br><span class="line">2. Unix 的前身是由贝尔实验室(Bell lab.)的 Ken Thompson 利用汇编语言写成的， 后来在 1971-1973 年间由</span><br><span class="line">Dennis Ritchie 以 C 程序语言进行改写，才称为 Unix。</span><br><span class="line">3. 1977 年由 Bill Joy 释出 BSD (Berkeley Software Distribution)，这些称为 Unix-like 的操作系统。</span><br><span class="line">4. 1984 年由 Andrew Tanenbaum 开始制作 Minix 操作系统，该系统可以提供原始码以及软件；</span><br><span class="line">5. 1984 年由 Richard Stallman 提倡 GNU 计划，倡导自由软件(Free software)， 强调其软件可以『自由的取得、</span><br><span class="line">复制、修改与再发行』，并规范出 GPL 授权模式， 任何 GPL(General Public License)软件均不可单纯仅贩卖</span><br><span class="line">其软件，也不可修改软件授权。</span><br><span class="line">6. 1991 年由芬兰人 Linus Torvalds 开发出 Linux 操作系统。简而言之，Linux 成功的地方主要在于：Minix(Unix), </span><br><span class="line">GNU, Internet, POSIX 及虚拟团队的产生。</span><br><span class="line">7. 符合 Open source 理念的授权相当多，比较知名的如 Apache / BSD / GPL / MIT 等。</span><br><span class="line">8. Linux 本身就是个最阳春的操作系统，其开发网站设立在 http://www.kernel.org，我们亦称 Linux 操作系统最</span><br><span class="line">底层的数据为『核心(Kernel)』。</span><br><span class="line">9. 从 Linux kernel 3.0 开始，已经舍弃奇数、偶数的核心版本规划，新的规划使用主线版本 (MainLine) 为依</span><br><span class="line">据， 并提供长期支持版本 (longterm) 来加强某些功能的持续维护。</span><br><span class="line">10. Linux distributions 的组成含有：『Linux Kernel + Free Software + Documentations(Tools) + 可完全安装的程序』</span><br><span class="line">所制成的一套完整的系统。</span><br><span class="line">11. 常见的 Linux distributions 分类有『商业、社群』分类法，或『RPM、DPKG』分类法</span><br><span class="line">12. 学习 Linux 最好从头由基础开始学习，找到一本适合自己的书籍，加强实作才能学会</span><br></pre></td></tr></table></figure>

<h3 id="第二章-主机规划与磁盘分区"><a href="#第二章-主机规划与磁盘分区" class="headerlink" title="第二章 主机规划与磁盘分区"></a>第二章 主机规划与磁盘分区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 新添购计算机硬件配备时，需要考虑的角度有『游戏机/工作机』、『效能/价格比』、『效能/消耗瓦数』、『支持</span><br><span class="line">度』等；</span><br><span class="line">2. 旧的硬件配备可能由于保存的问题或者是电子零件老化的问题，导致计算机系统非常容易在运作过程中出</span><br><span class="line">现不明的当机情况</span><br><span class="line">3. Red Hat 的硬件支持：https://hardware.redhat.com/?pagename=hcl</span><br><span class="line">4. 在 Linux 系统中，每个装置都被当成一个文件来对待，每个装置都会有装置文件名。</span><br><span class="line">5. 磁盘装置文件名通常分为两种，实际 SATA/USB 装置文件名为/dev/sd[a-p]，而虚拟机的装置可能为</span><br><span class="line">/dev/vd[a-p]</span><br><span class="line">6. 磁盘的第一个扇区主要记录了两个重要的信息，分别是： (1)主要启动记录区(Master Boot Record, MBR)：</span><br><span class="line">可以安装开机管理程序的地方，有 446 bytes (1)分区表(partition table)：记录整颗硬盘分区的状态，有 64 bytes；</span><br><span class="line">7. 磁盘的 MBR 分区方式中，主要与延伸分区最多可以有四个，逻辑分区的装置文件名号码，一定由 5 号开</span><br><span class="line">始；</span><br><span class="line">8. 如果磁盘容量大于 2TB 以上时，系统会自动使用 GPT 分区方式来处理磁盘分区。</span><br><span class="line">9. GPT 分区已经没有延伸与逻辑分区槽的概念，你可以想象成所有的分区都是主分区！</span><br><span class="line">10. 某些操作系统要使用 GPT 分区时，必须要搭配 UEFI 的新型 BIOS 格式才可安装使用。</span><br><span class="line">11. 开机的流程由：BIOS--&gt;MBR--&gt;--&gt;boot loader--&gt;核心文件；</span><br><span class="line">12. boot loader 的功能主要有：提供选单、加载核心、转交控制权给其他 loader</span><br><span class="line">13. boot loader 可以安装的地点有两个，分别是 MBR 与 boot sector</span><br><span class="line">14. Linux 操作系统的文件使用目录树系统，与磁盘的对应需要有『挂载』的动作才行；</span><br><span class="line">15. 新手的简单分区，建议只要有/及 swap 两个分区槽即可</span><br></pre></td></tr></table></figure>

<h3 id="第三章-安装-CentOS7-x"><a href="#第三章-安装-CentOS7-x" class="headerlink" title="第三章 安装 CentOS7.x"></a>第三章 安装 CentOS7.x</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 不论你要安装什么样的 Linux 操作系统角色，都应该要事先规划例如分区、开机管理程序等；</span><br><span class="line">2. 建议练习机安装时的磁盘分区能有/, /boot, /home, swap 四个分区槽；</span><br><span class="line">3. 安装 CentOS 7.x 的模式至少有两种，分别是图形接口与文字接口；</span><br><span class="line">4. CentOS 7 会主动依据你的磁盘容量判断要用 MBR 或 GPT 分区方式，你也可以强迫使用 GPT；</span><br><span class="line">5. 若安装笔记本电脑时失败，可尝试在开机时加入『linux nofb apm=off acpi=off』来关闭省电功能；</span><br><span class="line">6. 安装过程进入分区后，请以『自定义的分区模式』来处理自己规划的分区方式；</span><br><span class="line">7. 在安装的过程中，可以建立逻辑滚动条管理员 (LVM)；</span><br><span class="line">8. 一般要求 swap 应该要是 1.5~2倍的物理内存量，但即使没有 swap 依旧能够安装与运作 Linux 操作系统；</span><br><span class="line">9. CentOS 7 预设使用 xfs 作为文件系统</span><br><span class="line">10. 没有连上 Internet 时，可尝试关闭防火墙，但 SELinux 最好选择『强制』状态；</span><br><span class="line">11. 设定时不要选择启动 kdump，因为那是给核心开发者查阅当机数据的；</span><br><span class="line">12. 可加入时间服务器来同步化时间，台湾可选择 tock.stdtime.gov.tw 这一部；</span><br><span class="line">13. 尽量使用一般用户来操作 Linux，有必要再转身份成为 root 即可。</span><br><span class="line">14. 即使是练习机，在建置 root 密码时，建议依旧能够保持良好的密码规则，不要随便设定！</span><br></pre></td></tr></table></figure>

<h3 id="第四章-首次登入与在线求助"><a href="#第四章-首次登入与在线求助" class="headerlink" title="第四章 首次登入与在线求助"></a>第四章 首次登入与在线求助</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 显示日期的指令： date</span><br><span class="line">2. 显示日历的指令： cal</span><br><span class="line">3. 简单好用的计算器： bc</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">1. 为了避免瞬间断电造成的 Linux 系统危害，建议做为服务器的 Linux 主机应该加上不断电系统来持续提供稳</span><br><span class="line">定的电力；</span><br><span class="line">2. 养成良好的操作习惯，尽量不要使用 root 直接登入系统，应使用一般账号登入系统，有需要再转换身份</span><br><span class="line">3. 可以透过『活动总览』查看系统所有使用的软件及快速启用惯用软件</span><br><span class="line">4. 在 X 的环境下想要『强制』重新启动 X 的组合按键为：『[alt]+[ctrl]+[backspace]』；</span><br><span class="line">5. 预设情况下，Linux 提供 tty1~tty6 的终端机界面；</span><br><span class="line">6. 在终端机环境中，可依据提示字符为$或#判断为一般账号或 root 账号；</span><br><span class="line">7. 取得终端机支持的语系数据可下达『echo $LANG』或『locale』指令；</span><br><span class="line">8. date 可显示日期、cal 可显示日历、bc 可以做为计算器软件；</span><br><span class="line">9. 组合按键中，[tab]按键可做为(1)命令补齐或(2)档名补齐或(3)参数选项补齐，[crtl]-[c]可以中断目前正在运作</span><br><span class="line">中的程序；</span><br><span class="line">10. Linux 系统上的英文大小写为不同的资料</span><br><span class="line">11. 联机帮助系统有 man 及 info 两个常见的指令；</span><br><span class="line">12. man page 说明后面的数字中，1 代表一般账号可用指令，8 代表系统管理员常用指令，5 代表系统配置文件</span><br><span class="line">格式；</span><br><span class="line">13. info page 可将一份说明文件拆成多个节点(node)显示，并具有类似超链接的功能，增加易读性；</span><br><span class="line">14. 系统需正确的关机比较不容易损坏，可使用 shutdown, poweroff 等指令关机。</span><br></pre></td></tr></table></figure>

<h3 id="第五章-Linux-的文件权限与目录配置"><a href="#第五章-Linux-的文件权限与目录配置" class="headerlink" title="第五章 Linux 的文件权限与目录配置"></a>第五章 Linux 的文件权限与目录配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. ls -al ( ll --full-time )</span><br><span class="line">2. chgrp ：改变文件所属群组 [-R]</span><br><span class="line">3. chown ：改变文件拥有者 [-R] </span><br><span class="line">    eg: chown [-R] 账号名称:组名 文件或目录</span><br><span class="line">4. chmod ：改变文件的权限, SUID, SGID, SBIT 等等的特性</span><br><span class="line">    eg: chmod u=rwx,go=rx .bashrc</span><br><span class="line">5. cp 来源文件 目标文件</span><br><span class="line">6. 文件种类： -rwxrwxrwx</span><br><span class="line">    正规文件(regular file )：- 纯文本档(ASCII)/二进制文件(binary)/数据格式文件(data)</span><br><span class="line">    目录(directory)：d</span><br><span class="line">    连结档(link): l</span><br><span class="line">    设备与装置文件(device)：区块(block)设备档 b</span><br><span class="line">                            字符(character)设备文件 c</span><br><span class="line">    资料接口文件(sockets)：s</span><br><span class="line">    数据输送文件(FIFO, pipe)：p</span><br><span class="line">7. uname -r # 查看核心版本</span><br><span class="line">   uname -m # 查看操作系统的位版本</span><br><span class="line">8. yum install redhat-lsb</span><br><span class="line">    lsb_release -a</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">1. Linux 的每个文件中，可分别给予使用者、群组与其他人三种身份个别的 rwx 权限；</span><br><span class="line">2. 群组最有用的功能之一，就是当你在团队开发资源的时候，且每个账号都可以有多个群组的支持；</span><br><span class="line">3. 利用 ls -l 显示的文件属性中，第一个字段是文件的权限，共有十个位，第一个位是文件类型， 接下来三个</span><br><span class="line">为一组共三组，为使用者、群组、其他人的权限，权限有 r,w,x 三种；</span><br><span class="line">4. 如果档名之前多一个『 . 』，则代表这个文件为『隐藏档』；</span><br><span class="line">5. 若需要 root 的权限时，可以使用 su - 这个指令来切换身份。处理完毕则使用 exit 离开 su 的指令环境。</span><br><span class="line">6. 更改文件的群组支持可用 chgrp，修改文件的拥有者可用 chown，修改文件的权限可用 chmod</span><br><span class="line">7. chmod 修改权限的方法有两种，分别是符号法与数字法，数字法中 r,w,x 分数为 4,2,1；</span><br><span class="line">8. 对文件来讲，权限的效能为：</span><br><span class="line">     r：可读取此一文件的实际内容，如读取文本文件的文字内容等；</span><br><span class="line">     w：可以编辑、新增或者是修改该文件的内容(但不含删除该文件)；</span><br><span class="line">     x：该文件具有可以被系统执行的权限。</span><br><span class="line">9. 对目录来说，权限的效能为：</span><br><span class="line">     r (read contents in directory)</span><br><span class="line">     w (modify contents of directory)</span><br><span class="line">     x (access directory)</span><br><span class="line">10. 要开放目录给任何人浏览时，应该至少也要给予 r 及 x 的权限，但 w 权限不可随便给；</span><br><span class="line">11. 能否读取到某个文件内容，跟该文件所在的目录权限也有关系 (目录至少需要有 x 的权限)。</span><br><span class="line">12. Linux 档名的限制为：单一文件或目录的最大容许文件名为 255 个英文字符或 128 个汉字字符；</span><br><span class="line">13. 根据 FHS 的官方文件指出，他们的主要目的是希望让使用者可以了解到已安装软件通常放置于那个目录下</span><br><span class="line">14. FHS 订定出来的四种目录特色为：shareable, unshareable, static, variable 等四类；</span><br><span class="line">15. FHS 所定义的三层主目录为：/, /var, /usr 三层而已；</span><br><span class="line">16. 绝对路径文件名为从根目录 / 开始写起，否则都是相对路径的文件名。</span><br></pre></td></tr></table></figure>

<h3 id="第六章-Linux-文件与目录管理"><a href="#第六章-Linux-文件与目录管理" class="headerlink" title="第六章 Linux 文件与目录管理"></a>第六章 Linux 文件与目录管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. pwd [-P] 显示真实路径, 非link路径</span><br><span class="line">2. mkdir [-mp] m:忽略umask的作用 eg:mkdir -m 777 a</span><br><span class="line">3. rmdir [-p] 目录名称 ps: 只能删除空目录</span><br><span class="line">4. cat  由第一行开始显示文件内容</span><br><span class="line">5. tac  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</span><br><span class="line">6. nl   显示的时候，顺道输出行号！</span><br><span class="line">7. more 一页一页的显示文件内容</span><br><span class="line">8. less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</span><br><span class="line">9. head 只看头几行</span><br><span class="line">10. tail 只看尾巴几行</span><br><span class="line">11. od   以二进制的方式读取文件内容！</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">1. 绝对路径：『一定由根目录 / 写起』；相对路径：『不由 / 写起，而是由相对当前目录写起』</span><br><span class="line">2. 特殊目录有：., .., -, ~, ~account 需要注意；</span><br><span class="line">3. 与目录相关的指令有：cd, mkdir, rmdir, pwd 等重要指令；</span><br><span class="line">4. rmdir 仅能删除空目录，要删除非空目录需使用『 rm -r 』指令；</span><br><span class="line">5. 用户能使用的指令是依据 PATH 变量所规定的目录去搜寻的；</span><br><span class="line">6. ls 可以检视文件的属性，尤其 -d, -a, -l 等选项特别重要！</span><br><span class="line">7. 文件的复制、删除、移动可以分别使用：cp, rm , mv 等指令来操作；</span><br><span class="line">8. 检查文件的内容(读文件)可使用的指令包括有：cat, tac, nl, more, less, head, tail, od 等</span><br><span class="line">9. cat -n 与 nl 均可显示行号，但默认的情况下，空白行会不会编号并不相同；</span><br><span class="line">10. touch 的目的在修改文件的时间参数，但亦可用来建立空文件；</span><br><span class="line">11. 一个文件记录的时间参数有三种，分别是 access time(atime), status time (ctime), modification time(mtime)，ls </span><br><span class="line">默认显示的是 mtime。</span><br><span class="line">12. 除了传统的 rwx 权限之外，在 Ext2/Ext3/Ext4/xfs 文件系统中，还可以使用 chattr 与 lsattr 设定及观察隐藏属</span><br><span class="line">性。 常见的包括只能新增数据的 +a 与完全不能更动文件的 +i 属性。</span><br><span class="line">13. 新建文件/目录时，新文件的预设权限使用 umask 来规范。默认目录完全权限为 drwxrwxrwx， 文件则为</span><br><span class="line">-rw-rw-rw-。</span><br><span class="line">14. 文件具有 SUID 的特殊权限时，代表当用户执行此一 binary 程序时，在执行过程中用户会暂时具有程序拥有</span><br><span class="line">者的权限</span><br><span class="line">15. 目录具有 SGID 的特殊权限时，代表用户在这个目录底下新建的文件之群组都会与该目录的组名相同。</span><br><span class="line">16. 目录具有 SBIT 的特殊权限时，代表在该目录下用户建立的文件只有自己与 root 能够删除！</span><br><span class="line">17. 观察文件的类型可以使用 file 指令来观察；</span><br><span class="line">18. 搜寻指令的完整文件名可用 which 或 type ，这两个指令都是透过 PATH 变量来搜寻文件名；</span><br><span class="line">19. 搜寻文件的完整档名可以使用 whereis 找特定目录或 locate 到数据库去搜寻，而不实际搜寻文件系统；</span><br><span class="line">20. 利用 find 可以加入许多选项来直接查询文件系统，以获得自己想要知道的档名。</span><br></pre></td></tr></table></figure>

<h3 id="第七章-Linux-磁盘与文件系统管理"><a href="#第七章-Linux-磁盘与文件系统管理" class="headerlink" title="第七章 Linux 磁盘与文件系统管理"></a>第七章 Linux 磁盘与文件系统管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  dumpe2fs [-bh] 装置文件名</span><br><span class="line">2. blkid &lt;==这个指令可以叫出目前系统有被格式化的装置</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line"> 一个可以被挂载的数据通常称为『文件系统, filesystem』而不是分区槽 (partition) 喔！</span><br><span class="line"> 基本上 Linux 的传统文件系统为 Ext2 ，该文件系统内的信息主要有：</span><br><span class="line">o superblock：记录此 filesystem 的整体信息，包括 inode/block 的总量、使用量、剩余量， 以及文件</span><br><span class="line">系统的格式与相关信息等；</span><br><span class="line">o inode：记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码；</span><br><span class="line">o block：实际记录文件的内容，若文件太大时，会占用多个 block 。</span><br><span class="line"> Ext2 文件系统的数据存取为索引式文件系统(indexed allocation)</span><br><span class="line"> 需要碎片整理的原因就是文件写入的 block 太过于离散了，此时文件读取的效能将会变的很差所致。 这个</span><br><span class="line">时候可以透过碎片整理将同一个文件所属的 blocks 汇整在一起。</span><br><span class="line"> Ext2 文件系统主要有：boot sector, superblock, inode bitmap, block bitmap, inode table, data block 等六大部分。</span><br><span class="line"> data block 是用来放置文件内容数据地方，在 Ext2 文件系统中所支持的 block 大小有 1K, 2K 及 4K 三</span><br><span class="line">种而已</span><br><span class="line"> inode 记录文件的属性/权限等数据，其他重要项目为： 每个 inode 大小均为固定，有 128/256bytes 两种</span><br><span class="line">基本容量。每个文件都仅会占用一个 inode 而已； 因此文件系统能够建立的文件数量与 inode 的数量有</span><br><span class="line">关；</span><br><span class="line"> 文件的 block 在记录文件的实际数据，目录的 block 则在记录该目录底下文件名与其 inode 号码的对照表；</span><br><span class="line"> 日志式文件系统 (journal) 会多出一块记录区，随时记载文件系统的主要活动，可加快系统复原时间；</span><br><span class="line"> Linux 文件系统为增加效能，会让主存储器作为大量的磁盘高速缓存；</span><br><span class="line"> 实体链接只是多了一个文件名对该 inode 号码的链接而已；</span><br><span class="line"> 符号链接就类似 Windows 的快捷方式功能。</span><br><span class="line"> 磁盘的使用必需要经过：分区、格式化与挂载，分别惯用的指令为：gdisk, mkfs, mount 三个指令</span><br><span class="line"> 分区时，应使用 parted 检查分区表格式，再判断使用 fdisk/gdisk 来分区，或直接使用 parted 分区</span><br><span class="line"> 为了考虑效能，XFS 文件系统格式化时，可以考虑加上 agcount/su/sw/extsize 等参数较佳</span><br><span class="line"> 如果磁盘已无未分区的容量，可以考虑使用大型文件取代磁盘装置的处理方式，透过 dd 与格式化功能。</span><br><span class="line"> 开机自动挂载可参考/etc/fstab 之设定，设定完毕务必使用 mount -a 测试语法正确否；</span><br></pre></td></tr></table></figure>

<h3 id="第八章-文件与文件系统的压缩-打包与备份"><a href="#第八章-文件与文件系统的压缩-打包与备份" class="headerlink" title="第八章 文件与文件系统的压缩,打包与备份"></a>第八章 文件与文件系统的压缩,打包与备份</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结:</span><br><span class="line">1. 压缩指令为透过一些运算方法去将原本的文件进行压缩，以减少文件所占用的磁盘容量。 压缩前与压缩后</span><br><span class="line">的文件所占用的磁盘容量比值， 就可以被称为是『压缩比』</span><br><span class="line"> 压缩的好处是可以减少磁盘容量的浪费，在 WWW 网站也可以利用文件压缩的技术来进行数据的传送，好</span><br><span class="line">让网站带宽的可利用率上升喔</span><br><span class="line"> 压缩文件案的扩展名大多是：『*.gz, *.bz2, *.xz, *.tar, *.tar.gz, *.tar.bz2, *.tar.xz』</span><br><span class="line"> 常见的压缩指令有 gzip, bzip2, xz。压缩率最佳的是 xz，若可以不计时间成本，建议使用 xz 进行压缩。</span><br><span class="line"> tar 可以用来进行文件打包，并可支持 gzip, bzip2, xz 的压缩。</span><br><span class="line"> 压 缩：tar -Jcv -f filename.tar.xz 要被压缩的文件或目录名称</span><br><span class="line"> 查 询：tar -Jtv -f filename.tar.xz</span><br><span class="line"> 解压缩：tar -Jxv -f filename.tar.xz -C 欲解压缩的目录</span><br><span class="line"> xfsdump 指令可备份文件系统或单一目录</span><br><span class="line"> xfsdump 的备份若针对文件系统时，可进行 0-9 的 level 差异备份！其中 level 0 为完整备份；</span><br><span class="line"> xfsrestore 指令可还原被 xfsdump 建置的备份档；</span><br><span class="line"> 要建立光盘刻录数据时，可透过 mkisofs 指令来建置；</span><br><span class="line"> 可透过 wodim 来写入 CD 或 DVD 刻录机</span><br><span class="line"> dd 可备份完整的 partition 或 disk ，因为 dd 可读取磁盘的 sector 表面数据</span><br><span class="line"> cpio 为相当优秀的备份指令，不过必须要搭配类似 find 指令来读入欲备份的文件名数据，方可进行备份动</span><br><span class="line">作。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>workerman学习笔记</title>
    <url>/projects/3059268860/</url>
    <content><![CDATA[<h1 id="workerman学习笔记"><a href="#workerman学习笔记" class="headerlink" title="workerman学习笔记"></a>workerman学习笔记</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Workerman, 高性能socket框架.</p>
<p>Workerman是一款纯PHP开发的开源高性能的PHP socket 服务框架。</p>
<p>Workerman每个进程能维持上万并发连接。</p>
<p>同时支持TCP、UDP、UNIXSOCKET，支持长连接，支持Websocket、HTTP、WSS、HTTPS等通讯协议以及各种自定义协议。拥有定时器、异步socket客户端、异步Mysql、异步Redis、异步Http、异步消息队列等众多高性能组件。</p>
<h3 id="应用方向"><a href="#应用方向" class="headerlink" title="应用方向"></a>应用方向</h3><p>1、即时通讯类</p>
<p>2、物联网类</p>
<p>3、游戏服务器类</p>
<p>4、HTTP服务</p>
<p>5、SOA服务化</p>
<p>6、其它服务器软件</p>
<p>7、中间件</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Worker是WorkerMan中最基本容器, 采用Epoll(需要装event扩展)+非阻塞IO，每个Worker进程都能上万的客户端连接，并处理这些连接上发来的数据。</p>
<p>主进程与worker子进程关系[<a href="https://wenda.workerman.net/uploads/answer/20140815/5670ea17653a1a6e6811ed5148f77c96.png]">https://wenda.workerman.net/uploads/answer/20140815/5670ea17653a1a6e6811ed5148f77c96.png]</a></p>
<h2 id="开发必读"><a href="#开发必读" class="headerlink" title="开发必读"></a>开发必读</h2><p><strong>1、windows环境限制</strong></p>
<p><strong>2、workerman不依赖apache或者nginx</strong></p>
<p><strong>3、workerman是命令行启动的</strong></p>
<p><strong>4、长连接必须加心跳</strong></p>
<p><strong>5、客户端和服务端协议一定要对应才能通讯</strong></p>
<p><strong>6、连接失败可能的原因</strong></p>
<p><strong>7、不要使用exit die sleep语句</strong></p>
<p><strong>8、不要使用pcntl_fork函数</strong></p>
<p><strong>9、业务代码里不要有死循环</strong></p>
<p><strong>10、改代码要重启</strong></p>
<p><strong>11、长连接应用建议用GatewayWorker框架</strong></p>
<p><strong>12、支持更高并发</strong></p>
<h2 id="入门指引"><a href="#入门指引" class="headerlink" title="入门指引"></a>入门指引</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>1、纯PHP开发</p>
<p>2、支持PHP多进程</p>
<p>3、支持TCP、UDP</p>
<p>4、支持长连接</p>
<p>5、支持各种应用层协议</p>
<p>6、支持高并发</p>
<p>7、支持服务平滑重启</p>
<p>8、支持文件更新检测及自动加载</p>
<p>9、支持以指定用户运行子进程</p>
<p>10、支持对象或者资源永久保持</p>
<p>11、高性能</p>
<p>12、支持HHVM</p>
<p>13、支持分布式部署</p>
<p>14、支持守护进程化</p>
<p>15、支持多端口监听</p>
<p>16、支持标准输入输出重定向</p>
<h3 id="简单的开发示例"><a href="#简单的开发示例" class="headerlink" title="简单的开发示例"></a>简单的开发示例</h3><p><strong>创建http_test.php文件</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/Workerman/Autoloader.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Worker监听2345端口，使用http协议通讯</span></span><br><span class="line"><span class="variable">$http_worker</span> = <span class="keyword">new</span> Worker(<span class="string">&quot;http://0.0.0.0:2345&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动4个进程对外提供服务</span></span><br><span class="line"><span class="variable">$http_worker</span>-&gt;count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到浏览器发送的数据时回复hello world给浏览器</span></span><br><span class="line"><span class="variable">$http_worker</span>-&gt;onMessage = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$connection</span>, <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 向浏览器发送hello world</span></span><br><span class="line">    <span class="variable">$connection</span>-&gt;send(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行worker</span></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php http_test.php start</span><br></pre></td></tr></table></figure>

<p>…</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Composer安装：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require workerman/workerman</span><br></pre></td></tr></table></figure>

<p><strong>Git安装：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/walkor/Workerman</span><br></pre></td></tr></table></figure>

<p>Linux系统环境检测</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -Ss http://www.workerman.net/check.php | php</span><br></pre></td></tr></table></figure>

<p>安装pcntl和posix扩展：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install php-process</span><br></pre></td></tr></table></figure>

<p>安装event扩展</p>
<p>参考: <a href="https://amon.org/php-sysvsem">https://amon.org/php-sysvsem</a></p>
<h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>以debug（调试）方式启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php start</span><br></pre></td></tr></table></figure>

<p>以daemon（守护进程）方式启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php start -d</span><br></pre></td></tr></table></figure>

<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php stop</span><br></pre></td></tr></table></figure>

<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php restart</span><br></pre></td></tr></table></figure>

<h4 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php reload</span><br></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php status</span><br></pre></td></tr></table></figure>

<h4 id="查看连接状态（需要Workerman版本-gt-3-5-0）"><a href="#查看连接状态（需要Workerman版本-gt-3-5-0）" class="headerlink" title="查看连接状态（需要Workerman版本&gt;=3.5.0）"></a>查看连接状态（需要Workerman版本&gt;=3.5.0）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php start.php connections</span><br></pre></td></tr></table></figure>

<h2 id="Worker类"><a href="#Worker类" class="headerlink" title="Worker类"></a>Worker类</h2><p>WorkerMan中有两个重要的类Worker与Connection。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Worker::__construct([<span class="keyword">string</span> <span class="variable">$listen</span> , <span class="keyword">array</span> <span class="variable">$context</span>])</span><br><span class="line"><span class="variable">$listen</span> （可选参数，不填写表示不监听任何端口）</span><br><span class="line">    &lt;协议&gt; 可以为以下格式：</span><br><span class="line">    tcp: 例如 tcp:<span class="comment">//0.0.0.0:8686</span></span><br><span class="line">	udp: 例如 udp:<span class="comment">//0.0.0.0:8686</span></span><br><span class="line">	unix: 例如 unix:<span class="comment">///tmp/my_file(需要Workerman&gt;=3.2.7)</span></span><br><span class="line">	http: 例如 http:<span class="comment">//0.0.0.0:80</span></span><br><span class="line">	websocket: 例如 websocket:<span class="comment">//0.0.0.0:8686</span></span><br><span class="line">	text: 例如 text:<span class="comment">//0.0.0.0:8686(text是Workerman内置的文本协议，兼容telnet，详情参见附录Text协议部分)</span></span><br><span class="line">	以及其他自定义协议，参见本手册定制通讯协议部分</span><br><span class="line">    &lt;监听地址&gt; 可以为以下格式：</span><br><span class="line">	如果是unix套接字，地址为本地一个磁盘路径</span><br><span class="line">	非unix套接字，地址格式为 &lt;本机ip&gt;:&lt;端口号&gt;</span><br><span class="line"><span class="variable">$context</span> 一个数组。用于传递socket的上下文选项，参见套接字上下文选项</span><br><span class="line">    http:<span class="comment">//php.net/manual/zh/context.socket.php</span></span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>当前worker进程的id编号，范围为<code>0</code>到<code>$worker-&gt;count-1</code>。</p>
<p>进程重启后id编号值是不变的。</p>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>设置当前Worker实例启动多少个进程，不设置时默认为1。</p>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>设置当前Worker实例的名称，方便运行status命令时识别进程。不设置时默认为none。</p>
<h4 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h4><p>设置当前Worker实例的协议类。</p>
<h4 id="transport"><a href="#transport" class="headerlink" title="transport"></a>transport</h4><p>设置当前Worker实例所使用的传输层协议，目前只支持3种(tcp、udp、ssl)。不设置默认为tcp。</p>
<h4 id="reusePort"><a href="#reusePort" class="headerlink" title="reusePort"></a>reusePort</h4><p>设置当前worker是否开启监听端口复用(socket的SO_REUSEPORT选项)。</p>
<p>开启监听端口复用后允许多个无亲缘关系的进程监听相同的端口，并且由系统内核做负载均衡，决定将socket连接交给哪个进程处理，避免了惊群效应，可以提升多进程短连接应用的性能。</p>
<p>从workerman 3.5.21版本开始默认开启此选项。之前版本需要手动设置<code>Worker::$reusePort=true;</code>开启。</p>
<h4 id="connections"><a href="#connections" class="headerlink" title="connections"></a>connections</h4><p>此属性中存储了<strong>当前进程</strong>的所有的客户端连接对象，其中id为connection的id编号，详情见手册<a href="http://doc3.workerman.net/315338">TcpConnection的id属性</a>。</p>
<h4 id="stdoutFile"><a href="#stdoutFile" class="headerlink" title="stdoutFile"></a>stdoutFile</h4><p>此属性为全局静态属性，如果以守护进程方式(<code>-d</code>启动)运行，则所有向终端的输出(echo var_dump等)都会被重定向到stdoutFile指定的文件中。</p>
<h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p>设置当前Worker实例以哪个用户运行。此属性只有当前用户为root时才能生效。不设置时默认以当前用户运行。</p>
<p>建议<code>$user</code>设置权限较低的用户，例如www-data、apache、nobody等。</p>
<h4 id="reloadable"><a href="#reloadable" class="headerlink" title="reloadable"></a>reloadable</h4><p>设置当前Worker实例是否可以reload，即收到reload信号后是否退出重启。不设置默认为true，收到reload信号后自动重启进程。</p>
<p>有些进程维持着客户端连接，例如Gateway/Worker模型中的gateway进程，当运行reload重新载入业务代码时，却又不想客户端连接断开，则设置gateway进程的reloadable属性为false</p>
<h4 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h4><p>此属性为全局静态属性，表示是否以daemon(守护进程)方式运行。如果启动命令使用了 <code>-d</code>参数，则该属性会自动设置为true。也可以代码中手动设置。</p>
<h3 id="回调属性"><a href="#回调属性" class="headerlink" title="回调属性"></a>回调属性</h3><h4 id="onWorkerStart"><a href="#onWorkerStart" class="headerlink" title="onWorkerStart"></a>onWorkerStart</h4><p>设置Worker子进程启动时的回调函数，每个子进程启动时都会执行。</p>
<p>回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$worker</span><br></pre></td></tr></table></figure>

<h4 id="onWorkerReload"><a href="#onWorkerReload" class="headerlink" title="onWorkerReload"></a>onWorkerReload</h4><p>此特性不常用到。</p>
<p>设置Worker收到reload信号后执行的回调。</p>
<p>可以利用onWorkerReload回调做很多事情，例如在不需要重启进程的情况下重新加载业务配置文件。</p>
<p>回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$worker</span><br></pre></td></tr></table></figure>

<h4 id="onConnect"><a href="#onConnect" class="headerlink" title="onConnect"></a>onConnect</h4><p>当客户端与Workerman建立连接时(TCP三次握手完成后)触发的回调函数。每个连接只会触发一次<code>onConnect</code>回调。</p>
<p>回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$connection</span><br></pre></td></tr></table></figure>

<p>连接对象，即<a href="http://doc3.workerman.net/315157">TcpConnection实例</a>，用于操作客户端连接，如<a href="http://doc3.workerman.net/315165">发送数据</a>，<a href="http://doc3.workerman.net/315168">关闭连接</a>等</p>
<h4 id="onMessage"><a href="#onMessage" class="headerlink" title="onMessage"></a>onMessage</h4><p>当客户端通过连接发来数据时(Workerman收到数据时)触发的回调函数</p>
<p>回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$connection</span><br></pre></td></tr></table></figure>

<p>连接对象，即<a href="http://doc3.workerman.net/315157">TcpConnection实例</a>，用于操作客户端连接，如<a href="http://doc3.workerman.net/315165">发送数据</a>，<a href="http://doc3.workerman.net/315168">关闭连接</a>等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data</span><br></pre></td></tr></table></figure>

<p>客户端连接上发来的数据，如果Worker指定了协议，则$data是对应协议decode（解码）了的数据</p>
<h4 id="onClose"><a href="#onClose" class="headerlink" title="onClose"></a>onClose</h4><p>当客户端连接与Workerman断开时触发的回调函数。不管连接是如何断开的，只要断开就会触发<code>onClose</code>。每个连接只会触发一次<code>onClose</code>。</p>
<p>回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$connection</span><br></pre></td></tr></table></figure>

<p>连接对象，即<a href="http://doc3.workerman.net/315157">TcpConnection实例</a>，用于操作客户端连接，如<a href="http://doc3.workerman.net/315165">发送数据</a>，<a href="http://doc3.workerman.net/315168">关闭连接</a>等</p>
<h4 id="onError"><a href="#onError" class="headerlink" title="onError"></a>onError</h4><p>当客户端的连接上发生错误时触发。</p>
<p>回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$connection</span><br></pre></td></tr></table></figure>

<p>连接对象，即<a href="http://doc3.workerman.net/315157">TcpConnection实例</a>，用于操作客户端连接，如<a href="http://doc3.workerman.net/315165">发送数据</a>，<a href="http://doc3.workerman.net/315168">关闭连接</a>等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$code</span><br></pre></td></tr></table></figure>

<p>错误码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$msg</span><br></pre></td></tr></table></figure>

<p>错误消息</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="runAll"><a href="#runAll" class="headerlink" title="runAll"></a>runAll</h4><p>运行所有Worker实例。</p>
<h4 id="stopAll"><a href="#stopAll" class="headerlink" title="stopAll"></a>stopAll</h4><p>停止当前进程（子进程）的所有Worker实例并退出。</p>
<p>此方法用于安全退出当前子进程，作用相当于调用exit/die退出当前子进程。</p>
<p>与直接调用exit/die区别是，直接调用exit或者die无法触发onWorkerStop回调，并且会导致一条WORKER EXIT UNEXPECTED错误日志。</p>
<h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h4><p>用于实例化Worker后执行监听。</p>
<p>此方法主要用于在Worker进程启动后动态创建新的Worker实例，能够实现同一个进程监听多个端口，支持多种协议。需要注意的是用这种方法只是在当前进程增加监听，并不会动态创建新的进程，也不会触发onWorkerStart方法。</p>
<h2 id="TcpConnection类"><a href="#TcpConnection类" class="headerlink" title="TcpConnection类"></a>TcpConnection类</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><h4 id="id-1"><a href="#id-1" class="headerlink" title="id"></a>id</h4><p>连接的id。这是一个自增的整数。</p>
<h4 id="protocol-1"><a href="#protocol-1" class="headerlink" title="protocol"></a>protocol</h4><p>设置当前连接的协议类</p>
<h4 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h4><p>此属性为只读属性，即当前connection对象所属的worker实例</p>
<h4 id="maxSendBufferSize"><a href="#maxSendBufferSize" class="headerlink" title="maxSendBufferSize"></a>maxSendBufferSize</h4><h4 id="defaultMaxSendBufferSize"><a href="#defaultMaxSendBufferSize" class="headerlink" title="defaultMaxSendBufferSize"></a>defaultMaxSendBufferSize</h4><h4 id="maxPackageSize"><a href="#maxPackageSize" class="headerlink" title="maxPackageSize"></a>maxPackageSize</h4><h3 id="回调属性-1"><a href="#回调属性-1" class="headerlink" title="回调属性"></a>回调属性</h3><h4 id="onMessage-1"><a href="#onMessage-1" class="headerlink" title="onMessage"></a>onMessage</h4><p>作用与<a href="http://doc3.workerman.net/315148">Worker::$onMessage</a>回调相同，区别是只针对当前连接有效，也就是可以针对某个连接的设置onMessage回调。</p>
<h4 id="onClose-1"><a href="#onClose-1" class="headerlink" title="onClose"></a>onClose</h4><p>此回调与<a href="http://doc3.workerman.net/315149">Worker::$onClose</a>回调作用相同，区别是只针对当前连接有效,也就是可以针对某个连接的设置onClose回调。</p>
<h4 id="onBufferFull"><a href="#onBufferFull" class="headerlink" title="onBufferFull"></a>onBufferFull</h4><p>作用与<a href="http://doc3.workerman.net/315150">Worker::$onBufferFull</a>回调相同，区别是只针对当前连接起作用，即可以单独设置某个连接的onBufferFull回调</p>
<h4 id="onBufferDrain"><a href="#onBufferDrain" class="headerlink" title="onBufferDrain"></a>onBufferDrain</h4><p>作用与<a href="http://doc3.workerman.net/315151">Worker::$onBufferDrain</a>回调相同，区别是只针对当前连接起作用，即可以单独设置某个连接的onBufferDrain回调</p>
<h4 id="onError-1"><a href="#onError-1" class="headerlink" title="onError"></a>onError</h4><p>作用与<a href="http://doc3.workerman.net/315152">Worker::$onError</a>回调相同，区别是只针对当前连接起作用，即可以单独设置某个连接的onError回调</p>
<h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><h4 id="send"><a href="#send" class="headerlink" title="send"></a>send</h4><p>向客户端发送数据</p>
<p>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data</span><br></pre></td></tr></table></figure>

<p>要发送的数据，如果在初始化Worker类时指定了协议，则会自动调用协议的encode方法,完成协议打包工作后发送给客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$raw</span><br></pre></td></tr></table></figure>

<p>是否发送原始数据，即不调用协议的encode方法，默认是false，即自动调用协议的encode方法</p>
<h4 id="getRemoteIp"><a href="#getRemoteIp" class="headerlink" title="getRemoteIp"></a>getRemoteIp</h4><p>获得该连接的客户端ip</p>
<h4 id="getRemotePort"><a href="#getRemotePort" class="headerlink" title="getRemotePort"></a>getRemotePort</h4><p>获得该连接的客户端端口</p>
<h4 id="close"><a href="#close" class="headerlink" title="close"></a>close</h4><p>安全的关闭连接.</p>
<p>调用close会等待发送缓冲区的数据发送完毕后才关闭连接，并触发连接的<code>onClose</code>回调</p>
<p>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data</span><br></pre></td></tr></table></figure>

<p>可选参数，要发送的数据（如果有指定协议，则会自动调用协议的encode方法打包<code>$data</code>数据），当数据发送完毕后关闭连接，随后会触发onClose回调</p>
<h4 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h4><p>立刻关闭连接。</p>
<p>与close不同之处是，调用destroy后即使该连接的发送缓冲区还有数据未发送到对端，连接也会立刻被关闭，并立刻触发该连接的<code>onClose</code>回调。</p>
<h4 id="pauseRecv"><a href="#pauseRecv" class="headerlink" title="pauseRecv"></a>pauseRecv</h4><p>使当前连接停止接收数据。该连接的onMessage回调将不会被触发。此方法对于上传流量控制非常有用</p>
<h4 id="resumeRecv"><a href="#resumeRecv" class="headerlink" title="resumeRecv"></a>resumeRecv</h4><p>使当前连接继续接收数据。此方法与Connection::pauseRecv配合使用，对于上传流量控制非常有用</p>
<h4 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h4><p>将当前连接的数据流导入到目标连接。内置了流量控制。此方法做TCP代理非常有用</p>
<h2 id="AsyncTcpConnection类"><a href="#AsyncTcpConnection类" class="headerlink" title="AsyncTcpConnection类"></a>AsyncTcpConnection类</h2><p>异步</p>
<h3 id="construct-方法"><a href="#construct-方法" class="headerlink" title="__construct 方法"></a>__construct 方法</h3><p>创建一个异步连接对象。</p>
<p>目前AsyncTcpConnection支持的协议有<a href="http://baike.baidu.com/subview/32754/8048820.htm">tcp</a>、<a href="http://baike.baidu.com/view/525499.htm">ssl</a>、<a href="http://doc3.workerman.net/appendices/about-ws.md">ws</a>、<a href="http://doc3.workerman.net/appendices/about-frame.md">frame</a>、<a href="http://doc3.workerman.net/appendices/about-text.md">text</a>。</p>
<h3 id="connect-方法"><a href="#connect-方法" class="headerlink" title="connect 方法"></a>connect 方法</h3><p>执行异步连接操作。此方法会立刻返回。</p>
<h3 id="reConnect-方法"><a href="#reConnect-方法" class="headerlink" title="reConnect 方法"></a>reConnect 方法</h3><p>重连。一般在<code>onClose</code>回调中调用，实现断线重连。</p>
<p>由于网络问题或者对方服务重启等原因导致连接断开，则可以通过调用此方法实现重连。</p>
<p>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$delay</span><br></pre></td></tr></table></figure>

<p>延迟多久后执行重连。单位为秒，支持小数，可精确到毫秒。</p>
<p>如果不传或者值为0则代表立即重连。</p>
<p>最好传递参数让重连延迟执行，避免因为对端服务问题一直不可连导致本机cpu消耗过高。</p>
<h3 id="transport属性"><a href="#transport属性" class="headerlink" title="transport属性"></a>transport属性</h3><p>设置传输属性，可选值为 <a href="http://baike.baidu.com/subview/32754/8048820.htm">tcp</a> 和 <a href="http://baike.baidu.com/view/525499.htm">ssl</a>，默认是tcp。</p>
<p>transport为 <a href="http://baike.baidu.com/view/525499.htm">ssl</a> 时，要求PHP必须安装<a href="http://php.net/manual/zh/book.openssl.php">openssl扩展</a>。</p>
<p>当把Workerman作为客户端向服务端发起ssl加密连接(https连接、wss连接等)时请设置此选项为<code>ssl</code>，</p>
<h2 id="AsyncUdpConnection类"><a href="#AsyncUdpConnection类" class="headerlink" title="AsyncUdpConnection类"></a>AsyncUdpConnection类</h2><p>AsyncUdpConnection可以作为udp客户端与远程udp服务端进行通讯。</p>
<p>其实udp是无连接的，但是为了易用性，这里与AsyncTcpConnection命名规则和接口保持基本一致。</p>
<p><strong>注意：与AsyncTcpConnection不同，AsyncUdpConnection不支持以下属性或者方法。</strong></p>
<ol>
<li>没有connection-&gt;id属性</li>
<li>没有connection-&gt;worker属性</li>
<li>没有connection-&gt;transport属性</li>
<li>没有connection-&gt;maxSendBufferSize属性</li>
<li>没有connection-&gt;defaultMaxSendBufferSize属性</li>
<li>没有connection-&gt;maxPackageSize属性</li>
<li>没有connection-&gt;onBufferFull回调</li>
<li>没有connection-&gt;onBufferDrain回调</li>
<li>没有connection-&gt;onError回调</li>
<li>没有connection-&gt;destroy()接口</li>
<li>没有connection-&gt;pauseRecv()接口</li>
<li>没有connection-&gt;resumeRecv()接口</li>
<li>没有connection-&gt;pipe()接口</li>
<li>没有connection-&gt;reconnect()接口</li>
</ol>
<p><strong>AsyncUdpConnection支持的属性或者方法</strong><br>1.支持connection-&gt;protocol属性<br>2.支持connection-&gt;onMessage回调<br>3.支持connection-&gt;connect()方法<br>4.支持connection-&gt;send()方法<br>5.支持connection-&gt;getRemoteIp()方法<br>6.支持connection-&gt;getRemotePort()方法<br>7.支持connection-&gt;onClose回调。<br>注意：因为tcp是基于连接的，一般情况下，当任何一方调用close断开连接时双方都能触发onClose。但是udp是无连接的，调用connection-&gt;close()方法只能触发本地的onClose回调，无法触发对端的onClose回调。</p>
<h3 id="construct-方法-1"><a href="#construct-方法-1" class="headerlink" title="__construct 方法"></a>__construct 方法</h3><p>创建一个udp连接对象。</p>
<p>AsyncUdpConnection可以让Workerman作为客户端与远程服务端传输udp数据。</p>
<h3 id="connect-方法-1"><a href="#connect-方法-1" class="headerlink" title="connect 方法"></a>connect 方法</h3><p>执行异步连接操作。此方法会立刻返回。</p>
<h3 id="send-方法"><a href="#send-方法" class="headerlink" title="send 方法"></a>send 方法</h3><p>执行异步连接操作。此方法会立刻返回。</p>
<p>参数</p>
<p><code>$data</code><br>向服务端发送的数据，数据大小不能超过65507字节(udp单个数据包最大传输大小为65507字节)，否则会发送失败。</p>
<h3 id="close-1"><a href="#close-1" class="headerlink" title="close"></a>close</h3><p>安全的关闭连接，并触发连接的<code>onClose</code>回调。</p>
<p>虽然udp是无连接的，但是对应的AsyncUdpConnection对象却是一直保留在内存中，必须调用close方法才可以释放掉对应的udp连接对象，否则这个udp连接对象会一直存在于内存中，造成内存泄漏。</p>
<p>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data</span><br></pre></td></tr></table></figure>

<p>可选参数，要发送的数据（如果有指定协议，则会自动调用协议的encode方法打包<code>$data</code>数据），当数据发送完毕后关闭连接，随后会触发onClose回调。</p>
<p>数据大小不能超过65507字节，否则会发送失败。</p>
<h2 id="Timer定时器类"><a href="#Timer定时器类" class="headerlink" title="Timer定时器类"></a>Timer定时器类</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>定时执行某个函数或者类方法。</p>
<p>注意：定时器是在当前进程中运行的，workerman中不会创建新的进程或者线程去运行定时器。</p>
<p>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">time_interval</span><br></pre></td></tr></table></figure>

<p>多长时间执行一次，单位秒，支持小数，可以精确到0.001，即精确到毫秒级别。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">callback</span><br></pre></td></tr></table></figure>

<p>回调函数<code>注意：如果回调函数是类的方法，则方法必须是public属性</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">args</span><br></pre></td></tr></table></figure>

<p>回调函数的参数，必须为数组，数组元素为参数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">persistent</span><br></pre></td></tr></table></figure>

<p>是否是持久的，如果只想定时执行一次，则传递false（只执行一次的任务在执行完毕后会自动销毁，不必调用<code>Timer::del()</code>）。默认是true，即一直定时执行。</p>
<p>返回值</p>
<p>返回一个整数，代表计时器的timerid，可以通过调用<code>Timer::del($timerid)</code>销毁这个计时器。</p>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p>删除某个定时器</p>
<p>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timer_id</span><br></pre></td></tr></table></figure>

<p>定时器的id，即add接口返回的整型</p>
<p>返回值</p>
<p>boolean</p>
<h3 id="定时器注意事项"><a href="#定时器注意事项" class="headerlink" title="定时器注意事项"></a>定时器注意事项</h3><p>1、只能在<code>onXXXX</code>回调中添加定时器。全局的定时器推荐在<code>onWorkerStart</code>回调中设置，针对某个连接的定时器推荐在<code>onConnect</code>中设置。</p>
<p>2、添加的定时任务在当前进程执行(不会启动新的进程或者线程)，如果任务很重（特别是涉及到网络IO的任务），可能会导致该进程阻塞，暂时无法处理其它业务。所以最好将耗时的任务放到单独的进程运行，例如建立一个/多个Worker进程运行</p>
<p>3、当前进程忙于其它业务时或者当一个任务没有在预期的时间运行完，这时又到了下一个运行周期，则会等待当前任务完成才会运行，这会导致定时器没有按照预期时间间隔运行。也就是说当前进程的业务都是串行执行的，如果是多进程则进程间的任务运行是并行的。</p>
<p>4、需要注意多进程设置了定时任务造可能会造成并发问题，</p>
<p>5、可能会有1毫秒左右的误差。</p>
<p>6、定时器不能跨进程删除，例如a进程设置的定时器无法在b进程直接调用Timer::del接口删除</p>
<p>7、不同进程间的定时器id可能会重复，但是同一个进程内产生的定时器id不会重复</p>
<h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>除了定时器Timer，workerman提供了crontab组件，使用规则类似linux的crontab，支持秒级别定时。</p>
<p>参见：<a href="http://doc3.workerman.net/1993516">Crontab定时任务组件</a></p>
<h2 id="Http服务"><a href="#Http服务" class="headerlink" title="Http服务"></a>Http服务</h2><p>workerman从4.x版本开始加强了HTTP服务的支持。引入了请求类、响应类、session类以及<a href="http://doc3.workerman.net/1556733">SSE</a>。如果你想使用workerman的HTTP服务，强烈推荐使用workerman4.x或者以后的更高版本。</p>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求对象一律在onMessage回调函数中获取，框架会自动将Request对象通过回调函数第二个参数传递进来。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$worker</span>-&gt;onMessage = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$connection</span>, <span class="variable">$request</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://doc3.workerman.net/1547048">点击查看</a></p>
<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h3 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h3><h3 id="session管理"><a href="#session管理" class="headerlink" title="session管理"></a>session管理</h3><h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3>]]></content>
  </entry>
  <entry>
    <title>phalapi框架学习笔记</title>
    <url>/projects/644540286/</url>
    <content><![CDATA[<h1 id="1-快速开发"><a href="#1-快速开发" class="headerlink" title="1 快速开发"></a>1 快速开发</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><h3 id="composer一键安装"><a href="#composer一键安装" class="headerlink" title="composer一键安装"></a>composer一键安装</h3><p><code>composer create-project phalapi/phalapi</code></p>
<h3 id="手动下载安装"><a href="#手动下载安装" class="headerlink" title="手动下载安装"></a>手动下载安装</h3><p>下载 <a href="https://github.com/phalapi/phalapi/tree/master-2x">phalapi</a> 项目<strong>master-2x分支</strong></p>
<p><code>composer update</code></p>
<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启URI路由匹配</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment">#       try_files $uri $uri/ /?$args;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># if (!-e $request_filename) &#123;</span></span><br><span class="line">    <span class="comment">#        rewrite ^/(.*)$ /index.php last;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="1-2-运行Hello-world"><a href="#1-2-运行Hello-world" class="headerlink" title="1.2 运行Hello world"></a>1.2 运行Hello world</h2><p><a href="http://docs.phalapi.net/#/v2.0/hello-world">点击此处</a></p>
<h2 id="1-3-如何请求接口服务"><a href="#1-3-如何请求接口服务" class="headerlink" title="1.3 如何请求接口服务"></a>1.3 如何请求接口服务</h2><p><a href="http://docs.phalapi.net/#/v2.0/how-to-request?id=%e5%bc%80%e5%90%afuri%e8%b7%af%e7%94%b1%e5%8c%b9%e9%85%8d">开启url匹配</a></p>
<p><a href="http://docs.phalapi.net/#/v2.0/how-to-request?id=%E6%89%A9%E5%B1%95%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F%EF%BC%9F">扩展：如何定制接口服务的传递方式？</a></p>
<h2 id="1-4-接口响应与在线调试"><a href="#1-4-接口响应与在线调试" class="headerlink" title="1.4 接口响应与在线调试"></a>1.4 接口响应与在线调试</h2><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>在<code>./config/di.php</code>后面的位置添加</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许跨域</span></span><br><span class="line"><span class="variable">$response</span> = \PhalApi\DI()-&gt;response;</span><br><span class="line"><span class="variable">$response</span>-&gt;addHeaders(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>); <span class="comment">// *代表允许任何网址请求</span></span><br><span class="line"><span class="comment">// $response-&gt;addHeaders(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;www.phalapi.net&#x27;); // 推荐指定网站</span></span><br><span class="line"><span class="variable">$response</span>-&gt;addHeaders(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST,GET,OPTIONS,DELETE&#x27;</span>); <span class="comment">// 允许请求的类型</span></span><br><span class="line"><span class="variable">$response</span>-&gt;addHeaders(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>); <span class="comment">// 设置是否允许发送 cookies</span></span><br><span class="line"><span class="variable">$response</span>-&gt;addHeaders(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type,Content-Length,Accept-Encoding,X-Requested-with, Origin&#x27;</span>); <span class="comment">// 设置允许自定义请求头的字段</span></span><br></pre></td></tr></table></figure>

<h3 id="在线调试"><a href="#在线调试" class="headerlink" title="在线调试"></a>在线调试</h3><ul>
<li><strong>单次请求开启调试</strong>：默认添加请求参数<code>&amp;__debug__=1</code></li>
<li><strong>全部请求开启调试</strong>：把配置文件<code>./config/sys.php</code>文件中的配置改成<code>&#39;debug&#39; =&gt; true,</code></li>
</ul>
<h3 id="自定义埋点"><a href="#自定义埋点" class="headerlink" title="自定义埋点"></a>自定义埋点</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加纪录埋点，并指定节点标识</span></span><br><span class="line">PhalApi\DI()-&gt;tracer-&gt;mark(<span class="string">&#x27;DO_SOMETHING&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="自定义调试信息"><a href="#自定义调试信息" class="headerlink" title="自定义调试信息"></a>自定义调试信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="string">&#x27;this is x&#x27;</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="keyword">array</span>(<span class="string">&#x27;this is y&#x27;</span>);</span><br><span class="line">\PhalApi\DI()-&gt;response-&gt;setDebug(<span class="string">&#x27;XXX_x&#x27;</span>, <span class="variable">$x</span>); <span class="comment">// XXX扩展</span></span><br><span class="line">\PhalApi\DI()-&gt;response-&gt;setDebug(<span class="string">&#x27;XXX_y&#x27;</span>, <span class="variable">$y</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-5-Api接口层"><a href="#1-5-Api接口层" class="headerlink" title="1.5 Api接口层"></a>1.5 Api接口层</h2><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Common</span>\<span class="title">AppException</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AppException(<span class="string">&#x27;提示消息&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="手动指定ret状态码"><a href="#手动指定ret状态码" class="headerlink" title="手动指定ret状态码"></a>手动指定ret状态码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动设置ret为1000</span></span><br><span class="line"><span class="comment">// ret=200时表示正常返回，ret=4xx表示额端非法请求，ret=500表示服务器内部错误，手动设置时应设置成其他整数范围，避免语义冲突</span></span><br><span class="line">\PhalApi\DI()-&gt;response-&gt;setRet(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动设置提示消息</span></span><br><span class="line">\PhalApi\DI()-&gt;response-&gt;setMsg(<span class="string">&#x27;手动设置提示消息&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul>
<li><a href="https://github.com/phalapi/kernal/blob/master/src/Api.php">PhalApi\Api::getRules()</a>，获取参数设置的规则，可由开发人员根据需要重载</li>
<li><a href="https://github.com/phalapi/kernal/blob/master/src/Api.php">PhalApi\Api::userCheck()</a>，用户身份验证，可由开发人员根据需要重载，此通用操作一般可以使用委托或者放置在应用接口基类</li>
</ul>
<h2 id="1-6-DataApi通用数据接口"><a href="#1-6-DataApi通用数据接口" class="headerlink" title="1.6 DataApi通用数据接口"></a>1.6 DataApi通用数据接口</h2><h3 id="DataApi有哪些接口？"><a href="#DataApi有哪些接口？" class="headerlink" title="DataApi有哪些接口？"></a>DataApi有哪些接口？</h3><p><code>PhalApi\Api\DataApi</code>目前有5个数据接口（后面会进一步扩展）：</p>
<ul>
<li>创建新数据，<code>&#123;命名空间&#125;.&#123;接口类名&#125;.CreateData</code></li>
<li>批量删除，<code>&#123;命名空间&#125;.&#123;接口类名&#125;.DeleteDataIDs</code></li>
<li>获取一条数据，<code>&#123;命名空间&#125;.&#123;接口类名&#125;.GetData</code></li>
<li>获取表格列表数据，<code>&#123;命名空间&#125;.&#123;接口类名&#125;.TableList</code></li>
<li>更新数据，<code>&#123;命名空间&#125;.&#123;接口类名&#125;.UpdateData</code></li>
</ul>
<h3 id="如何屏蔽不需要的接口？"><a href="#如何屏蔽不需要的接口？" class="headerlink" title="如何屏蔽不需要的接口？"></a>如何屏蔽不需要的接口？</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ignore</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \PhalApi\<span class="built_in">Exception</span>\BadRequestException(<span class="string">&#x27;此接口已关闭&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何修改接口文档？"><a href="#如何修改接口文档？" class="headerlink" title="如何修改接口文档？"></a>如何修改接口文档？</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布一篇新的博客文章</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 进行博客文章的发布，发布后内容进入待审状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int id 新博客文章的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parent</span>::createData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-7-Domain领域业务层与ADM模式"><a href="#1-7-Domain领域业务层与ADM模式" class="headerlink" title="1.7 Domain领域业务层与ADM模式"></a>1.7 Domain领域业务层与ADM模式</h2><h3 id="ADM调用关系"><a href="#ADM调用关系" class="headerlink" title="ADM调用关系"></a><a href="http://docs.phalapi.net/#/v2.0/domain?id=adm%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB">ADM调用关系</a></h3><p>需要注意不能<strong>越层调用</strong>也不能<strong>逆向调用</strong>，即不能Api调用Model。而应该是<strong>上层调用下层，或者同层级调用</strong>，也就是说，我们应该：</p>
<ul>
<li>Api层调用Domain层</li>
<li>Domain层调用Domain层</li>
<li>Domain层调用Model层</li>
<li>Model层调用Model层</li>
</ul>
<h2 id="1-8-Model数据模型层与数据库操作"><a href="#1-8-Model数据模型层与数据库操作" class="headerlink" title="1.8 Model数据模型层与数据库操作"></a>1.8 Model数据模型层与数据库操作</h2><h3 id="一个简单的Model例子"><a href="#一个简单的Model例子" class="headerlink" title="一个简单的Model例子"></a><a href="http://docs.phalapi.net/#/v2.0/model?id=%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84model%E4%BE%8B%E5%AD%90">一个简单的Model例子</a></h3><h2 id="1-9-DataModel数据模型"><a href="#1-9-DataModel数据模型" class="headerlink" title="1.9 DataModel数据模型"></a>1.9 DataModel数据模型</h2><h3 id="简单：4个CURD基本操作"><a href="#简单：4个CURD基本操作" class="headerlink" title="简单：4个CURD基本操作"></a>简单：4个CURD基本操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$model</span> = <span class="keyword">new</span> App\Model\User();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$model</span>-&gt;get(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$model</span>-&gt;get(<span class="number">1</span>, <span class="string">&#x27;id, name&#x27;</span>); <span class="comment">//取指定的字段</span></span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$model</span>-&gt;get(<span class="number">1</span>, <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">//可以数组取指定要获取的字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;update_time&#x27;</span> =&gt; time());</span><br><span class="line"><span class="variable">$model</span>-&gt;update(<span class="number">1</span>, <span class="variable">$data</span>); <span class="comment">//基于主键的快速更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;phalapi&#x27;</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$model</span>-&gt;insert(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">//$id = $model-&gt;insert($data, 5); //如果是分表，可以通过第二个参数指定分表的参考ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="variable">$model</span>-&gt;delete(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="总数"><a href="#总数" class="headerlink" title="总数"></a>总数</h3><p>接口：<code>PhalApi\Model\DataModel::count($where = NULL, $countBy = &#39;*&#39;)</code></p>
<h3 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h3><p>接口：<code>PhalApi\Model\DataModel::min($where, $minBy)</code></p>
<h3 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h3><p>接口：<code>PhalApi\Model\DataModel::max($where, $maxBy)</code></p>
<h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><p>接口：<code>PhalApi\Model\DataModel::sum($where, $sumBy)</code></p>
<h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><p>接口：<code>PhalApi\Model\DataModel::getValueBy($field, $value, $selectFiled, $default = FALSE)</code></p>
<h3 id="获取字段值（多个）"><a href="#获取字段值（多个）" class="headerlink" title="获取字段值（多个）"></a>获取字段值（多个）</h3><p>接口：<code>PhalApi\Model\DataModel::getValueMoreBy($field, $value, $selectFiled, $limit = 0, $isDistinct = FALSE)</code></p>
<h3 id="获取一条纪录"><a href="#获取一条纪录" class="headerlink" title="获取一条纪录"></a>获取一条纪录</h3><p>接口：<code>PhalApi\Model\DataModel::getDataBy($field, $value, $select = &#39;*&#39;, $default = FALSE)</code></p>
<h3 id="获取多条纪录"><a href="#获取多条纪录" class="headerlink" title="获取多条纪录"></a>获取多条纪录</h3><p>接口：<code>PhalApi\Model\DataModel::getDataMoreBy($field, $value, $limit = 0, $select = &#39;*&#39;)</code></p>
<p><a href="http://docs.phalapi.net/#/v2.0/database-datamodel?id=%e8%8e%b7%e5%8f%96%e5%a4%9a%e6%9d%a1%e7%ba%aa%e5%bd%95">点击查看更多</a></p>
<h3 id="执行SQL查询语句"><a href="#执行SQL查询语句" class="headerlink" title="执行SQL查询语句"></a>执行SQL查询语句</h3><p>接口：<code>PhalApi\Model\DataModel::queryAll($sql, $parmas = array())</code></p>
<h3 id="执行SQL变更语句"><a href="#执行SQL变更语句" class="headerlink" title="执行SQL变更语句"></a>执行SQL变更语句</h3><p>接口：<code>PhalApi\Model\DataModel::executeSql($sql, $params = array())</code></p>
<h3 id="第三种获取NotORM的方式"><a href="#第三种获取NotORM的方式" class="headerlink" title="第三种获取NotORM的方式"></a>第三种获取NotORM的方式</h3><ul>
<li>全局获取方式，通过<code>\PhalApi\DI()-&gt;notorm-&gt;表名</code>方式获取，可以用于任何地方。<ul>
<li>局部获取方式，通过在继承<code>PhalApi\Model\NotORMModel</code>的子类中使用<code>$this-&gt;getORM()</code>获取当前<code>Model</code>对应的<code>NotORM</code>，仅限用于<code>Model</code>子类内部。</li>
</ul>
</li>
<li>使用<code>PhalApi\Model\DataModel::notorm()</code>静态方法获取。</li>
</ul>
<h3 id="DataModel与NotORMModel的区别"><a href="#DataModel与NotORMModel的区别" class="headerlink" title="DataModel与NotORMModel的区别"></a>DataModel与NotORMModel的区别</h3><p>DataModel是比NotORMModel更新推出的数据基类，比NotORMModel功能更强大，并且开发使用更友好。推荐从PhalApi 2.12.0 及以上版本改用DataModel。</p>
<p>使用DataModel前后的继承关系对比<a href="http://docs.phalapi.net/#/v2.0/database-datamodel?id=datamodel%e4%b8%8enotormmodel%e7%9a%84%e5%8c%ba%e5%88%ab">如下</a>：</p>
<h2 id="1-10-单元测试"><a href="#1-10-单元测试" class="headerlink" title="1.10 单元测试"></a>1.10 单元测试</h2><h3 id="PHPUnit"><a href="#PHPUnit" class="headerlink" title="PHPUnit"></a>PHPUnit</h3><p>PHPUnit官网：<a href="https://phpunit.de/">https://phpunit.de</a>，如需进行单元测试，请先安装PHPUnit。</p>
<p>拓展: phpstorm使用单元测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require phpunit/phpunit</span><br><span class="line">Run-&gt;......</span><br><span class="line">(后续我会单独做单元测试的笔记!!!)</span><br></pre></td></tr></table></figure>

<h2 id="1-11-自动加载和PSR-4"><a href="#1-11-自动加载和PSR-4" class="headerlink" title="1.11 自动加载和PSR-4"></a>1.11 自动加载和PSR-4</h2><h3 id="如何增加一个顶级的命名空间"><a href="#如何增加一个顶级的命名空间" class="headerlink" title="如何增加一个顶级的命名空间?"></a>如何增加一个顶级的命名空间?</h3><p>注册顶级命名空间需要在<code>composer.json</code>的<code>autoload</code>里注册, 如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;autoload&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;psr-4&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;App\\&quot;</span>: <span class="string">&quot;src/app&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Foo\\&quot;</span>: <span class="string">&quot;src/foo&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">更新</span><br><span class="line">composer update</span><br><span class="line">或(只更新命名空间的映射关系)</span><br><span class="line">composer dumpautoload</span><br></pre></td></tr></table></figure>

<h3 id="添加全局函数"><a href="#添加全局函数" class="headerlink" title="添加全局函数"></a>添加全局函数</h3><p>放置到<code>./src/app/functions.php</code>文件内, 如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hey, man~&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo \App\hello();</span><br></pre></td></tr></table></figure>

<h2 id="1-12-接口文档"><a href="#1-12-接口文档" class="headerlink" title="1.12 接口文档"></a>1.12 接口文档</h2><h3 id="在线接口文档"><a href="#在线接口文档" class="headerlink" title="在线接口文档"></a>在线接口文档</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://dev.phalapi.net/docs.php</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>接口服务名称通常为接口类成员函数的第一行注释</p>
<p>接口说明对应接口类成员函数的<code>@desc</code>注释，支持HTML格式</p>
<p><code>@method POST</code>指定了当前接口，只允许POST请求</p>
<p>接口参数在当前接口类<code>getRules()</code>方法中的返回</p>
<p>如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> <span class="keyword">extends</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认接口服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 默认接口服务，当未指定接口服务时执行此接口服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string title 标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string content 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string version 版本，格式：X.X.X</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int time 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐藏接口"><a href="#隐藏接口" class="headerlink" title="隐藏接口"></a>隐藏接口</h3><p>类注释添加<code>@ignore</code></p>
<h3 id="生成离线文档"><a href="#生成离线文档" class="headerlink" title="生成离线文档"></a>生成离线文档</h3><p><code>php ./public/docs.php</code></p>
<h2 id="1-13-初始化"><a href="#1-13-初始化" class="headerlink" title="1.13 初始化"></a>1.13 初始化</h2><h3 id="框架初始化"><a href="#框架初始化" class="headerlink" title="框架初始化"></a>框架初始化</h3><p>public/init.php</p>
<h1 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2 数据库"></a>2 数据库</h1><h2 id="2-1-数据库连接"><a href="#2-1-数据库连接" class="headerlink" title="2.1 数据库连接"></a>2.1 数据库连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL (PDO)</span><br><span class="line">MS SQL Server (PDO)</span><br><span class="line">PostgreSQL (PDO)</span><br></pre></td></tr></table></figure>

<h3 id="数据库基本配置"><a href="#数据库基本配置" class="headerlink" title="数据库基本配置"></a>数据库基本配置</h3><p><code>./config/dbs.php</code></p>
<p>主要有两部分配置：<code>servers</code>和<code>tables</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">servers，针对数据库的配置，可以配置多个数据库</span><br><span class="line">tables，针对表的配置，支持配置分表（不需要分表可不配置分表）</span><br></pre></td></tr></table></figure>

<h3 id="如何排查数据库连接错误"><a href="#如何排查数据库连接错误" class="headerlink" title="如何排查数据库连接错误?"></a>如何排查数据库连接错误?</h3><p><code>?__debug__=1</code></p>
<h3 id="如何断开数据库连接"><a href="#如何断开数据库连接" class="headerlink" title="如何断开数据库连接?"></a>如何断开数据库连接?</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\PhalApi\DI()-&gt;notorm-&gt;disconnect();</span><br></pre></td></tr></table></figure>

<p>在./public/index.php文件最后进行手动断开</p>
<h2 id="2-2-数据库于NotORM"><a href="#2-2-数据库于NotORM" class="headerlink" title="2.2 数据库于NotORM"></a>2.2 数据库于NotORM</h2><p><a href="http://docs.phalapi.net/#/v2.0/database-notorm?id=phalapi%E7%9A%84model%E5%92%8Cnotorm%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84">PhalApi的Model和NotORM整体架构</a></p>
<p>当我们需要操作数据库时，主要分为三个步骤：连接数据库、实现数据库表操作、调用。</p>
<h3 id="如何指定表名"><a href="#如何指定表名" class="headerlink" title="如何指定表名?"></a>如何指定表名?</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhalApi</span>\<span class="title">Model</span>\<span class="title">NotORMModel</span> <span class="title">as</span> <span class="title">NotORM</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">NotORM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getTableName</span>(<span class="params"><span class="variable">$id</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;my_user&#x27;</span>;  <span class="comment">// 手动设置表名为 my_user</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4个CURD基本操作"><a href="#4个CURD基本操作" class="headerlink" title="4个CURD基本操作"></a>4个CURD基本操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$model</span> = <span class="keyword">new</span> App\Model\User();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$model</span>-&gt;get(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$model</span>-&gt;get(<span class="number">1</span>, <span class="string">&#x27;id, name&#x27;</span>); <span class="comment">//取指定的字段</span></span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$model</span>-&gt;get(<span class="number">1</span>, <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">//可以数组取指定要获取的字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;update_time&#x27;</span> =&gt; time());</span><br><span class="line"><span class="variable">$model</span>-&gt;update(<span class="number">1</span>, <span class="variable">$data</span>); <span class="comment">//基于主键的快速更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;phalapi&#x27;</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$model</span>-&gt;insert(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">//$id = $model-&gt;insert($data, 5); //如果是分表，可以通过第二个参数指定分表的参考ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="variable">$model</span>-&gt;delete(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="附录：PhalApi对NotORM的优化"><a href="#附录：PhalApi对NotORM的优化" class="headerlink" title="附录：PhalApi对NotORM的优化"></a><a href="http://docs.phalapi.net/#/v2.0/database-notorm?id=%E9%99%84%E5%BD%95%EF%BC%9Aphalapi%E5%AF%B9notorm%E7%9A%84%E4%BC%98%E5%8C%96">附录：PhalApi对NotORM的优化</a></h3><p>如果了解NotORM的使用，自然而然对PhalApi中的数据库操作也就一目了然了。但为了更符合接口类项目的开发，PhalApi对NotORM的底层进行优化和调整。以下改动点包括但不限于：</p>
<ul>
<li>将原来返回的结果全部从对象类型改成数组类型，便于数据流通</li>
<li>添加查询多条纪录的接口：<code>NotORM_Result::fetchAll()</code>和<code>NotORM_Result::fetchRows()</code></li>
<li>添加支持原生SQL语句查询的接口：<code>NotORM_Result::queryAll()</code>和<code>NotORM_Result::queryRows()</code></li>
<li>limit 操作的调整，取消原来OFFSET关键字的使用</li>
<li>当数据库操作失败时，抛出PDOException异常</li>
<li>将结果集中以主键作为下标改为以顺序索引作为下标</li>
<li>禁止全表删除，防止误删</li>
<li>调整调试模式</li>
</ul>
<h2 id="2-3-数据库使用和查询"><a href="#2-3-数据库使用和查询" class="headerlink" title="2.3 数据库使用和查询"></a>2.3 数据库使用和查询</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step 1: 开启事务</span></span><br><span class="line">\PhalApi\DI()-&gt;notorm-&gt;beginTransaction(<span class="string">&#x27;db_master&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: 数据库操作</span></span><br><span class="line">\PhalApi\DI()-&gt;notorm-&gt;user-&gt;insert(<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;test1&#x27;</span>));</span><br><span class="line">\PhalApi\DI()-&gt;notorm-&gt;user-&gt;insert(<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;test2&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: 提交事务/回滚</span></span><br><span class="line">\PhalApi\DI()-&gt;notorm-&gt;commit(<span class="string">&#x27;db_master&#x27;</span>);</span><br><span class="line"><span class="comment">//\PhalApi\DI()-&gt;notorm-&gt;rollback(&#x27;db_master&#x27;);</span></span><br></pre></td></tr></table></figure>

<p>在Model子类内，可以：</p>
<ul>
<li>开启事务：<code>$this-&gt;getORM()-&gt;transaction(&#39;BEGIN&#39;)</code>;</li>
<li>提交事务：<code>$this-&gt;getORM()-&gt;transaction(&#39;COMMIT&#39;)</code>;</li>
<li>回滚事务：<code>$this-&gt;getORM()-&gt;transaction(&#39;ROLLBACK&#39;)</code>;</li>
</ul>
<p>可以使用更底层更通用的接口，即：<code>\NotORM_Result::query($query, $parameters)</code>。</p>
<p>如，删除一张表</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DROP TABLE tbl_user</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getORM()-&gt;query(<span class="string">&#x27;DROP TABLE tbl_user&#x27;</span>, <span class="keyword">array</span>());</span><br></pre></td></tr></table></figure>

<h2 id="2-4-数据库分库分表策略"><a href="#2-4-数据库分库分表策略" class="headerlink" title="2.4 数据库分库分表策略"></a>2.4 <a href="http://docs.phalapi.net/#/v2.0/database-multi?id=%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%AD%96%E7%95%A5">数据库分库分表策略</a></h2><h2 id="2-5-连接多个数据库"><a href="#2-5-连接多个数据库" class="headerlink" title="2.5 连接多个数据库"></a>2.5 <a href="http://docs.phalapi.net/#/v2.0/database-other?id=%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93">连接多个数据库</a></h2><h2 id="2-6-打印和保存SQL语句"><a href="#2-6-打印和保存SQL语句" class="headerlink" title="2.6 打印和保存SQL语句"></a>2.6 <a href="http://docs.phalapi.net/#/v2.0/database-sql-debug?id=%E6%89%93%E5%8D%B0%E5%92%8C%E4%BF%9D%E5%AD%98sql%E8%AF%AD%E5%8F%A5">打印和保存SQL语句</a></h2><ul>
<li>sys.debug：是否开启接口调试模式，开启后在客户端可以直接看到更多调试信息</li>
<li>sys.notorm_debug，是否开启NotORM调试模式，开启后仅针对NotORM服务开启调试模式</li>
<li>sys.enable_sql_log，是否纪录SQL到日志，需要同时开启notorm_debug方可写入日志</li>
</ul>
<h1 id="3-高级专题"><a href="#3-高级专题" class="headerlink" title="3 高级专题"></a>3 高级专题</h1><h2 id="3-1-接口参数"><a href="#3-1-接口参数" class="headerlink" title="3.1 接口参数"></a>3.1 接口参数</h2><h3 id="参数规则格式"><a href="#参数规则格式" class="headerlink" title="参数规则格式"></a>参数规则格式</h3><p>参数规则是针对各个接口服务而配置的多维规则数组，由接口类的<code>getRules()</code>方法返回。其中，</p>
<ul>
<li>一维下标是接口类的方法名，对应接口服务的<code>Action</code>；</li>
<li>二维下标是类属性名称，对应在服务端获取通过验证和转换化的最终客户端参数；</li>
<li>三维下标<code>name</code>是接口参数名称，对应外部客户端请求时需要提供的参数名称。</li>
</ul>
<h3 id="三级参数规则配置"><a href="#三级参数规则配置" class="headerlink" title="三级参数规则配置"></a>三级参数规则配置</h3><p>参数规则主要有三种，分别是：系统参数规则、应用参数规则、接口参数规则。</p>
<h3 id="多个参数规则优先级"><a href="#多个参数规则优先级" class="headerlink" title="多个参数规则优先级"></a>多个参数规则优先级</h3><p>简而言之，多个参数规则的优先级从高到下，分别是（正如你想到的那样）：</p>
<ul>
<li>1、指定接口参数规则</li>
<li>2、通用接口参数规则</li>
<li>3、应用参数规则</li>
<li>4、系统参数规则</li>
</ul>
<p>对于重叠的接口参数，若指定接口不需要某个接口参数，可以通过将参数规则配置置为NULL或FALSE，从而取消此参数。例如取消sign全局参数；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;sign&#x27; =&gt; NULL,</span><br></pre></td></tr></table></figure>

<h3 id="参数规则配置详细说明"><a href="#参数规则配置详细说明" class="headerlink" title="参数规则配置详细说明"></a><a href="http://docs.phalapi.net/#/v2.0/api-params?id=%E5%8F%82%E6%95%B0%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E">参数规则配置详细说明</a></h3><p>主要的类型有：字符串、整数、浮点数、布尔值、时间戳/日期、数组、枚举类型、文件上传和回调函数</p>
<h2 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h2><h3 id="配置文件简单读取"><a href="#配置文件简单读取" class="headerlink" title="配置文件简单读取"></a>配置文件简单读取</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="variable">$di</span>-&gt;config = <span class="keyword">new</span> FileConfig(API_ROOT . <span class="string">&#x27;/config&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.php里面的全部配置</span></span><br><span class="line">\PhalApi\DI()-&gt;config-&gt;get(<span class="string">&#x27;app&#x27;</span>);<span class="comment">//返回：array( ... ... )</span></span><br><span class="line">\PhalApi\DI()-&gt;config-&gt;get(<span class="string">&#x27;app.not_found&#x27;</span>, <span class="number">404</span>); <span class="comment">//返回：404</span></span><br></pre></td></tr></table></figure>

<h3 id="当前环境配置文件"><a href="#当前环境配置文件" class="headerlink" title="当前环境配置文件"></a>当前环境配置文件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行模式，可以是：dev, test, prod// 运行模式，可以是：dev, test, prod</span></span><br><span class="line">defined(<span class="string">&#x27;API_MODE&#x27;</span>) || define(<span class="string">&#x27;API_MODE&#x27;</span>, <span class="string">&#x27;prod&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>API_MODE有三个值，分别是：</p>
<ul>
<li>dev表示开发模式，此时如果./config/sys_dev.php、./config/app_dev.php、./config/dbs_dev.php配置文件若存在，则会优先加载<code>*_dev.php</code>系列配置文件。</li>
<li>test表示测试模式，此时如果./config/sys_test.php、./config/app_test.php、./config/dbs_test.php配置文件若存在，则会优先加载<code>*_test.php</code>系列配置文件。</li>
<li>prod表示生产模式，则加载./config/sys.php、./config/app.php、./config/dbs.php配置文件。</li>
</ul>
<h2 id="3-3-日志"><a href="#3-3-日志" class="headerlink" title="3.3 日志"></a>3.3 日志</h2><p>7种级别:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> EMERGENCY = <span class="string">&#x27;energency&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ALERT		= <span class="string">&#x27;alert&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> CRITICAL	= <span class="string">&#x27;critical&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">ERROR</span> 	= <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> WARNING	= <span class="string">&#x27;warning&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> NOTICE	= <span class="string">&#x27;notice&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> INFO		= <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> DEBUG		= <span class="string">&#x27;debug&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="简化版日记接口"><a href="#简化版日记接口" class="headerlink" title="简化版日记接口"></a>简化版日记接口</h3><p>只有三种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error： 系统异常类日记</span><br><span class="line">info： 业务纪录类日记</span><br><span class="line">debug： 开发调试类日记</span><br></pre></td></tr></table></figure>

<p>error</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有描述</span></span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;error(<span class="string">&#x27;fail to insert DB&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述 + 简单的信息</span></span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;error(<span class="string">&#x27;fail to insert DB&#x27;</span>, <span class="string">&#x27;try to register user dogstar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述 + 当时的上下文数据</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dogstar&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;error(<span class="string">&#x27;fail to insert DB&#x27;</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>

<p>info</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设：10 + 2 = 12</span></span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;info(<span class="string">&#x27;add user exp&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dogstar&#x27;</span>, <span class="string">&#x27;before&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;addExp&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;after&#x27;</span> =&gt; <span class="number">12</span>, <span class="string">&#x27;reason&#x27;</span> =&gt; <span class="string">&#x27;help one more phper&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>debug</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有描述</span></span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;debug(<span class="string">&#x27;just for test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述 + 简单的信息</span></span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;debug(<span class="string">&#x27;just for test&#x27;</span>, <span class="string">&#x27;一些其他的描述 ...&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述 + 当时的上下文数据</span></span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;debug(<span class="string">&#x27;just for test&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dogstar&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;******&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>更灵活的记录:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">\PhalApi\DI()-&gt;logger-&gt;log(<span class="string">&#x27;demo&#x27;</span>, <span class="string">&#x27;add user exp&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dogstar&#x27;</span>, <span class="string">&#x27;after&#x27;</span> =&gt; <span class="number">12</span>));</span><br><span class="line">\PhalApi\DI()-&gt;logger-&gt;log(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;add user exp&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;dogstar&#x27;</span>, <span class="string">&#x27;after&#x27;</span> =&gt; <span class="number">12</span>));</span><br></pre></td></tr></table></figure>

<h3 id="扩展：定制你的日志"><a href="#扩展：定制你的日志" class="headerlink" title="扩展：定制你的日志"></a><a href="http://docs.phalapi.net/#/v2.0/logger?id=%E6%89%A9%E5%B1%95%EF%BC%9A%E5%AE%9A%E5%88%B6%E4%BD%A0%E7%9A%84%E6%97%A5%E5%BF%97">扩展：定制你的日志</a></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Common</span>\<span class="title">Logger</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhalApi</span>\<span class="title">Logger</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$msg</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 数据库的日记写入 ...</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-缓存"><a href="#3-4-缓存" class="headerlink" title="3.4 缓存"></a>3.4 缓存</h2><h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>这里所指的简单缓存，主要是存储在单台服务器上的缓存，例如使用系统文件的文件缓存，PHP语言提供的APCU缓存。因为实现简单，且部署方便。但其缺点也是明显的，如文件I/O读写导致性能低，不能支持分布式。所以在没有集群服务器下是适用的。</p>
<h3 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h3><p>例如，当需要使用文件缓存时，先在DI容器中注册对文件缓存到<code>\PhalApi\DI()-&gt;cache</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$di</span>-&gt;cache = <span class="keyword">new</span> PhalApi\Cache\FileCache(<span class="keyword">array</span>(<span class="string">&#x27;path&#x27;</span> =&gt; API_ROOT . <span class="string">&#x27;/runtime&#x27;</span>, <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;demo&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>初始化文件缓存时，需要传入配置数组，其中path为缓存数据的目录，可选的前缀prefix，用于区别不同的项目。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">PhalApi\DI()-&gt;cache-&gt;set(<span class="string">&#x27;thisYear&#x27;</span>, <span class="number">2015</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取，输出：2015</span></span><br><span class="line"><span class="keyword">echo</span> PhalApi\DI()-&gt;cache-&gt;get(<span class="string">&#x27;thisYear&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">PhalApi\DI()-&gt;cache-&gt;delete(<span class="string">&#x27;thisYear&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="APCU缓存"><a href="#APCU缓存" class="headerlink" title="APCU缓存"></a><a href="http://docs.phalapi.net/#/v2.0/cache?id=apcu%E7%BC%93%E5%AD%98">APCU缓存</a></h3><p>安装好APCU扩展和设置相关配置并重启PHP后，便可开始使用APCU缓存。APCU缓存的初始化比较简单，只需要简单创建实例即可，不需要任何配置。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$di</span>-&gt;cache = <span class="keyword">new</span> PhalApi\Cache\APCUCache();</span><br></pre></td></tr></table></figure>

<h3 id="Memcache-Memcached缓存"><a href="#Memcache-Memcached缓存" class="headerlink" title="Memcache/Memcached缓存"></a><a href="http://docs.phalapi.net/#/v2.0/cache?id=memcachememcached%E7%BC%93%E5%AD%98">Memcache/Memcached缓存</a></h3><p>若需要使用Memcache/Memcached缓存，则需要安装相应的PHP扩展。PHP 7中已经逐渐不支持Memcache，因此建议尽量使用Memcached扩展。</p>
<p>如使用Memcached：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$di</span>-&gt;cache = <span class="keyword">new</span> PhalApi\Cache\MemcachedCache(<span class="keyword">array</span>(<span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;port&#x27;</span> =&gt; <span class="number">11211</span>, <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;demo_&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>初始化Memcached时，需要传递一个配置数组，其中host为缓存服务器，port为缓存端口，prefix为可选的前缀，用于区别不同的项目。配置前缀，可以防止同一台MC服务器同一端口下key名冲突。对于缓存的配置，更好的建议是使用配置文件来统一管理配置。例如调整成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$di</span>-&gt;cache = <span class="keyword">new</span> PhalApi\Cache\MemcachedCache(DI()-&gt;config-&gt;get(<span class="string">&#x27;sys.mc&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>相应的配置，则在./config/sys.php中的mc选项中统一维护。</p>
<h3 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a><a href="http://docs.phalapi.net/#/v2.0/cache?id=redis%E7%BC%93%E5%AD%98">Redis缓存</a></h3><p>当需要使用Redis缓存时，需要先安装对应的Redis扩展。</p>
<p>简单的Redis缓存的初始化如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$config</span> = <span class="keyword">array</span>(<span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;port&#x27;</span> =&gt; <span class="number">6379</span>);</span><br><span class="line"><span class="variable">$di</span>-&gt;cache = <span class="keyword">new</span> PhalApi\Cache\RedisCache(<span class="variable">$config</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-5-过滤器-签名"><a href="#3-5-过滤器-签名" class="headerlink" title="3.5 过滤器(签名)"></a>3.5 过滤器(签名)</h2><h3 id="默认可用的MD5签名"><a href="#默认可用的MD5签名" class="headerlink" title="默认可用的MD5签名"></a><a href="http://docs.phalapi.net/#/v2.0/filter?id=%E9%BB%98%E8%AE%A4%E5%8F%AF%E7%94%A8%E7%9A%84md5%E7%AD%BE%E5%90%8D">默认可用的MD5签名</a></h3><h3 id="白名单配置"><a href="#白名单配置" class="headerlink" title="白名单配置"></a><a href="http://docs.phalapi.net/#/v2.0/filter?id=%E7%99%BD%E5%90%8D%E5%8D%95%E9%85%8D%E7%BD%AE">白名单配置</a></h3><h3 id="实现过滤器接口"><a href="#实现过滤器接口" class="headerlink" title="实现过滤器接口"></a><a href="http://docs.phalapi.net/#/v2.0/filter?id=%E5%AE%9E%E7%8E%B0%E8%BF%87%E6%BB%A4%E5%99%A8%E6%8E%A5%E5%8F%A3">实现过滤器接口</a></h3><p>微信验签</p>
<h3 id="注册过滤器服务"><a href="#注册过滤器服务" class="headerlink" title="注册过滤器服务"></a><a href="http://docs.phalapi.net/#/v2.0/filter?id=%E6%B3%A8%E5%86%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E6%9C%8D%E5%8A%A1">注册过滤器服务</a></h3><p>随后，我们只需要再简单地注册一下过滤器服务即可，在<code>./config/di.php</code>文件最后追加：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 签名验证服务</span></span><br><span class="line"><span class="variable">$di</span>-&gt;filter = <span class="keyword">new</span> App\Common\SignFilter();</span><br></pre></td></tr></table></figure>

<h2 id="3-6-cookie"><a href="#3-6-cookie" class="headerlink" title="3.6 cookie"></a>3.6 cookie</h2><p>如同其他的服务一样，我们在使用前需要对COOKIE进行注册。COOKIE服务注册在<code>\PhalApi\DI()-&gt;cookie</code>中，可以使用<a href="https://github.com/phalapi/kernal/blob/master/src/Cookie.php">PhalApi\Cookie</a>实例进行初始化，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$config</span> = <span class="keyword">array</span>(<span class="string">&#x27;domain&#x27;</span> =&gt; <span class="string">&#x27;.phalapi.net&#x27;</span>);</span><br><span class="line">\PhalApi\DI()-&gt;cookie = <span class="keyword">new</span> PhalApi\Cookie(<span class="variable">$config</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置COOKIE</span></span><br><span class="line"><span class="comment">// Set-Cookie:&quot;name=phalapi; expires=Sun, 07-May-2017 03:26:45 GMT; domain=.phalapi.net&quot;</span></span><br><span class="line">\PhalApi\DI()-&gt;cookie-&gt;set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;phalapi&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_TIME&#x27;</span>] + <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取COOKIE，输出：phalapi</span></span><br><span class="line"><span class="keyword">echo</span> \PhalApi\DI()-&gt;cookie-&gt;get(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除COOKIE</span></span><br><span class="line">\PhalApi\DI()-&gt;cookie-&gt;delete(<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="扩展：定制专属的COOKIE"><a href="#扩展：定制专属的COOKIE" class="headerlink" title="扩展：定制专属的COOKIE"></a><a href="http://docs.phalapi.net/#/v2.0/cookie?id=%E6%89%A9%E5%B1%95%EF%BC%9A%E5%AE%9A%E5%88%B6%E4%B8%93%E5%B1%9E%E7%9A%84cookie">扩展：定制专属的COOKIE</a></h3><p>当项目中需要定制专属的COOKIE服务时，可以继承<a href="https://github.com/phalapi/kernal/blob/master/src/Cookie.php">PhalApi\Cookie</a>基类，并按需要重写对应的接口。主要的接口有三个：</p>
<ul>
<li>设置COOKIE：<code>PhalApi\Cookie::set($name, $value, $expire = NULL)</code></li>
<li>获取COOKIE：<code>PhalApi\Cookie::get($name = NULL)</code></li>
<li>删除COOKIE：<code>PhalApi\Cookie::delete($name)</code></li>
</ul>
<h2 id="3-7-加密"><a href="#3-7-加密" class="headerlink" title="3.7 加密"></a>3.7 加密</h2><h3 id="PHP的mcrypt加密扩展"><a href="#PHP的mcrypt加密扩展" class="headerlink" title="PHP的mcrypt加密扩展"></a><a href="http://docs.phalapi.net/#/v2.0/crypt?id=php%E7%9A%84mcrypt%E5%8A%A0%E5%AF%86%E6%89%A9%E5%B1%95">PHP的mcrypt加密扩展</a></h3><h2 id="3-8-国际化"><a href="#3-8-国际化" class="headerlink" title="3.8 国际化"></a>3.8 国际化</h2><h3 id="语言设定"><a href="#语言设定" class="headerlink" title="语言设定"></a><a href="http://docs.phalapi.net/#/v2.0/i18n?id=%E8%AF%AD%E8%A8%80%E8%AE%BE%E5%AE%9A">语言设定</a></h3><p>在初始化文件<code>./public/init.php</code>中，通过快速函数<code>\PhalApi\SL($language)</code>可以设定当前所使用的语言。例如设置语言为简体中文，可以：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 翻译语言包设定</span></span><br><span class="line">\PhalApi\SL(<span class="string">&#x27;zh_cn&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="翻译包"><a href="#翻译包" class="headerlink" title="翻译包"></a><a href="http://docs.phalapi.net/#/v2.0/i18n?id=%E7%BF%BB%E8%AF%91%E5%8C%85">翻译包</a></h3><p>翻译包的文件路径为：<code>./language/语言/common.php</code>，例如简体中文zh_cn对应的翻译包文件为：<code>./Language/zh_cn/common.php</code>。此翻译包文件返回的是一个数组，其中键为待翻译的内容，值为翻译后的内容.</p>
<h2 id="3-9-CURL请求"><a href="#3-9-CURL请求" class="headerlink" title="3.9 CURL请求"></a>3.9 CURL请求</h2><p>当需要进行curl请求时，可使用PhalApi封装的CURL请求类<a href="https://github.com/phalapi/kernal/blob/master/src/CUrl.php">PhalApi\CUrl</a>，从而实现快捷方便的请求。</p>
<h2 id="3-10-工具和杂项"><a href="#3-10-工具和杂项" class="headerlink" title="3.10 工具和杂项"></a>3.10 工具和杂项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ip = \PhalApi\Tool::getClientIp();</span><br><span class="line"></span><br><span class="line">// 指定使用字符集，如6位数字验证码</span><br><span class="line">$len = 6;</span><br><span class="line">$str = \PhalApi\Tool::createRandStr($len, &#x27;0123456789&#x27;);</span><br><span class="line"></span><br><span class="line">$arr = array(&#x27;name&#x27; =&gt; &#x27;PhalApi&#x27;);</span><br><span class="line">$xml = \PhalApi\Tool::arrayToXml($arr);</span><br><span class="line"></span><br><span class="line">$xml = &#x27;&lt;xml&gt;&lt;name&gt;PhalApi&lt;/name&gt;&lt;/xml&gt;&#x27;;</span><br><span class="line">$arr = \PhalApi\Tool::xmlToArray($xml);</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h2 id="3-11-DI服务汇总"><a href="#3-11-DI服务汇总" class="headerlink" title="3.11 DI服务汇总"></a>3.11 DI服务汇总</h2><h3 id="基本注册"><a href="#基本注册" class="headerlink" title="基本注册"></a>基本注册</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$di</span> = \PhalApi\DI();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="variable">$di</span>-&gt;config = <span class="keyword">new</span> FileConfig(API_ROOT . <span class="string">&#x27;/config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试模式，$_GET[&#x27;__debug__&#x27;]可自行改名</span></span><br><span class="line"><span class="variable">$di</span>-&gt;debug = !<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;__debug__&#x27;</span>]) ? <span class="literal">true</span> : <span class="variable">$di</span>-&gt;config-&gt;get(<span class="string">&#x27;sys.debug&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日记纪录</span></span><br><span class="line"><span class="variable">$di</span>-&gt;logger = <span class="keyword">new</span> FileLogger(API_ROOT . <span class="string">&#x27;/runtime&#x27;</span>, Logger::LOG_LEVEL_DEBUG | Logger::LOG_LEVEL_INFO | Logger::LOG_LEVEL_ERROR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据操作 - 基于NotORM</span></span><br><span class="line"><span class="variable">$di</span>-&gt;notorm = <span class="keyword">new</span> NotORMDatabase(<span class="variable">$di</span>-&gt;config-&gt;get(<span class="string">&#x27;dbs&#x27;</span>), <span class="variable">$di</span>-&gt;debug);</span><br></pre></td></tr></table></figure>

<h3 id="定制注册"><a href="#定制注册" class="headerlink" title="定制注册"></a>定制注册</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 签名验证服务</span></span><br><span class="line"><span class="comment">// $di-&gt;filter = new \PhalApi\Filter\SimpleMD5Filter();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存 - Memcache/Memcached</span></span><br><span class="line"><span class="comment">// $di-&gt;cache = function () &#123;</span></span><br><span class="line"><span class="comment">//     return new \PhalApi\Cache\MemcacheCache(DI()-&gt;config-&gt;get(&#x27;sys.mc&#x27;));</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持JsonP的返回</span></span><br><span class="line"><span class="comment">// if (!empty($_GET[&#x27;callback&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//     $di-&gt;response = new \PhalApi\Response\JsonpResponse($_GET[&#x27;callback&#x27;]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="DI服务资源一览表"><a href="#DI服务资源一览表" class="headerlink" title="DI服务资源一览表"></a><a href="http://docs.phalapi.net/#/v2.0/di?id=di%E6%9C%8D%E5%8A%A1%E8%B5%84%E6%BA%90%E4%B8%80%E8%A7%88%E8%A1%A8">DI服务资源一览表</a></h3><p><a href="http://docs.phalapi.net/#/v2.0/di?id=_2%E6%AD%A3%E7%A1%AE%E5%88%A4%E6%96%AD%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%9A%E5%85%88%E8%8E%B7%E5%8F%96%EF%BC%8C%E5%86%8D%E5%88%A4%E6%96%AD">正确判断的写法：先获取，再判断</a></p>
<p>正确的用法应该是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先获取，再判断</span></span><br><span class="line"><span class="variable">$XXX</span> = <span class="variable">$di</span>-&gt;XXX;</span><br><span class="line">var_dump(<span class="keyword">isset</span>(<span class="variable">$XXX</span>));</span><br><span class="line">var_dump(!<span class="keyword">empty</span>(<span class="variable">$XXX</span>));</span><br></pre></td></tr></table></figure>

<h2 id="3-12-扩展类库"><a href="#3-12-扩展类库" class="headerlink" title="3.12 扩展类库"></a>3.12 扩展类库</h2><h3 id="扩展类库列表"><a href="#扩展类库列表" class="headerlink" title="扩展类库列表"></a><a href="http://docs.phalapi.net/#/v2.0/library?id=%E6%89%A9%E5%B1%95%E7%B1%BB%E5%BA%93%E5%88%97%E8%A1%A8">扩展类库列表</a></h3><h2 id="3-13-SDK包的使用"><a href="#3-13-SDK包的使用" class="headerlink" title="3.13 SDK包的使用"></a>3.13 SDK包的使用</h2><h3 id="SDK包列表"><a href="#SDK包列表" class="headerlink" title="SDK包列表"></a><a href="http://docs.phalapi.net/#/v2.0/sdk?id=sdk%E5%8C%85%E5%88%97%E8%A1%A8">SDK包列表</a></h3><h2 id="3-14-脚本命令"><a href="#3-14-脚本命令" class="headerlink" title="3.14 脚本命令"></a>3.14 脚本命令</h2><h3 id="phalapi-buildtest命令"><a href="#phalapi-buildtest命令" class="headerlink" title="phalapi-buildtest命令"></a><a href="http://docs.phalapi.net/#/v2.0/shell?id=phalapi-buildtest%E5%91%BD%E4%BB%A4">phalapi-buildtest命令</a></h3><h3 id="phalapi-buildsqls命令"><a href="#phalapi-buildsqls命令" class="headerlink" title="phalapi-buildsqls命令"></a><a href="http://docs.phalapi.net/#/v2.0/shell?id=phalapi-buildsqls%E5%91%BD%E4%BB%A4">phalapi-buildsqls命令</a></h3><h3 id="phalapi-cli命令"><a href="#phalapi-cli命令" class="headerlink" title="phalapi-cli命令"></a><a href="http://docs.phalapi.net/#/v2.0/shell?id=phalapi-cli%E5%91%BD%E4%BB%A4">phalapi-cli命令</a></h3><h2 id="3-15-MQ队列"><a href="#3-15-MQ队列" class="headerlink" title="3.15 MQ队列"></a>3.15 MQ队列</h2><h3 id="Gearman整合"><a href="#Gearman整合" class="headerlink" title="Gearman整合"></a><a href="http://docs.phalapi.net/#/v2.0/mq-gearman?id=gearman%E6%95%B4%E5%90%88">Gearman整合</a></h3><h3 id="RabbitMQ整合"><a href="#RabbitMQ整合" class="headerlink" title="RabbitMQ整合"></a><a href="http://docs.phalapi.net/#/v2.0/mq-gearman?id=rabbitmq%E6%95%B4%E5%90%88">RabbitMQ整合</a></h3><h3 id="NSQ整合"><a href="#NSQ整合" class="headerlink" title="NSQ整合"></a><a href="http://docs.phalapi.net/#/v2.0/mq-gearman?id=nsq%E6%95%B4%E5%90%88">NSQ整合</a></h3><h2 id="3-16-错误处理"><a href="#3-16-错误处理" class="headerlink" title="3.16 错误处理"></a>3.16 错误处理</h2><h3 id="PhalApi的错误处理"><a href="#PhalApi的错误处理" class="headerlink" title="PhalApi的错误处理"></a><a href="http://docs.phalapi.net/#/v2.0/error?id=phalapi%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">PhalApi的错误处理</a></h3><p>在./config/di.php文件注册：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$di</span>-&gt;error = <span class="keyword">new</span> \PhalApi\<span class="built_in">Error</span>\ApiError();</span><br></pre></td></tr></table></figure>

<p>在这背后，会：</p>
<ul>
<li>1、通过set_error_handler()注册用户错误处理函数</li>
<li>2、通过register_shutdown_function()处理PHP致命错误</li>
</ul>
<p>主要处理方式，是将相关的警告、错误、和提醒信息纪录到文件日志。</p>
<h1 id="4-运营平台"><a href="#4-运营平台" class="headerlink" title="4 运营平台"></a>4 运营平台</h1><p><a href="http://docs.phalapi.net/#/v2.0/portal-usage?id=%E8%BF%90%E8%90%A5%E5%B9%B3%E5%8F%B0">运营平台</a></p>
<h1 id="6-视频教程"><a href="#6-视频教程" class="headerlink" title="6 视频教程"></a>6 视频教程</h1><p><a href="http://docs.phalapi.net/#/v2.0/video_1?id=phalapi-2x-%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91-2020%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E5%BC%80%E8%AE%B2%E5%95%A6%EF%BC%81">PhalApi 2.x 接口开发 - 2020视频教程开讲啦！</a></p>
<p>后记: 20200315</p>
]]></content>
  </entry>
  <entry>
    <title>Laravel框架学习笔记</title>
    <url>/projects/575855887/</url>
    <content><![CDATA[<h1 id="Laravel框架学习笔记"><a href="#Laravel框架学习笔记" class="headerlink" title="Laravel框架学习笔记"></a>Laravel框架学习笔记</h1><h2 id="001需求和安装"><a href="#001需求和安装" class="headerlink" title="001需求和安装"></a>001需求和安装</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PHP &gt;= 7.3</span><br><span class="line">BCMath PHP 拓展</span><br><span class="line">Ctype PHP 拓展</span><br><span class="line">Fileinfo PHP 拓展</span><br><span class="line">JSON PHP 拓展</span><br><span class="line">Mbstring PHP 拓展</span><br><span class="line">OpenSSL PHP 拓展</span><br><span class="line">PDO PHP 拓展</span><br><span class="line">Tokenizer PHP 拓展</span><br><span class="line">XML PHP 拓展</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel/laravel blog</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure>

<p>注: 需要给<code>storage</code>文件夹写权限</p>
<h2 id="002文件夹结构的详细"><a href="#002文件夹结构的详细" class="headerlink" title="002文件夹结构的详细"></a>002文件夹结构的详细</h2><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">app 目录</span><br><span class="line">bootstrap 目录</span><br><span class="line">config 目录</span><br><span class="line">database 目录</span><br><span class="line">public 目录</span><br><span class="line">resources 目录</span><br><span class="line">routes 目录</span><br><span class="line">storage 目录</span><br><span class="line">tests 目录</span><br><span class="line">vendor 目录</span><br></pre></td></tr></table></figure>

<h3 id="APP目录"><a href="#APP目录" class="headerlink" title="APP目录"></a>APP目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Broadcasting 目录</span><br><span class="line">Console 目录 用于控制台注册</span><br><span class="line">Events 目录</span><br><span class="line">Exceptions 目录 注册处理异常方法</span><br><span class="line">Http 目录</span><br><span class="line">Jobs 目录</span><br><span class="line">Listeners 目录</span><br><span class="line">Mail 目录</span><br><span class="line">Models 目录</span><br><span class="line">Notifications 目录</span><br><span class="line">Policies 目录</span><br><span class="line">Providers 目录</span><br><span class="line">Rules 目录</span><br></pre></td></tr></table></figure>

<p>M:<code>app/Models</code> V:<code>resource/views</code>  C:<code>app/Controllers</code></p>
<h2 id="003了解着陆页"><a href="#003了解着陆页" class="headerlink" title="003了解着陆页"></a>003了解着陆页</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// route/web.php</span></span><br><span class="line">Route::get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>返回<code>resources/views/welcome.blade.php</code>文件</p>
<h2 id="004创建第一个程序"><a href="#004创建第一个程序" class="headerlink" title="004创建第一个程序"></a>004创建第一个程序</h2><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan</span><br><span class="line">php artisan help 命令</span><br></pre></td></tr></table></figure>

<h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:controller Site</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Controllers/Site.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//        echo &quot;&lt;h1&gt;欢迎来到我的第一个控制器&lt;/h1&gt;&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">&quot;first&quot;</span>); <span class="comment">// first.blade.php</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line"><span class="comment">/* 如果controller没有任何操作, 可以直接调用view</span></span><br><span class="line"><span class="comment">use App\Http\Controllers\Site;</span></span><br><span class="line"><span class="comment">Route::get(&quot;/first&quot;, [Site::class, &quot;first&quot;]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Route::get(<span class="string">&quot;/first&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> view(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>php</span></figcaption><table><tr><td class="code"><pre><span class="line">// resources/views/first.blade.php</span><br><span class="line">&lt;h1&gt;欢迎来到我的第一个控制器&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h2 id="005006路由"><a href="#005006路由" class="headerlink" title="005006路由"></a>005006路由</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line"><span class="comment">// 基础路由</span></span><br><span class="line">Route::get(<span class="string">&quot;/first&quot;</span>, [Site::class, <span class="string">&quot;first&quot;</span>]);</span><br><span class="line"><span class="comment">// 视图路由</span></span><br><span class="line">Route::view(<span class="string">&quot;/services&quot;</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line"><span class="comment">// 带参路由</span></span><br><span class="line">Route::get(<span class="string">&quot;/services/&#123;id&#125;&quot;</span>, [Site::class, <span class="string">&quot;first&quot;</span>]);</span><br><span class="line">Route::get(<span class="string">&quot;/services/&#123;id?&#125;&quot;</span>, [Site::class, <span class="string">&quot;first&quot;</span>]);</span><br><span class="line">Route::get(<span class="string">&quot;/services/&#123;id&#125;/&#123;name&#125;&quot;</span>, [Site::class, <span class="string">&quot;first&quot;</span>]);</span><br><span class="line"><span class="comment">// 重定向路由</span></span><br><span class="line">Route::redirect(<span class="string">&quot;/here&quot;</span>, <span class="string">&quot;/there&quot;</span>);</span><br><span class="line">Route::redirect(<span class="string">&quot;/here&quot;</span>, <span class="string">&quot;/there&quot;</span>, <span class="number">301</span>);</span><br><span class="line"><span class="comment">// 正则匹配路由</span></span><br><span class="line">Route::get(<span class="string">&quot;/services/&#123;id&#125;&quot;</span>, [Site::class, <span class="string">&quot;first&quot;</span>])</span><br><span class="line">    -&gt;where(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;[0-9+]&quot;</span>);</span><br><span class="line">Route::get(<span class="string">&quot;/services/&#123;id&#125;/&#123;name&#125;&quot;</span>, [Site::class, <span class="string">&quot;first&quot;</span>])</span><br><span class="line">    -&gt;where([<span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;[0-9]+&quot;</span>, <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;[a-zA-Z]+&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="007视图的完整详细信息"><a href="#007视图的完整详细信息" class="headerlink" title="007视图的完整详细信息"></a>007视图的完整详细信息</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Route::get(&quot;/services/&#123;id&#125;/&#123;name&#125;&quot;, function ($id, $name) &#123;</span></span><br><span class="line"><span class="comment">    return view(&quot;services&quot;, [&quot;id&quot;=&gt;$id, &quot;name&quot;=&gt;$name]);</span></span><br><span class="line"><span class="comment">&#125;)-&gt;where([&quot;id&quot; =&gt; &quot;[0-9]+&quot;, &quot;name&quot; =&gt; &quot;[a-zA-Z]+&quot;]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Route::get(<span class="string">&quot;/services/&#123;id&#125;/&#123;name&#125;&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$id</span>, <span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&quot;services&quot;</span>, compact(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;)-&gt;where([<span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;[0-9]+&quot;</span>, <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;[a-zA-Z]+&quot;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/services.blade.php</span></span><br><span class="line">&lt;h1&gt;这是服务 &#123;&#123;<span class="variable">$id</span>&#125;&#125; 名称是&#123;&#123;<span class="variable">$name</span>&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h2 id="008009blade模板引擎"><a href="#008009blade模板引擎" class="headerlink" title="008009blade模板引擎"></a>008009blade模板引擎</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/services.blade.php</span></span><br><span class="line"><span class="comment">// 模板基本语法</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$name</span>; <span class="meta">?&gt;</span> ~ &#123;&#123;<span class="variable">$name</span>&#125;&#125;</span><br><span class="line">&#123;&#123;-- 注释, 不会解析在html中 --&#125;&#125;</span><br><span class="line">&#123;&#123; strtoupper(<span class="string">&quot;hello&quot;</span>) &#125;&#125;</span><br><span class="line">@<span class="keyword">isset</span>(<span class="variable">$name</span>)</span><br><span class="line">@endisset</span><br><span class="line">@<span class="keyword">empty</span>(<span class="variable">$name</span>)</span><br><span class="line">@endempty</span><br><span class="line">@<span class="keyword">if</span> (count(<span class="variable">$arr</span>) &gt; <span class="number">0</span>)</span><br><span class="line">@<span class="keyword">elseif</span>(...)</span><br><span class="line">@<span class="keyword">else</span></span><br><span class="line">@<span class="keyword">endif</span></span><br><span class="line">@<span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">10</span>; <span class="variable">$i</span>++)</span><br><span class="line">@<span class="keyword">endfor</span></span><br><span class="line"><span class="comment">// 文件包含语法</span></span><br><span class="line"><span class="comment">// 新建 resources/views/articles/top_hearder.blade.php</span></span><br><span class="line">@<span class="keyword">include</span>(<span class="string">&quot;articles.top_hearder&quot;</span>)</span><br><span class="line">@csrf</span><br><span class="line">@<span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>)</span><br><span class="line">    &lt;h4&gt;&#123;&#123;<span class="variable">$value</span>&#125;&#125;&lt;/h4&gt;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br><span class="line">@json(<span class="variable">$arr</span>) <span class="comment">// json_encode($arr)</span></span><br></pre></td></tr></table></figure>

<h2 id="010创建布局和使用布局"><a href="#010创建布局和使用布局" class="headerlink" title="010创建布局和使用布局"></a>010创建布局和使用布局</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建 resources/views/layouts/app.blade.php</span></span><br><span class="line"><span class="comment">// 在 resources/views/about.blade.php 中 继承布局</span></span><br><span class="line">@<span class="keyword">extends</span>(<span class="string">&quot;layouts.app&quot;</span>) <span class="comment">// 继承布局</span></span><br><span class="line"><span class="comment">// @section(&quot;content&quot;, &quot;我是about的title&quot;)</span></span><br><span class="line">@section(<span class="string">&quot;content&quot;</span>) <span class="comment">// 定义了片段的内容</span></span><br><span class="line">    &lt;div&gt;我是about里的内容&lt;/div&gt;</span><br><span class="line">@endsection</span><br><span class="line"><span class="comment">// 在 resources/views/layouts/app.blade.php 中 显示片段的内容</span></span><br><span class="line">@<span class="keyword">yield</span>(<span class="string">&quot;content&quot;</span>) <span class="comment">// 显示片段的内容</span></span><br></pre></td></tr></table></figure>

<h2 id="011012组件的创建和使用"><a href="#011012组件的创建和使用" class="headerlink" title="011012组件的创建和使用"></a>011012组件的创建和使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan help make:component</span><br><span class="line">php artisan make:component message</span><br><span class="line">会生成2个文件</span><br><span class="line">app/View/Components/Message.php</span><br><span class="line">resources/views/components/message.blade.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/View/Components/Message.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$type</span>; <span class="comment">// 定义public属性后, 可以在组件里使用属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$message</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;type = <span class="variable">$type</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;message = <span class="variable">$message</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;components.message&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/components/message.blade.php</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- Be present above all <span class="keyword">else</span>. - Naval Ravikant --&gt;</span><br><span class="line">    这是一个组件 内容</span><br><span class="line">    类型是： &#123;&#123;<span class="variable">$type</span>&#125;&#125;</span><br><span class="line">    内容是： &#123;&#123;<span class="variable">$message</span>&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/first.blade.php</span></span><br><span class="line">&lt;x-&#123;&#123;&#125;&#125;/&gt;</span><br><span class="line">&lt;x-message/&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    &lt;x-message type=<span class="string">&quot;success&quot;</span> :message=<span class="string">&quot;<span class="subst">$message</span>&quot;</span>/&gt;</span><br><span class="line">&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<h2 id="013组件中的插槽和内部插槽"><a href="#013组件中的插槽和内部插槽" class="headerlink" title="013组件中的插槽和内部插槽"></a>013组件中的插槽和内部插槽</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:component Alert</span><br></pre></td></tr></table></figure>

<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/components/alert.blade.php</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;&#123;<span class="variable">$solt</span>&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/first.blade.php</span></span><br><span class="line">&lt;x-alert&gt; 弹出数据 &lt;/x-alert&gt;</span><br></pre></td></tr></table></figure>

<h3 id="内部插槽"><a href="#内部插槽" class="headerlink" title="内部插槽"></a>内部插槽</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/components/alert.blade.php</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;&#123;<span class="variable">$solt</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="variable">$title</span>&#125;&#125; <span class="comment">// 使用内部插槽, x-slot的name属性</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/first.blade.php</span></span><br><span class="line"><span class="comment">// 内部插槽, 用x-slot的name属性定义</span></span><br><span class="line">&lt;x-alert&gt; &lt;x-slot name=<span class="string">&quot;title&quot;</span>&gt;首页&lt;/x-slot&gt; 弹出数据 &lt;/x-alert&gt;</span><br></pre></td></tr></table></figure>

<h2 id="014内联组件"><a href="#014内联组件" class="headerlink" title="014内联组件"></a>014内联组件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:component MessageBox --inline</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/View/Components/MessageBox.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>; <span class="comment">// 定义public属性后, 可以在组件里使用属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;&lt;&lt;<span class="string">&#x27;blade&#x27;</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">	&#123;&#123;<span class="variable">$name</span>&#125;&#125; <span class="comment">// 111 // 组件的基本使用</span></span><br><span class="line">	&#123;&#123;<span class="variable">$slot</span>&#125;&#125; <span class="comment">// 222 // 组件的插槽</span></span><br><span class="line">	&#123;&#123;<span class="variable">$my_message</span>&#125;&#125; <span class="comment">// 我的信息 // 组件的内部插槽</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">blade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/first.blade.php</span></span><br><span class="line">&lt;x-message-box name=<span class="string">&quot;111&quot;</span>/&gt; <span class="comment">// 组件的基本使用</span></span><br><span class="line">&lt;x-message-box name=<span class="string">&quot;111&quot;</span>&gt;<span class="number">222</span>&lt;/x-message-box&gt; <span class="comment">// 组件的插槽</span></span><br><span class="line">&lt;x-message-box name=<span class="string">&quot;111&quot;</span>&gt; &lt;x-slot name=<span class="string">&quot;my_message&quot;</span>&gt;我的信息&lt;/x-slot&gt; <span class="number">222</span>&lt;/x-message-box&gt; <span class="comment">// 组件的内部插槽</span></span><br></pre></td></tr></table></figure>

<h2 id="015创建并将表单提交至服务器"><a href="#015创建并将表单提交至服务器" class="headerlink" title="015创建并将表单提交至服务器"></a>015创建并将表单提交至服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:controller StudentController --resource</span><br><span class="line">php artisan make:request StoreStudentData</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line">Route::resource(<span class="string">&quot;student&quot;</span>, StudentCrontroller::class);</span><br></pre></td></tr></table></figure>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Controllers/StudnetController.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&quot;student.index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&quot;student.create&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">StoreStudentData <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$request</span>-&gt;validated();</span><br><span class="line">    var_dump(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/student/index.blade.php</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;&#123;route(&quot;</span>student.create<span class="string">&quot;)&#125;&#125;&quot;</span>&gt;添加&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resources/views/student/create.blade.php</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&#123;&#123;route(&quot;</span>student.store<span class="string">&quot;)&#125;&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    @csrf</span><br><span class="line">    姓名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;&#123;&#123;old(&quot;</span>name<span class="string">&quot;)&#125;&#125;&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    @<span class="built_in">error</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    &#123;&#123;<span class="variable">$message</span>&#125;&#125;&lt;br&gt;</span><br><span class="line">    @enderror</span><br><span class="line">    邮箱: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;&#123;&#123;old(&quot;</span>email<span class="string">&quot;)&#125;&#125;&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    @<span class="built_in">error</span>(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">    &#123;&#123;<span class="variable">$message</span>&#125;&#125;&lt;br&gt;</span><br><span class="line">    @enderror</span><br><span class="line">    手机: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;mobile&quot;</span> value=<span class="string">&quot;&#123;&#123;old(&quot;</span>mobile<span class="string">&quot;)&#125;&#125;&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    @<span class="built_in">error</span>(<span class="string">&quot;mobile&quot;</span>)</span><br><span class="line">    &#123;&#123;<span class="variable">$message</span>&#125;&#125;&lt;br&gt;</span><br><span class="line">    @enderror</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="016017018019表单数据验证-接015"><a href="#016017018019表单数据验证-接015" class="headerlink" title="016017018019表单数据验证 接015"></a>016017018019表单数据验证 接015</h2><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Requests/StoreStudentData.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;required|min:6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span> =&gt; <span class="string">&quot;required&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mobile&quot;</span> =&gt; <span class="string">&quot;required&quot;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&quot;name.required&quot;</span> =&gt; <span class="string">&quot;Name is needed&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email.required&quot;</span> =&gt; <span class="string">&quot;email is needed&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mobile.required&quot;</span> =&gt; <span class="string">&quot;mobile is needed&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name.min&quot;</span> =&gt; <span class="string">&quot;Name 必须 大于6个字符&quot;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="020数据库连接基础"><a href="#020数据库连接基础" class="headerlink" title="020数据库连接基础"></a>020数据库连接基础</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .env</span></span><br><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line">DB_DATABASE=laravel85</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=root</span><br><span class="line"><span class="comment">// config/database.php</span></span><br></pre></td></tr></table></figure>

<h2 id="021022运行数据库原始查询"><a href="#021022运行数据库原始查询" class="headerlink" title="021022运行数据库原始查询"></a>021022运行数据库原始查询</h2><h3 id="DB-insert"><a href="#DB-insert" class="headerlink" title="DB::insert()"></a>DB::insert()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$users</span> = DB::insert(<span class="string">&quot;insert into students (name, age,address) values (&#x27;hahaha&#x27;, 10, &#x27;address&#x27;)&quot;</span>);</span><br><span class="line"><span class="comment">// 返回true或false</span></span><br></pre></td></tr></table></figure>

<h3 id="DB-update"><a href="#DB-update" class="headerlink" title="DB::update()"></a>DB::update()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$users</span> = DB::update(<span class="string">&quot;update students set age = &#x27;10&#x27; where name = ?&quot;</span>, [<span class="string">&#x27;hahaha&#x27;</span>]);</span><br><span class="line"><span class="comment">// 返回更新行数n</span></span><br></pre></td></tr></table></figure>

<h3 id="DB-select"><a href="#DB-select" class="headerlink" title="DB::select()"></a>DB::select()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$users</span> = DB::select(<span class="string">&quot;select * from students where id = :id&quot;</span>, [<span class="string">&quot;id&quot;</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 返回二维数组或array&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="DB-delete"><a href="#DB-delete" class="headerlink" title="DB::delete()"></a>DB::delete()</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$users</span> = DB::delete(<span class="string">&quot;delete from students where `name` = ?&quot;</span>, [<span class="string">&#x27;hahaha&#x27;</span>]);</span><br><span class="line"><span class="comment">// 返回删除行数n</span></span><br></pre></td></tr></table></figure>

<h2 id="023迁移和使用方法"><a href="#023迁移和使用方法" class="headerlink" title="023迁移和使用方法"></a>023迁移和使用方法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:migration create_students_table # 创建</span><br><span class="line">php artisan migrate # 迁移</span><br><span class="line">php artisan migrate --seed # 迁移并生成faker数据</span><br><span class="line">php artisan migrate:rollback # 回滚</span><br><span class="line">php artisan migrate:refresh # 迁移 + 回滚</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// database/migrations/2021_05_16_***_create_students_table.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">&#x27;students&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;id(); <span class="comment">// id</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">&quot;name&quot;</span>, <span class="number">120</span>); <span class="comment">// string</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">&quot;email&quot;</span>, <span class="number">50</span>)-&gt;nullable(); <span class="comment">// 可以为空</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">&quot;mobile&quot;</span>, <span class="number">30</span>)-&gt;nullable();</span><br><span class="line">            <span class="variable">$table</span>-&gt;integer(<span class="string">&quot;age&quot;</span>)-&gt;default(<span class="number">0</span>); <span class="comment">// 默认值</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;enum(<span class="string">&quot;gender&quot;</span>, [<span class="string">&quot;male&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;others&quot;</span>]); <span class="comment">// 枚举</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;text(<span class="string">&quot;address&quot;</span>)-&gt;comment(<span class="string">&quot;地址&quot;</span>); <span class="comment">// comment描述</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamp(<span class="string">&quot;created_at&quot;</span>)-&gt;useCurrent(); <span class="comment">// 当前时间戳</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamp(<span class="string">&quot;updated_at&quot;</span>)-&gt;useCurrent();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="024迁移和列修饰符将列添加到表"><a href="#024迁移和列修饰符将列添加到表" class="headerlink" title="024迁移和列修饰符将列添加到表"></a>024迁移和列修饰符将列添加到表</h2><p><a href="https://learnku.com/docs/laravel/8.x/migrations/9403">https://learnku.com/docs/laravel/8.x/migrations/9403</a></p>
<h2 id="025Seeder基础知识"><a href="#025Seeder基础知识" class="headerlink" title="025Seeder基础知识"></a>025Seeder基础知识</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:seeder StudentSeeder # 生成学生seeder</span><br><span class="line">php artisan db:seed # 执行 database/seeders/DatabaseSeeder.php</span><br><span class="line">php artisan db:seed --class=StudentSeeder # 执行指定seeder</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// database/seeders/StudentSeeder.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 生成一条数据</span></span><br><span class="line">        DB::table(<span class="string">&quot;students&quot;</span>)-&gt;insert([</span><br><span class="line">            <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span> =&gt; <span class="string">&quot;xiaobao@gmail.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mobile&quot;</span> =&gt; <span class="string">&quot;1624645324254&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span> =&gt; <span class="number">56</span>,</span><br><span class="line">            <span class="string">&quot;gender&quot;</span> =&gt; <span class="string">&quot;male&quot;</span>,</span><br><span class="line">            <span class="string">&quot;address&quot;</span> =&gt; <span class="string">&quot;上海市嘉定区江桥&quot;</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// faker 生成伪造数据 一条</span></span><br><span class="line">        <span class="variable">$faker</span> = \Faker\Factory::create();</span><br><span class="line">        DB::table(<span class="string">&quot;students&quot;</span>)-&gt;insert([</span><br><span class="line">            <span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$faker</span>-&gt;name,</span><br><span class="line">            <span class="string">&quot;email&quot;</span> =&gt; <span class="variable">$faker</span>-&gt;safeEmail,</span><br><span class="line">            <span class="string">&quot;mobile&quot;</span> =&gt; <span class="variable">$faker</span>-&gt;phoneNumber,</span><br><span class="line">            <span class="string">&quot;age&quot;</span> =&gt; <span class="variable">$faker</span>-&gt;numberBetween(<span class="number">20</span>, <span class="number">40</span>),</span><br><span class="line">            <span class="string">&quot;gender&quot;</span> =&gt; <span class="variable">$faker</span>-&gt;randomElement([<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="string">&#x27;others&#x27;</span>]),</span><br><span class="line">            <span class="string">&quot;address&quot;</span> =&gt; <span class="variable">$faker</span>-&gt;address</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>注: 修改<code>faker</code>语言, <code>config/app.php</code>文件<code>&#39;faker_locale&#39; =&gt; &#39;zh_CN&#39;,</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// database/seeders/DatabaseSeeder.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// \App\Models\User::factory(10)-&gt;create();</span></span><br><span class="line"><span class="comment">//        $this-&gt;call(</span></span><br><span class="line"><span class="comment">//            StudentsSeeder::class</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line">        \App\Models\Student::factory(<span class="number">10</span>)-&gt;create();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="026faker库的使用"><a href="#026faker库的使用" class="headerlink" title="026faker库的使用"></a>026faker库的使用</h2><p>laravel自带此库</p>
<p><a href="https://github.com/fzaninotto/Faker">https://github.com/fzaninotto/Faker</a></p>
<h2 id="027工厂基础和seeder使用工厂"><a href="#027工厂基础和seeder使用工厂" class="headerlink" title="027工厂基础和seeder使用工厂"></a>027工厂基础和seeder使用工厂</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:model Student # 建model, 工厂依赖model</span><br><span class="line">php artisan make:factory StudentFactory # 建工厂</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// database/factories/StudentFactory.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">definition</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&quot;name&quot;</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;name,</span><br><span class="line">            <span class="string">&quot;email&quot;</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;safeEmail,</span><br><span class="line">            <span class="string">&#x27;mobile&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;phoneNumber,</span><br><span class="line">            <span class="string">&quot;age&quot;</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;numberBetween(<span class="number">20</span>, <span class="number">40</span>),</span><br><span class="line">            <span class="string">&quot;gender&quot;</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;randomElement([</span><br><span class="line">                <span class="string">&quot;male&quot;</span>,</span><br><span class="line">                <span class="string">&quot;female&quot;</span>,</span><br><span class="line">                <span class="string">&quot;others&quot;</span></span><br><span class="line">            ]),</span><br><span class="line">            <span class="string">&quot;address&quot;</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;address</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="028模型基础及成员变量的使用"><a href="#028模型基础及成员变量的使用" class="headerlink" title="028模型基础及成员变量的使用"></a>028模型基础及成员变量的使用</h2><p><a href="https://learnku.com/docs/laravel/8.x/eloquent/9406">https://learnku.com/docs/laravel/8.x/eloquent/9406</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:mode Employee --all</span><br><span class="line"><span class="meta">#</span><span class="bash"> Model created successfully.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Factory created successfully.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Created Migration: 2021_05_20_010345_create_employees_table</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Seeder created successfully.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Controller created successfully.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/Employee.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HasFactory</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&quot;tpl_employee&quot;</span>; <span class="comment">// 定义表名 默认employee</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$primaryKey</span> = <span class="string">&quot;student_id&quot;</span>; <span class="comment">// 定义主键 默认id</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$keyType</span> = <span class="string">&quot;string&quot;</span>; <span class="comment">// 主键不是整数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$incrementing</span> = <span class="literal">false</span>; <span class="comment">// 主键不自增</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> CREATED_AT = <span class="string">&quot;create_date&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> UPDATED_AT = <span class="string">&quot;last_update&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>; <span class="comment">// 不存时间戳, miration建表语句中也要去掉timestamp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="029创建表单数据并保存到数据表里"><a href="#029创建表单数据并保存到数据表里" class="headerlink" title="029创建表单数据并保存到数据表里"></a>029创建表单数据并保存到数据表里</h2><p><a href="https://www.youtube.com/watch?v=0m5h45_bQgE&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=29">https://www.youtube.com/watch?v=0m5h45_bQgE&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=29</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan serve</span><br><span class="line">php artisan migrate</span><br><span class="line">php artisan make:model Student -a </span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate a migration, seeder, factory, and resource controller <span class="keyword">for</span> the model</span></span><br></pre></td></tr></table></figure>

<h2 id="030会话Flash消息的设置和表单重定向"><a href="#030会话Flash消息的设置和表单重定向" class="headerlink" title="030会话Flash消息的设置和表单重定向"></a>030会话Flash消息的设置和表单重定向</h2><p><a href="https://www.youtube.com/watch?v=QNvUKf9pouc&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=30">https://www.youtube.com/watch?v=//QNvUKf9pouc&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=30</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单提交后, flash消息回显</span></span><br><span class="line"><span class="comment">// session()-&gt;flash(&quot;key&quot;, &quot;message&quot;);</span></span><br><span class="line"><span class="variable">$request</span>-&gt;seession()-&gt;flash(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> redirect(route(<span class="string">&quot;users/create&quot;</span>));</span><br><span class="line">@<span class="keyword">if</span>(session()-&gt;has(<span class="string">&quot;success&quot;</span>))</span><br><span class="line">    &lt;h3&gt;&#123;&#123;session(<span class="string">&quot;success&quot;</span>)&#125;&#125;&lt;/h3&gt;</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<h2 id="031数据库模型从表中查数据"><a href="#031数据库模型从表中查数据" class="headerlink" title="031数据库模型从表中查数据"></a>031数据库模型从表中查数据</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Student::all();Student::get();</span><br><span class="line">Student::where()-&gt;first(); <span class="comment">// 查一条</span></span><br><span class="line">Student::find(<span class="number">1</span>); <span class="comment">// 查一条</span></span><br><span class="line">Student::find([<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>]); <span class="comment">// 查多条</span></span><br><span class="line">Student::firstWhere(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">// 查一条</span></span><br></pre></td></tr></table></figure>

<h2 id="032数据库到布局-model到布局"><a href="#032数据库到布局-model到布局" class="headerlink" title="032数据库到布局/model到布局"></a>032数据库到布局/<code>model</code>到布局</h2><p><a href="https://www.youtube.com/watch?v=gDvxJLmsxZw&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=32">https://www.youtube.com/watch?v=gDvxJLmsxZw&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=32</a></p>
<h2 id="033删除操作"><a href="#033删除操作" class="headerlink" title="033删除操作"></a>033删除操作</h2><p><a href="https://www.youtube.com/watch?v=gDvxJLmsxZw&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=33">https://www.youtube.com/watch?v=gDvxJLmsxZw&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=33</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$student</span> = Student::find(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$student</span>-&gt;delete();</span><br></pre></td></tr></table></figure>

<h2 id="034更新操作"><a href="#034更新操作" class="headerlink" title="034更新操作"></a>034更新操作</h2><p><a href="https://www.youtube.com/watch?v=NzM1MiguPiA&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=34">https://www.youtube.com/watch?v=NzM1MiguPiA&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=34</a></p>
<h2 id="035查询生成器-select"><a href="#035查询生成器-select" class="headerlink" title="035查询生成器 select"></a>035查询生成器 select</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;get();</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;email as email_address&quot;</span>)-&gt;get();</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">5</span>)-&gt;select()-&gt;get();</span><br></pre></td></tr></table></figure>

<h2 id="036选择查询-and-or"><a href="#036选择查询-and-or" class="headerlink" title="036选择查询 and or"></a>036选择查询 and or</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">3</span>)-&gt;where(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)-&gt;get();</span><br><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">3</span>)-&gt;where(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)-&gt;orWhere(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;Abc@qq.com&#x27;</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;where(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)-&gt;orWhere(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">3</span>)-&gt;where(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;Abc@qq.com&#x27;</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;whereBetween(<span class="string">&#x27;id&#x27;</span>, [<span class="number">2</span>,<span class="number">30</span>])-&gt;get();</span><br><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;whereIn(<span class="string">&#x27;id&#x27;</span>, [<span class="number">2</span>,<span class="number">30</span>])-&gt;get();</span><br></pre></td></tr></table></figure>

<h2 id="037连接查询-join-left-right"><a href="#037连接查询-join-left-right" class="headerlink" title="037连接查询 join left right"></a>037连接查询 join left right</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;join(<span class="string">&#x27;courses&#x27;</span>,<span class="string">&#x27;students.id&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;courses.student_id&#x27;</span>)-&gt;get();</span><br><span class="line"><span class="variable">$students</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-select(<span class="string">&#x27;&#x27;</span>)&gt;join(<span class="string">&#x27;courses&#x27;</span>,<span class="string">&#x27;students.id&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;courses.student_id&#x27;</span>)-&gt;get();</span><br></pre></td></tr></table></figure>

<h2 id="038插入和更新"><a href="#038插入和更新" class="headerlink" title="038插入和更新"></a>038插入和更新</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;insert([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">20</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$insert_id</span> = DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;insertGetId([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">20</span></span><br><span class="line">]);</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;insert([</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">20</span>],</span><br><span class="line">        [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">22</span>],</span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">5</span>)-&gt;update([</span><br><span class="line">	<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">99</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h2 id="039更新-删除和截断"><a href="#039更新-删除和截断" class="headerlink" title="039更新 删除和截断"></a>039更新 删除和截断</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;updateOrInsert(</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;test&#x27;</span>], <span class="comment">//条件</span></span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;hahaha&#x27;</span>, <span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">55</span>] <span class="comment">// data</span></span><br><span class="line">);</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;where(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;test&#x27;</span>)-&gt;delete();</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;truncate();</span><br></pre></td></tr></table></figure>

<h2 id="040中间件基础关于全局中间件"><a href="#040中间件基础关于全局中间件" class="headerlink" title="040中间件基础关于全局中间件"></a>040中间件基础关于全局中间件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:middleware CountryCheck</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Kernel.php $middleware</span></span><br><span class="line">\App\Http\Middleware\CountryCheck::class,</span><br><span class="line"><span class="comment">// app/Http/Middleware/CountryCheck.php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request</span>-&gt;country &amp;&amp; !in_array(<span class="variable">$request</span>-&gt;country, [<span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;in&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;noaccess&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="041中间件组"><a href="#041中间件组" class="headerlink" title="041中间件组"></a>041中间件组</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Kernel.php $middlewareGroups</span></span><br><span class="line"><span class="string">&#x27;apprestrict&#x27;</span> =&gt;[</span><br><span class="line">    \App\Http\Middleware\CountryCheck::class,</span><br><span class="line">],</span><br><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line">Route::get(<span class="string">&quot;/sample1&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sample 1 page&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">Route::get(<span class="string">&quot;/sample2&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sample 2 page&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">Route::group([<span class="string">&#x27;middleware&#x27;</span> =&gt;[<span class="string">&#x27;apprestrict&#x27;</span>]], <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::get(<span class="string">&quot;/sample3&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;sample 3 page&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    Route::get(<span class="string">&quot;/sample4&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;sample 4 page&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="042路由中间件"><a href="#042路由中间件" class="headerlink" title="042路由中间件"></a>042路由中间件</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Kernel.php $routeMiddleware</span></span><br><span class="line"><span class="string">&#x27;ck&#x27;</span> =&gt; \App\Http\Middleware\CountryCheck::class,</span><br><span class="line"><span class="comment">// routes/web.php</span></span><br><span class="line">Route::get(<span class="string">&quot;/sample5&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sample 5 page&quot;</span>;</span><br><span class="line">&#125;)-&gt;middleware(<span class="string">&#x27;ck&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="043使用GET-REST-APIs"><a href="#043使用GET-REST-APIs" class="headerlink" title="043使用GET REST APIs"></a>043使用GET REST APIs</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:countroller PostController</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Controllers/PostController.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = Http::get(<span class="string">&quot;http://jsonplaceholder.typicode.com/posts&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> json_decode(<span class="variable">$posts</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="044本地化-多语言网站概念"><a href="#044本地化-多语言网站概念" class="headerlink" title="044本地化 多语言网站概念"></a>044本地化 多语言网站概念</h2><p><a href="https://www.youtube.com/watch?v=vn-OTkiYJLI&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=44">https://www.youtube.com/watch?v=vn-OTkiYJLI&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=44</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:controller ServiceController</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Http/Controllers/ServiceController.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">service</span>(<span class="params"><span class="variable">$locale</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    App::setLocale(<span class="variable">$locale</span>);</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&quot;lang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// resources/views/lang.blade.php</span></span><br><span class="line">&lt;h3&gt;&#123;&#123; __(<span class="string">&#x27;app.langtest&#x27;</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123; trans(<span class="string">&#x27;app.langtest&#x27;</span>) &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;@lang(<span class="string">&#x27;app.langtest&#x27;</span>)&lt;/h3&gt;</span><br><span class="line"><span class="comment">// resources/lang/en/app.php</span></span><br><span class="line"><span class="comment">// resources/lang/zh_CN/app.php</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&quot;langtest&quot;</span> =&gt; <span class="string">&quot;欢迎来到实力至上主义的教室&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="045访问器的概念"><a href="#045访问器的概念" class="headerlink" title="045访问器的概念"></a>045访问器的概念</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/Student.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmailAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strtoupper(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreatedAtAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>, strtotime(<span class="variable">$value</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app/Http/Controllers/StudentController.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$students</span> = Student::all();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$students</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="046修改器的概念"><a href="#046修改器的概念" class="headerlink" title="046修改器的概念"></a>046修改器的概念</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/Student.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMobileAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;attributes[<span class="string">&quot;mobile&quot;</span>] = <span class="string">&quot;+91&quot;</span> . <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="047ORM一对一的关系"><a href="#047ORM一对一的关系" class="headerlink" title="047ORM一对一的关系"></a>047ORM一对一的关系</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/User.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Phone::class, <span class="string">&#x27;user_id&#x27;</span>, <span class="string">&#x27;id&#x27;</span>); <span class="comment">// 关联的model/phone, 关联的model字段/phone.user_id, 当前的model字段/user.id</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app/Models/Phone.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class, <span class="string">&#x27;user_id&#x27;</span>, <span class="string">&#x27;id&#x27;</span>); <span class="comment">// 反向关联的model/user, 当前model关联user/id, 反向关联model的phone/user_id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="048一对多"><a href="#048一对多" class="headerlink" title="048一对多"></a>048一对多</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/User.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phones</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Phone::class); <span class="comment">// 第二个第三个参数会自动识别 user_id, id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="049一对一直通关系"><a href="#049一对一直通关系" class="headerlink" title="049一对一直通关系"></a>049一对一直通关系</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person -&gt; Broker -&gt; Home</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">homeInformation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOneThrough(Home::class, Broker::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="050一对多直通关系"><a href="#050一对多直通关系" class="headerlink" title="050一对多直通关系"></a>050一对多直通关系</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person -&gt; Broker -&gt; Homes</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">homeList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasManyThrough(Home::class, Broker::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="051多对多"><a href="#051多对多" class="headerlink" title="051多对多"></a>051多对多</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/User.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">roles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belangsToMany(Role::class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app/Models/Role.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belangsToMany(User::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="052如何使用列名"><a href="#052如何使用列名" class="headerlink" title="052如何使用列名"></a>052如何使用列名</h2><p>看047</p>
<h2 id="053身份验证基本描述"><a href="#053身份验证基本描述" class="headerlink" title="053身份验证基本描述"></a>053身份验证基本描述</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer require laravel/breeze --dev</span><br><span class="line">php artisan help breeze:install</span><br><span class="line">npm install &amp;&amp; npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="054脚手架文件-功能"><a href="#054脚手架文件-功能" class="headerlink" title="054脚手架文件/功能"></a>054脚手架文件/功能</h2><h2 id="055JetStream"><a href="#055JetStream" class="headerlink" title="055JetStream"></a>055JetStream</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer require laravel/jetstream</span><br><span class="line">php artisan jetstream:install livewire</span><br><span class="line">php artisan migrate</span><br><span class="line">npm install &amp;&amp; npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="056关于脚手架文件-Auth的JetStream"><a href="#056关于脚手架文件-Auth的JetStream" class="headerlink" title="056关于脚手架文件 Auth的JetStream"></a>056关于脚手架文件 Auth的JetStream</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/fortify.php</span></span><br><span class="line"><span class="string">&#x27;features&#x27;</span> =&gt; [</span><br><span class="line">    <span class="comment">// 注释删除注册功能</span></span><br><span class="line">    Features::registration(), <span class="comment">// 注册</span></span><br><span class="line">    Features::resetPasswords(), <span class="comment">// 重置密码</span></span><br><span class="line">    <span class="comment">// Features::emailVerification(),</span></span><br><span class="line">    Features::updateProfileInformation(), <span class="comment">// 更新个人信息</span></span><br><span class="line">    Features::updatePasswords(), <span class="comment">// 更新密码</span></span><br><span class="line">    Features::twoFactorAuthentication([ <span class="comment">// 二次认证</span></span><br><span class="line">        <span class="string">&#x27;confirmPassword&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ]),</span><br><span class="line">],</span><br><span class="line"><span class="comment">// config/jetstream.php</span></span><br><span class="line"><span class="string">&#x27;features&#x27;</span> =&gt; [</span><br><span class="line">    <span class="comment">// Features::termsAndPrivacyPolicy(),</span></span><br><span class="line">    <span class="comment">// Features::profilePhotos(), // 照片</span></span><br><span class="line">    <span class="comment">// Features::api(),</span></span><br><span class="line">    <span class="comment">// Features::teams([&#x27;invitations&#x27; =&gt; true]),</span></span><br><span class="line">    Features::accountDeletion(), <span class="comment">// 删除用户</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h2 id="057脚手架文件和身份验证"><a href="#057脚手架文件和身份验证" class="headerlink" title="057脚手架文件和身份验证"></a>057脚手架文件和身份验证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer require laravel/jetstream</span><br><span class="line">php artisan jetstream:install inertia</span><br><span class="line">php artisan migrate</span><br><span class="line">npm install &amp;&amp; npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="058什么是stub-存根定制"><a href="#058什么是stub-存根定制" class="headerlink" title="058什么是stub, 存根定制"></a>058什么是stub, 存根定制</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:controller EmployeeController</span><br><span class="line">php artisan make:model Employee</span><br><span class="line">php artisan stub:publish</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/stubs 目录</span><br></pre></td></tr></table></figure>

<h2 id="059路由模型绑定"><a href="#059路由模型绑定" class="headerlink" title="059路由模型绑定"></a>059路由模型绑定</h2><h2 id="060URL生成器功能"><a href="#060URL生成器功能" class="headerlink" title="060URL生成器功能"></a>060URL生成器功能</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url()</span><br><span class="line">route()</span><br><span class="line">action()</span><br></pre></td></tr></table></figure>

<h2 id="061关于资源控制器"><a href="#061关于资源控制器" class="headerlink" title="061关于资源控制器"></a>061关于资源控制器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:controller MemberController -r</span><br><span class="line">php artisan route:list</span><br></pre></td></tr></table></figure>

<h2 id="062063CURD"><a href="#062063CURD" class="headerlink" title="062063CURD"></a>062063CURD</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:model Device -m # 创建模型和迁移文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> php artisan make:model Device -a <span class="comment"># 创建所有</span></span></span><br><span class="line">php artisan migrate # 迁移</span><br><span class="line">php artisan make:controller DeviceController -r --model=Device # 创建控制器use Device model</span><br></pre></td></tr></table></figure>

<h2 id="064布局"><a href="#064布局" class="headerlink" title="064布局"></a>064布局</h2><h2 id="071thinker简介"><a href="#071thinker简介" class="headerlink" title="071thinker简介"></a>071thinker简介</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan thinker</span><br><span class="line">echo &quot;11&quot;;</span><br><span class="line">Student::insert([&quot;name&quot;=&gt;&quot;hahaha&quot;,&#x27;created_at&#x27;=&gt;new DateTime()]);</span><br><span class="line">Student::create([&quot;name&quot;=&gt;&quot;hahaha&quot;,&#x27;created_at&#x27;=&gt;new DateTime()]);</span><br><span class="line">Student::all();</span><br><span class="line">Student::find(1);</span><br><span class="line">Student::where(&#x27;name&#x27;=&gt;&#x27;hahaha&#x27;)-&gt;get();</span><br><span class="line">Student::where(&#x27;name&#x27;=&gt;&#x27;hahaha&#x27;)-&gt;first();</span><br><span class="line">Student::where(&#x27;name&#x27;=&gt;&#x27;hahaha&#x27;)-&gt;update([&#x27;name&#x27;=&gt;&#x27;222&#x27;]);</span><br><span class="line">Student::where(&#x27;id&#x27;=&gt;2)-&gt;delete();</span><br></pre></td></tr></table></figure>

<h2 id="072thinker使用DB类"><a href="#072thinker使用DB类" class="headerlink" title="072thinker使用DB类"></a>072thinker使用DB类</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;insert([ <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;created_at&#x27;</span>=&gt;<span class="keyword">new</span> DateTime() ]);</span><br><span class="line">DB::table(<span class="string">&#x27;students&#x27;</span>)-&gt;get();</span><br><span class="line">where, first, update, delete</span><br></pre></td></tr></table></figure>

<h2 id="073关于model事件-1"><a href="#073关于model事件-1" class="headerlink" title="073关于model事件-1"></a>073关于model事件-1</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Create,update,delete,save: creating() &amp; created() # 前 后</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/Device.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::boot();</span><br><span class="line">    <span class="built_in">static</span>::creating(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$item</span></span>)</span>&#123;</span><br><span class="line">        Log::info( <span class="string">&quot;访问前&quot;</span> . <span class="variable">$item</span> );</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="074075Events-Listener监听器-23"><a href="#074075Events-Listener监听器-23" class="headerlink" title="074075Events Listener监听器-23"></a>074075Events Listener监听器-23</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:event StudentCreatingEvent</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Models/Device.php</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$dispatchesEvents</span> = [</span><br><span class="line">    <span class="string">&#x27;creating&#x27;</span> =&gt; StudentCreatingEvent::class,</span><br><span class="line">];</span><br><span class="line">php artisan make:listener StudentCreatingListener --event=StudentCreatingEvent</span><br></pre></td></tr></table></figure>

<h2 id="076Observer（观察者）模型事件-4"><a href="#076Observer（观察者）模型事件-4" class="headerlink" title="076Observer（观察者）模型事件-4"></a>076Observer（观察者）模型事件-4</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:observer StudentObserver --model=Student</span><br></pre></td></tr></table></figure>

<h2 id="077自定义HTTP-404页面"><a href="#077自定义HTTP-404页面" class="headerlink" title="077自定义HTTP 404页面"></a>077自定义HTTP 404页面</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan vendor:publish --tag=laravel-errors</span><br></pre></td></tr></table></figure>

<h2 id="081创建自定义artisan命令"><a href="#081创建自定义artisan命令" class="headerlink" title="081创建自定义artisan命令"></a>081创建自定义artisan命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:command UserInfo</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Console/Commands/UserInfo.php</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$signature</span> = <span class="string">&#x27;user:info&#x27;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$description</span> = <span class="string">&#x27;查询用户信息&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="keyword">$this</span>-&gt;ask(<span class="string">&quot;你的名字?&quot;</span>);</span><br><span class="line">    <span class="comment">//        $this-&gt;info(&#x27;输入成功!&#x27; . $name);</span></span><br><span class="line">    <span class="comment">//        $this-&gt;line(&#x27;输入成功!&#x27; . $name);</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;输入成功!&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="082自定义命令和model交互"><a href="#082自定义命令和model交互" class="headerlink" title="082自定义命令和model交互"></a>082自定义命令和model交互</h2><p><a href="https://www.youtube.com/watch?v=XMUArtkDy0A&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=82">https://www.youtube.com/watch?v=XMUArtkDy0A&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=82</a></p>
<h2 id="083使用Gmail-SMTP发邮件"><a href="#083使用Gmail-SMTP发邮件" class="headerlink" title="083使用Gmail SMTP发邮件"></a>083使用Gmail SMTP发邮件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:controller SampleController</span><br><span class="line">php artisan make:mail TestMail</span><br></pre></td></tr></table></figure>

<h2 id="084markdown发送邮件"><a href="#084markdown发送邮件" class="headerlink" title="084markdown发送邮件"></a>084markdown发送邮件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan make:mail TestMail2 --markdown=emails.sample-mail2</span><br></pre></td></tr></table></figure>

<h2 id="086markdown自定义样式"><a href="#086markdown自定义样式" class="headerlink" title="086markdown自定义样式"></a>086markdown自定义样式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php artisan vendor:publish --tag=laravel-mail</span><br></pre></td></tr></table></figure>

<h2 id="087多数据库链接"><a href="#087多数据库链接" class="headerlink" title="087多数据库链接"></a>087多数据库链接</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$connection</span> = <span class="string">&quot;mysql_2&quot;</span>; <span class="comment"># model</span></span><br><span class="line">DB::connection(<span class="string">&quot;mysql_2&quot;</span>)-&gt;table(<span class="string">&#x27;procuts&#x27;</span>)-&gt;get(); <span class="comment">// controller</span></span><br><span class="line">Schena::connection(<span class="string">&#x27;mysql_2&#x27;</span>)-&gt;create() <span class="comment">// migration</span></span><br></pre></td></tr></table></figure>

<h2 id="088Helpers使用"><a href="#088Helpers使用" class="headerlink" title="088Helpers使用"></a>088Helpers使用</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/Helpers.php</span></span><br><span class="line"><span class="comment">// composer.json</span></span><br><span class="line"><span class="string">&quot;autoload&quot;</span></span><br><span class="line">    <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;app/Helpers.php&quot;</span></span><br><span class="line">    ]</span><br><span class="line">composer dump-autoload</span><br></pre></td></tr></table></figure>

<h2 id="089路由前缀"><a href="#089路由前缀" class="headerlink" title="089路由前缀"></a>089路由前缀</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::prefix(<span class="string">&#x27;admin&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="091分页"><a href="#091分页" class="headerlink" title="091分页"></a>091分页</h2><p><a href="https://www.youtube.com/watch?v=CaHF1zbevwg&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=91">https://www.youtube.com/watch?v=CaHF1zbevwg&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=91</a></p>
<p><a href="https://onlinewebtutorblog.com/step-by-step-laravel-8-pagination-tutorial/">https://onlinewebtutorblog.com/step-by-step-laravel-8-pagination-tutorial/</a></p>
<h2 id="092trait的概念"><a href="#092trait的概念" class="headerlink" title="092trait的概念"></a>092trait的概念</h2><p><a href="https://onlinewebtutorblog.com/concept-of-trait-in-laravel-8-tutorial-with-example/">https://onlinewebtutorblog.com/concept-of-trait-in-laravel-8-tutorial-with-example/</a></p>
<h2 id="093多重身份验证和角色登录访问"><a href="#093多重身份验证和角色登录访问" class="headerlink" title="093多重身份验证和角色登录访问"></a>093多重身份验证和角色登录访问</h2><p><a href="https://www.youtube.com/watch?v=A0M4qn5L03I&list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&index=93">https://www.youtube.com/watch?v=A0M4qn5L03I&amp;list=PLT9miexWCpPUCBjFVFR_05Rr8pvLeoHO0&amp;index=93</a></p>
<h2 id="094Voyager管理面板"><a href="#094Voyager管理面板" class="headerlink" title="094Voyager管理面板"></a>094Voyager管理面板</h2>]]></content>
  </entry>
  <entry>
    <title>面试汇总</title>
    <url>/projects/4537645869/</url>
    <content><![CDATA[<h2 id="面试汇总"><a href="#面试汇总" class="headerlink" title="面试汇总"></a>面试汇总</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="mysql隔离级别、如何避免脏读和幻读"><a href="#mysql隔离级别、如何避免脏读和幻读" class="headerlink" title="mysql隔离级别、如何避免脏读和幻读"></a>mysql隔离级别、如何避免脏读和幻读</h4><p><a href="https://blog.csdn.net/johnstrive/article/details/46724315">https://blog.csdn.net/johnstrive/article/details/46724315</a></p>
<ol>
<li><strong>Read Uncommitted（读取未提交内容）</strong><br>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</li>
<li><strong>Read Committed（读取提交内容）</strong><br>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</li>
<li><strong>Repeatable Read（可重读）</strong><br>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</li>
<li><strong>Serializable（可串行化）</strong><br>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。<br>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：</li>
</ol>
<p><strong>脏读(Drity Read)：</strong>某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。<br>**不可重复读(Non-repeatable read):**在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。<br>**幻读(Phantom Read):**在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read Uncommitted</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read Committed</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable Read</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<h4 id="mysql主从同步原理和过程"><a href="#mysql主从同步原理和过程" class="headerlink" title="mysql主从同步原理和过程"></a>mysql主从同步原理和过程</h4><p>slave（从服务器）</p>
<p>master（主服务器）</p>
<p>mysql主从是异步复制过程</p>
<p>master开启bin-log功能，日志文件用于记录数据库的读写增删<br>需要开启3个线程，master IO线程，slave开启 IO线程 SQL线程，<br>Slave 通过IO线程连接master，并且请求某个bin-log，position之后的内容。<br>MASTER服务器收到slave IO线程发来的日志请求信息，io线程去将bin-log内容，position返回给slave IO线程。<br>slave服务器收到bin-log日志内容，将bin-log日志内容写入relay-log中继日志，创建一个master.info的文件，该文件记录了master ip 用户名 密码 master bin-log名称，bin-log position。<br>slave端开启SQL线程，实时监控relay-log日志内容是否有更新，解析文件中的SQL语句，在slave数据库中去执行。</p>
<h4 id="mysql中有哪几类锁"><a href="#mysql中有哪几类锁" class="headerlink" title="mysql中有哪几类锁"></a>mysql中有哪几类锁</h4><p>按照对数据操作的锁粒度来分：行级锁、表级锁、页级锁、间隙锁</p>
<p><strong>行级锁分为共享锁和排他锁</strong></p>
<p>表级锁定分为<strong>表共享读锁（共享锁）与表独占写锁（排他锁）</strong></p>
<p>按照锁的共享策略来分：共享锁、排他锁、意向共享锁、意向排他锁</p>
<p>从加锁策略上分：乐观锁和悲观锁</p>
<p>其他：自增锁</p>
<h4 id="有哪些锁类型？"><a href="#有哪些锁类型？" class="headerlink" title="有哪些锁类型？"></a>有哪些锁类型？</h4><h4 id="事务隔离级别？"><a href="#事务隔离级别？" class="headerlink" title="事务隔离级别？"></a>事务隔离级别？</h4><h4 id="幻读解决方案？"><a href="#幻读解决方案？" class="headerlink" title="幻读解决方案？"></a>幻读解决方案？</h4><p>MVCC(Multi-Version Concurrency Control)</p>
<p>表中的每条数据都会添加两个字段：</p>
<ul>
<li>创建版本号：创建记录时系统版本号</li>
<li>删除版本号：删除记录时系统版本号</li>
</ul>
<h4 id="有没有碰到过死锁，怎么处理的？"><a href="#有没有碰到过死锁，怎么处理的？" class="headerlink" title="有没有碰到过死锁，怎么处理的？"></a>有没有碰到过死锁，怎么处理的？</h4><h4 id="有没有碰到过明明应该用到索引，explain显示却没有用到索引的情况？怎么解决的？"><a href="#有没有碰到过明明应该用到索引，explain显示却没有用到索引的情况？怎么解决的？" class="headerlink" title="有没有碰到过明明应该用到索引，explain显示却没有用到索引的情况？怎么解决的？"></a>有没有碰到过明明应该用到索引，explain显示却没有用到索引的情况？怎么解决的？</h4><h4 id="遇到过哪些需要并发控制的场景？怎么解决的？"><a href="#遇到过哪些需要并发控制的场景？怎么解决的？" class="headerlink" title="遇到过哪些需要并发控制的场景？怎么解决的？"></a>遇到过哪些需要并发控制的场景？怎么解决的？</h4><h4 id="有没有了解分布式事务？用的什么方案？具体实现细节？"><a href="#有没有了解分布式事务？用的什么方案？具体实现细节？" class="headerlink" title="有没有了解分布式事务？用的什么方案？具体实现细节？"></a>有没有了解分布式事务？用的什么方案？具体实现细节？</h4><p>一、两阶段提交（2PC）</p>
<p>两阶段提交（Two-phase Commit，2PC），通过引入协调者（Coordinator）来协调参与者的行为，并最终决定这些参与者是否要真正执行事务。</p>
<p>运行过程</p>
<p>1准备阶段</p>
<p>协调者询问参与者事务是否执行成功，参与者发回事务执行结果。</p>
<p>2提交阶段</p>
<p>如果事务在每个参与者上都执行成功，事务协调者发送通知让参与者提交事务；否则，协调者发送通知让参与者回滚事务。</p>
<p>需要注意的是，在准备阶段，参与者执行了事务，但是还未提交。只有在提交阶段接收到协调者发来的通知后，才进行提交或者回滚。</p>
<p>存在的问题</p>
<p>1 同步阻塞 所有事务参与者在等待其它参与者响应的时候都处于同步阻塞状态，无法进行其它操作。</p>
<p>2 单点问题 协调者在 2PC 中起到非常大的作用，发生故障将会造成很大影响。特别是在阶段二发生故障，所有参与者会一直等待状态，无法完成其它操作。</p>
<p>3 数据不一致 在阶段二，如果协调者只发送了部分 Commit 消息，此时网络发生异常，那么只有部分参与者接收到 Commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</p>
<p>4 太过保守 任意一个节点失败就会导致整个事务失败，没有完善的容错机制。</p>
<p>二、补偿事务（TCC）</p>
<p>TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p>
<ul>
<li>Try 阶段主要是对业务系统做检测及资源预留</li>
<li>Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。</li>
<li>Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</li>
</ul>
<p>举个例子，假入 Bob 要向 Smith 转账，思路大概是： 我们有一个本地方法，里面依次调用</p>
<p>1首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。</p>
<p>2在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。</p>
<p>3如果第2步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。</p>
<p>优点： 跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些</p>
<p>缺点： 缺点还是比较明显的，在2,3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理。</p>
<p>三、本地消息表（异步确保）</p>
<p>本地消息表与业务数据表处于同一个数据库中，这样就能利用本地事务来保证在对这两个表的操作满足事务特性，并且使用了消息队列来保证最终一致性。</p>
<p>1在分布式事务操作的一方完成写业务数据的操作之后向本地消息表发送一个消息，本地事务能保证这个消息一定会被写入本地消息表中。</p>
<p>1之后将本地消息表中的消息转发到 Kafka 等消息队列中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发。</p>
<p>3在分布式事务操作的另一方从消息队列中读取一个消息，并执行消息中的操作。</p>
<p>优点： 一种非常经典的实现，避免了分布式事务，实现了最终一致性。</p>
<p>缺点： 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p>
<p>四、MQ 事务消息</p>
<p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p>
<p>以阿里的 RocketMQ 中间件为例，其思路大致为：</p>
<p>第一阶段Prepared消息，会拿到消息的地址。 第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。</p>
<p>也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</p>
<p>优点： 实现了最终一致性，不需要依赖本地数据库事务。</p>
<p>缺点： 实现难度大，主流MQ不支持，RocketMQ事务消息部分代码也未开源。</p>
<h4 id="分库分表怎么做？"><a href="#分库分表怎么做？" class="headerlink" title="分库分表怎么做？"></a>分库分表怎么做？</h4><h4 id="mysql优化？"><a href="#mysql优化？" class="headerlink" title="mysql优化？"></a>mysql优化？</h4><h4 id="分库分表？怎么解决分表后的分页，排序问题？"><a href="#分库分表？怎么解决分表后的分页，排序问题？" class="headerlink" title="分库分表？怎么解决分表后的分页，排序问题？"></a>分库分表？怎么解决分表后的分页，排序问题？</h4><h4 id="超买超卖怎么产生的？怎么解决？"><a href="#超买超卖怎么产生的？怎么解决？" class="headerlink" title="超买超卖怎么产生的？怎么解决？"></a>超买超卖怎么产生的？怎么解决？</h4><h4 id="主从复制原理？"><a href="#主从复制原理？" class="headerlink" title="主从复制原理？"></a>主从复制原理？</h4><h4 id="有没有碰到过主从延迟？解决方法？"><a href="#有没有碰到过主从延迟？解决方法？" class="headerlink" title="有没有碰到过主从延迟？解决方法？"></a>有没有碰到过主从延迟？解决方法？</h4><h4 id="索引优化？"><a href="#索引优化？" class="headerlink" title="索引优化？"></a>索引优化？</h4><h4 id="mysql互相同步数据不一致，怎么处理？"><a href="#mysql互相同步数据不一致，怎么处理？" class="headerlink" title="mysql互相同步数据不一致，怎么处理？"></a>mysql互相同步数据不一致，怎么处理？</h4><h4 id="pt-checksum、pt-sync"><a href="#pt-checksum、pt-sync" class="headerlink" title="pt-checksum、pt-sync"></a>pt-checksum、pt-sync</h4><p>1.选择（Selection）<br>2.映射（Projection）<br>3.联合（Union）<br>4.交集（Intersection）<br>5.差集（Difference）<br>6.笛卡尔积（Cartesian Product）<br>7.连接（Join）</p>
<h4 id="btree索引和hash索引的区别"><a href="#btree索引和hash索引的区别" class="headerlink" title="btree索引和hash索引的区别"></a>btree索引和hash索引的区别</h4><p>Hash 索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引。</p>
<p>（1）Hash 索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询。</p>
<p>（2）Hash 索引无法被用来避免数据的排序操作。</p>
<p>（3）Hash 索引不能利用部分索引键查询。</p>
<p>（4）Hash 索引在任何时候都不能避免表扫描。</p>
<p>（5）Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。</p>
<p><strong>总结:</strong></p>
<p>HASH索引适合等式比较的操作，不能用来加速order by操作，也不能确定在两个值之间大约有多少行，会影响一些查询的执行效率。而且只能使用整个关键字来搜索一行。<br>BTREE索引，使用大于，小于，BETWEEN，不等于，LIKE等操作符的时候都可以用。对索引字段进行范围查询的时候，只有BTREE索引可以通过索引访问。HASH索引实际上是全表扫描的。</p>
<hr>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ol>
<li><p>php-fpm进程数</p>
</li>
<li><p>国外技术大拿给出这么个公式：<br>在 N + 20% 和 M / m 之间。<br>N 是 CPU 内核数量。<br>M 是 PHP 能利用的内存数量。<br>m 是每个 PHP 进程平均使用的内存数量。<br>适用于 dynamic 方式。<br>static方式：M / (m * 1.2)</p>
</li>
<li><p>laravel实现原理</p>
</li>
<li><p>nginx fpm php 之间的关系和怎么通信的</p>
</li>
<li><p>php7新特性</p>
</li>
<li><p>spl</p>
</li>
<li><p>PHP内部结构，PHP生命周期，垃圾回收</p>
</li>
<li><p>PHP这些框架是怎么实现文件自动加载的</p>
</li>
<li><p>怎么上传大文件</p>
</li>
<li><p>php安全有哪些？</p>
</li>
<li><p>php优化方法？</p>
</li>
<li><p>php底层变量数据结构？数组实现方式？</p>
</li>
<li><p>php垃圾回收机制？</p>
</li>
<li><p>php7新特性,php7性能？</p>
</li>
<li><p>你会在生产环境使用php7吗？为什么？</p>
</li>
<li><p>php spl接口</p>
</li>
<li><p>php错误机制？你们是怎么处理异常的？</p>
</li>
<li><p>laravel依赖注入实现原理？有什么好处？</p>
</li>
<li><p>laravel优缺点？</p>
</li>
<li><p>你怎么选择框架？</p>
</li>
<li><p>php的自动加载原理？laravel是怎么实现的？</p>
</li>
<li><p>nginx php-fpm php</p>
</li>
</ol>
<hr>
<p>###Nginx</p>
<ol>
<li> nginx怎么做负载均衡？怎么做反向代理？</li>
</ol>
<hr>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ol>
<li><p>linux一些常用命令    lsof tail awk sed wc grep find</p>
</li>
<li><p>select、poll、epoll区别？</p>
</li>
<li><p>怎么把移动硬盘300G文件快速拷贝到linux?  nc -l</p>
</li>
<li><p>如何查看端口占用   lsof -i:8080</p>
</li>
</ol>
<hr>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ol>
<li>如果用redis的list做消息队列，可能会出现哪些问题？怎么解决？</li>
<li>redis哪些数据类型？</li>
<li>redis使用场景？</li>
<li>redis怎么做集群？</li>
<li>redis持久化原理？</li>
<li>memcache和redis区别？怎么选择？</li>
<li>memcache内存模型？使用场景？一致性hash算法？</li>
</ol>
<hr>
<h3 id="rabbitMQ"><a href="#rabbitMQ" class="headerlink" title="rabbitMQ"></a>rabbitMQ</h3><ol>
<li>rabbitmq中exchange种类和区别<br><a href="https://zhuanlan.zhihu.com/p/29463325">https://zhuanlan.zhihu.com/p/29463325</a><br><a href="https://www.cnblogs.com/luxiaoxun/p/3918054.html">https://www.cnblogs.com/luxiaoxun/p/3918054.html</a><br><a href="https://blog.csdn.net/rainday0310/article/details/22082503">https://blog.csdn.net/rainday0310/article/details/22082503</a></li>
<li>rabbit有哪些应用场景？你们使用的场景？</li>
<li>多个生产者同时消费应该消息会不会有问题？</li>
<li>rabbitmq基本使用？(交换机类型及使用场景)</li>
<li>RabbitMQ 官网上提供了 6 中工作模式：简单模式、工作队列模式、发布/订阅模式、路由模式、主题模式 和 RPC 模式</li>
<li>rabbit有哪些应用场景？你们使用的场景？</li>
<li>多个消费者同时消费应该消息会不会有问题？</li>
<li>rabbit消息会不会丢失？如果丢失怎么处理？</li>
<li>消息会不会被重复消费？</li>
</ol>
<hr>
<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ol>
<li>mongodb基本使用</li>
</ol>
<hr>
<h3 id="算法-amp-设计模式"><a href="#算法-amp-设计模式" class="headerlink" title="算法&amp;设计模式"></a>算法&amp;设计模式</h3><ol>
<li>常见设计模式 单例 工厂 代理 策略 装饰器</li>
<li>设计原则</li>
<li>常见算法  冒泡排序 选择排序 插入排序 快速排序 二分法查找</li>
<li>常见数据结构 单链表 双链表 队列 堆栈 二叉树 B树</li>
<li>链表、双向链表的数据结构</li>
<li>冒泡排序，快速排序，二分查找等算法</li>
</ol>
<hr>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ol>
<li>xss crsf ddos</li>
<li>sql注入原理及防御</li>
<li>web安全预防</li>
<li>cookie session安全</li>
<li>你们保存session的方案？</li>
</ol>
<hr>
<h3 id="工作态度"><a href="#工作态度" class="headerlink" title="工作态度"></a>工作态度</h3><ol>
<li>你做的最出色的项目，出色在什么地方？</li>
<li>你最不满意的地方是哪里？为什么？</li>
<li>你最擅长的技术是什么？</li>
<li>你碰到过的最大的难题，怎么解决的？</li>
<li>你与90/80后的后相比，优势在哪里？1 代码规范 2 工作经验 3 工作态度  4.代码架构，分层思想 5.高内聚低耦合 6易于扩展</li>
<li>离职原因</li>
<li>职业规划</li>
<li>对公司的了解</li>
<li>你为什么来本公司</li>
<li>你为什么胜任这个岗位</li>
</ol>
<hr>
<h3 id="大数据-amp-架构"><a href="#大数据-amp-架构" class="headerlink" title="大数据&amp;架构"></a>大数据&amp;架构</h3><ol>
<li><p>如果有一个广告系统访问日志，有1000万条记录，现在需要对日志信息做统计，你会采用哪些处理方法？</p>
</li>
<li><p>oltp,olap</p>
</li>
<li><p>cap定律，base理论</p>
</li>
<li><p>怎么处理并发？怎么设计秒杀方案？抢红包？</p>
</li>
<li><p>12306抢票设计</p>
</li>
<li><p>投票</p>
</li>
</ol>
<hr>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>给你256M的内存，对10G的文件进行排序（文件每行1个数字），如何实现？</li>
<li>假如你现在是12306火车订票的设计师，你该如何设计满足全国人民订票？</li>
<li>PHP在2011年底出现hash碰撞，hash碰撞原理为？如何进行修复？</li>
<li>项目经验 – 是否有亮点的模块? 模块是否自己设计? 设计是否合理? 是否考虑多种设计? 是否考虑性能? 核心算法是否能说的明, 写的出? 很重要</li>
<li>一个网页从服务器到客户端都经历了什么 </li>
<li>在团队中自己是个什么位置之类的问题</li>
<li>自己独立做过什么成熟的产品吗</li>
<li>你写代码有多长时间了，有没有做过开源项目</li>
<li>你如何理解的面向对象编程（什么是面向对象）</li>
<li>PHP为什么不安全。主要有那些安全问题</li>
<li>业务和性能冲突的时候你会怎么办</li>
<li>开发过程中你觉得最难的是什么</li>
<li>你觉得你和其他人比你的优势是什么</li>
<li>如何对一个亿级数据的表按照一个没有索引的字段进行统计</li>
<li>考察他对项目核心数据结构/算法的设计, 可结合大数据/高并发/分表分库/分布式服务/分布式事务方面去考察, 可发散到该领域通用问题解决(如树形存储/sku/秒杀系统等设计),<br>分布式理论与实践 – 考虑他对分表分库/分布式事务/均衡负载/分布式session/分布式cache/soa的经验, 很重要</li>
</ol>
<hr>
<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ol>
<li>员工离职率</li>
<li>员工不愿意加班怎么办？</li>
<li>假如你带领着一个技术团队做任务，但该任务无法按照进度完成，你会如何解决？</li>
<li>如果领导在现阶段进度已经排满的前提下，又插入任务，你会采取怎样的措施，保证总进度不延期？</li>
<li>如果你后期要带领一个团队，团队中有部分工程师当天预定的任务没有完成，你会如何处理？</li>
</ol>
<hr>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ol>
<li>使用哪些缓存</li>
<li>缓存的作用</li>
<li>缓存穿透的含义与解决</li>
<li>缓存雪崩的含义与解决</li>
<li>使用缓存来实现分布式锁／外部锁</li>
<li>在抢购商品场景下，一个商品下限制一个用户只能购买一次，请使用缓存来实现该限制（提示：使用缓存来记录每个商品的抢购的用户，要保证增量记录的原子性）</li>
</ol>
<hr>
<h3 id="说一下"><a href="#说一下" class="headerlink" title="说一下"></a>说一下</h3><ol>
<li>说一下什么是cdn</li>
<li>说一下mvc的含义</li>
<li>说一下orm的含义与实现</li>
<li>说一下路由的含义与实现</li>
<li>说一下orm中关联查询的延时加载的放大问题</li>
<li>数据层：分表分库是什么?如何拆分?分布式事务如何解决？</li>
<li>是否了解soa架构? 说一下你的理解</li>
<li>根据项目中涉及到的问题, 考察某类问题的设计思路, 如下</li>
<li>说一下购物车的实现</li>
<li>说一下订单表的实现</li>
<li>说一下存储树形结构的几种方式, 说一下每种方式在修改与查询上的优势与劣势</li>
<li>说一下权限系统的实现</li>
<li>说一下sku的实现</li>
<li>说一下秒杀系统的实现</li>
<li>说一下工作流的实现</li>
<li>说一下亿级大表的拆分（如订单表）</li>
<li>说一下soa的实现</li>
<li>说一下分布式事务的实现</li>
<li>简述 S.O.L.I.D 设计原则</li>
<li>PHP7 和 PHP5 的区别，具体多了哪些新特性？</li>
<li>为什么 PHP7 比 PHP5 性能提升了？</li>
<li>简述一下 PHP 垃圾回收机制（GC）</li>
<li>Redis、Memecached 这两者有什么区别？</li>
<li>什么是IOC</li>
<li>微服务的概念</li>
<li>说一下RPC</li>
<li>说一下Docker、K8s</li>
</ol>
<hr>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol>
<li>Doctype的作用。</li>
<li>如何隐藏超出对象部分的内容。</li>
<li>Name,ID有什么区别。</li>
<li>怎么使用jq，jq如果要是和其他类库冲突怎么办？</li>
<li>charset=utf-8一般写在html什么位置？</li>
<li>客户端的对象资源缓存问题。</li>
<li>如何隐藏一个对象。 </li>
<li>Js url怎么传递中文？</li>
<li>http的header里面有哪些东西？</li>
<li>习惯使用什么工具作为前端调试？</li>
<li>举例说说IE和其他浏览器几个不兼容的地方。</li>
<li>Ajax的使用。</li>
<li>会不会SEO</li>
</ol>
<hr>
<h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><hr>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><hr>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><hr>
<h3 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h3>]]></content>
  </entry>
</search>
